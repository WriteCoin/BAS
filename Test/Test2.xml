<?xml version="1.0" encoding="UTF-8"?>
<BrowserAutomationStudioProject>
     <Script><![CDATA[section(1 /*1*/,1 /*1*/,1 /*1*/,0,function(){
   section_start("\u007b\u0022n\u0022:\u0022Initialize\u0022\u007d", 0)!

   section_end()!

   section_start("\u007b\u0022n\u0022:\u0022ScriptAPI\u0022,\u0022fd\u0022:\u0022\u007b\u005c\u0022fd\u005c\u0022:\u005c\u0022\u005c\u0022,\u005c\u0022hr\u005c\u0022:false,\u005c\u0022rd\u005c\u0022:\u005c\u0022\u005c\u0022,\u005c\u0022rv\u005c\u0022:\u005c\u0022FUNCTION_RESULT\u005c\u0022,\u005c\u0022p\u005c\u0022:[]\u007d\u0022\u007d", 764184610)!
   function ScriptAPI()
   {
   section_insert()
   }
   section_end()!

   section_start("\u007b\u0022n\u0022:\u0022MyScripts\u0022,\u0022fd\u0022:\u0022\u007b\u005c\u0022fd\u005c\u0022:\u005c\u0022\u005c\u0022,\u005c\u0022hr\u005c\u0022:false,\u005c\u0022rd\u005c\u0022:\u005c\u0022\u005c\u0022,\u005c\u0022rv\u005c\u0022:\u005c\u0022FUNCTION_RESULT\u005c\u0022,\u005c\u0022p\u005c\u0022:[]\u007d\u0022\u007d", 555343944)!
   function MyScripts()
   {
   section_insert()
      section_start("\u007b\u0022n\u0022:\u0022api\u0022\u007d", 379938504)!
      /*Dat:*/
      /**
      * Получить параметр функции
      * @param arg параметр
      */
      function BAS_function_argument() {
      const arg = _function_argument('arg')
      const result = _function_argument(arg)
      _function_return(result)
      return result
      }
      /**
      * Вернуть значение функции
      * @param value значение функции
      */
      function BAS_function_return() {
      const value = _function_argument('value')
      _function_return(value)
      }
      /**
      * Получить возвращаемое значение функции, после ее вызова
      */
      function BAS_result_function() {
      _result_function()
      }
      /**
      * Вызвать функцию BAS (async)
      * @param func функция
      * @param params объект с параметрами
      */
      function BAS_call_function() {
      const func = _function_argument('func')
      const params = _function_argument('params')
      _call_function(func, params)!
      }
      /**
      * Получить результат действий
      */
      function BAS_result() {
      _function_return(_result())
      }
      /**
      * Завершить поток с успешным результатом.
      * Каждый поток в БАС может завершиться либо успешно либо с ошибкой.
      * В случае если все действия выполнены правильно, БАС устанавливает статус завершения успешным для этого потока.
      * Важно понимать что это действие останавливает только текущий поток, а не весь скрипт.
      * Вы можете установить статус завершения успешным и остановить поток с помощью этого действия
      * @param message Сообщение об успехе
      */
      function BAS_success() {
      const message = _function_argument('message')
      success(message)
      }
      /**
      * Завершить поток с неуспешным результатом.
      * Каждый поток в БАС может завершиться либо успешно либо с ошибкой.
      * В случае если одно из действий выполняется неправильно, поток будет остановлен с ошибочным статусом.
      * Вы также можете прервать поток и установить сообщение об ошибке с помощью этого действия
      * Важно понимать что это действие останавливает только текущий поток, а не весь скрипт.
      * @param text Сообщение об ошибке
      * @param dont_create_more Не перезапускать поток
      */
      function BAS_fail_user() {
      const test = _function_argument('text')
      const dont_create_more = _function_argument('dont_create_more')
      fail_user(text, dont_create_more)
      }
      /**
      * Это действие завершает весь скрипт, а не только отдельный поток, Используйте его в случае возникновения критической ошибки и если скрипт не может быть продолжен ни при каких обстоятельствах. Например, если ключ API к какому-то сервису не подходит.
      * БАС тоже используют это действие в случае отсутствия ресурса, таким образом, если пользователь не задал файл с прокси, скрипт закончится мгновенно.
      * Есть два режима работы этого действия. Первый режим - это  мгновенное завершение, Это означает что скрипт завершится в ту же самую секунду, в которую вызвано это действие, каждый поток также остановиться мгновенно даже если он выполнял какое-то важное задание. Второй режим -  это плавное завершение потоков, в этом случае БАС будет ждать пока все потоки закончат свою работу, и только потом завершить скрипт. Второй режим полезен в том случае если вы не хотите потерять важных данных, например, номера телефонов или почтовые адреса.
      * @param text Сообшение об ошибке
      * @param instant Завершить скрипт мгновенно
      */
      function BAS_die() {
      const text = _function_argument('text')
      const instant = _function_argument('instant')
      die(text, instant)
      }
      /**
      * Вызов функции в несколько потоков (async)
      * Выполнить функцию заданное число раз с заданным количеством потоков. Это можно представить как запуск другого скрипта внутри текущего потока.
      После того, как BAS начнет выполнять это действие, он запустит указанное количество потоков с заданной функцией. Поток, который вызвал это действие, останавливается до тех пор, пока не будет достигнут заданное количество успешных выполнений или заданное количество неудачных выполнений, а другие потоки продолжают выполнение.
      Недавно начатые потоки не знают о переменных или состоянии браузера в потоке, который их запускали, поэтому обмен данными между стартовым потоком и недавно созданными может осуществляться только с помощью глобальных переменных или ресурсов.
      Пример #1. У вас есть скрипт, который парсит список ссылок и должен получить их содержимое. Конечно, вы можете создать цикл, и перебрать все ссылки одна за другой. Но в этом случае ссылки будут обрабатываться последовательно. С помощью данного действия вы можете обработать их параллельно. Создайте ресурс, поместите туда все ссылки и вызовите функцию обработки в нескольких потоках (видео)
      Пример #2. Вам нужно вызвать некоторую функцию до начала скрипта, а другую - после завершения скрипта. В этом случае вы можете установить "Номер потока", "Количество успехов" и "Количество неудач" в 1 в главном скрипте. Создать 3 функции: MainScript, OnStart и OnEnd и вызвать OnStart и OnEnd с количеством потом равным 1, а функцию MainScript вызывать с параметрами такими же, как и основной скрипт (screen)
      Это действие никогда не завершается с ошибкой, даже если достигнуто максимальное количество неудач, поэтому вам не нужно оборачивать его в блок игнорирования ошибок.
      Вызовите действие "прервать скрипт" внутри заданной функции чтобы остановить скрипт вручную.
      * @param func функция для запуска потоков
      * @param threads Количество потоков
      * @param success_number Успешных выполнений
      * @param fail_number Неудачных выполнений
      * @param callback Функция
      */
      function BAS_call_section() {
      const func = _function_argument('func')
      const threads = _function_argument('threads')
      const success_number = _function_argument('success_number')
      const fail_number = _function_argument('fail_number')
      const callback = _function_argument('callback')
      _call_section(func, threads, success_number, fail_number, callback)!
      }
      /**
      * Вывести сообщение в лог. Это сообщение будет показано пользователю и должно сообщать ему о событиях, происходящих во время выполнении скрипта.
      Сообщение также будет записано в файл.
      BAS также добавит некоторую информацию к сообщению: дату, номер потока, идентификатор действия. Вот почему это действие не очень хорошо подходит, если вы хотите, выводить необработанные данные, например, список аккаунтов. В таком случае используйте действие "Результат".
      Если вы хотите изменить цвет сообщения, используйте действие "Выполнить код" вместе с вызовом api log_html(html, text).
      Если вы хотите выводить данные только в файл, используйте эту (статью)
      * @param text Данные для вывода
      */
      function BAS_log() {
      const text = _function_argument('text') || ''
      log(text)
      }
      /**
      * Очистить лог
      * Очистить окно лога и файл лога
      */
      function BAS_clear_log() {
      clear_log()
      }
      /**
      * Вывести данные на вкладку результатов.
      Это действие лучше всего подходит для вывода необработанных данных, таких как учетные записи, url профилей и т. д.
      Если вы хотите вывести сообщение с датой и номером потока, лучше использовать действие "Лог".
      Перед запуском скрипта вы можете создать до девяти вкладок под разные данные и указать имена для них, например, одну для аккаунтов, одну для сообщений, для аватаров и т. д.
      Параметр "Номер результата" задает номер вкладки, нумерация начинается с 1.
      Если вы хотите выводить данные только в файл, используйте эту (статью)
      * @param text Данные
      * @param number Номер результата
      */
      function BAS_result() {
      const text = _function_argument('text')
      const number = _function_argument('number')
      result(text, number)
      }
      /**
      * Читать Буфер Обмена
      * Прочитать данные указанного типа из буфера обмена.
      * Буфер обмена является глобальным для всей системы и должен быть заблокирован перед использованием в многопоточном режиме.
      * @param isBase64 Сохранить в формате base64
      * @param mimeType 'text/plain' | 'text/html'
      * Mime Тип
      */
      function BAS_get_clipboard() {
      const isBase64 = _function_argument('isBase64')
      const mimeType = _function_argument('mimeType') || 'text/plain'
      const result = _get_clipboard(isBase64, mimeType)
      _function_return(result)
      return result
      }
      /**
      * Запись В Буфер Обмена
      * Записать данные указанного типа в буфер обмена.
      * Буфер обмена является глобальным для всей системы и должен быть заблокирован перед использованием в многопоточном режиме.
      * @param isBase64 Данные представлены в формате base64
      * @param mimeType 'text/plain' | 'text/html'
      * Mime Тип
      * @param data Данные
      */
      function BAS_set_clipboard() {
      const isBase64 = _function_argument('isBase64')
      const mimeType = _function_argument('mimeType')
      const data = _function_argument('data')
      set_clipboard(isBase64, mimeType, data)
      }
      /**
      * Выполнить javascript код в контексте веб интерфейса.
      * Если веб интерфейс не включен, это действие не делает ничего.
      * Веб интерфейс можно включить через кабинет премиум аккаунта.
      * Если вы хотите запустить код в контексте BAS, используйте действие "Выполнить код".
      * BAS также предоставляет выполнять код с помощью node.js. для этого нужно использовать модуль "Встроенные языки".
      * Здесь вы можете поместить любой javascript код, включая код, который использует внешние библиотеки.
      * Есть возможность использовать переменные и ресурсы.
      *
      * Пример #1. Показать оповещение.
      * alert("Message")
      *
      * Пример #2. Вывод переменной БАС в консоль браузера.
      * console.log(VAR_TEST_VARIABLE)
      *
      * BAS использует uikit https://getuikit.com/docs/introduction для рендеринга контролов, и вы также можете использовать эту библиотеку.
      *
      * Пример #3. Показать уведомление через uikit.
      * UIkit.notification('My message');
      *
      * Библиотека Jquery тоже поддерживается.
      *
      * Пример #4. изменить значение текстового поля.
      * $("#control-id").val("Input value");
      *
      * @param Script
      */
      function BAS_web_interface_eval() {
      const Script = _function_argument('Script')
      _web_interface_eval(Script)
      }
      /**
      * Игнорировать ошибки (BAS-функция)
      * Игнорировать ошибки при выполнении одного или нескольких действий и продолжить выполнение скрипта дальше.
      * Вы можете использовать переменную VAR_WAS_ERROR чтобы проверить, были ли ошибки во время последнего блока "Игнорировать Ошибки".
      * В переменной VAR_LAST_ERROR содержится текст ошибки
      * Фактически, эмуляция блока try/catch
      * callback - функция выполнения действий в блоке try
      * error_callback - функция выполнения действий в блоке catch
      * error_message_func - функция, возвращающая сообщение об ошибке, вместо стандартного
      * message_ignore_func - функция, возвращающая сообщение об игнорировани ошибок, в начале выполнения блока try, вместо стандартного
      */
      function ignore_errors() {
      const callback = _function_argument('callback') || function() {}
      const error_callback = _function_argument('error_callback') || function(err) {}
      const error_message_func = _function_argument('error_message_func')
      const message_ignore_func = _function_argument('message_ignore_func')
      _call(function () {
      _on_fail(function () {
      VAR_LAST_ERROR = _result()
      VAR_ERROR_ID = ScriptWorker.GetCurrentAction()
      VAR_WAS_ERROR = false
      _break(1, true)
      })
      CYCLES.Current().RemoveLabel("function")
      const message_ignore = message_ignore_func && message_ignore_func()
      const message = (message_ignore === null || message_ignore === undefined) ? "Игнорирование ошибок" : message_ignore
      log(message)
      callback()!
      }, null)!
      _if(VAR_WAS_ERROR,function(){
      const error_message = error_message_func && error_message_func()
      const message = (error_message === null || error_message === undefined) ? "Произошла ошибка : " + VAR_LAST_ERROR : error_message
      log(message)
      error_callback(err)!
      })!
      }
      /**
      * If (BAS-функция)
      * Проверить заданное условие, если оно истинно, выполнить определенную последовательность действий, если оно ложно выполнить другую последовательность действий, наконец продолжить выполнение скрипта.
      * cond_func - функция, возвращающая условие для проверки
      * callback - функция при cond_func() равном true
      * callback_else - функция "иначе" при cond_func(), равном false
      */
      function BAS_if() {
      const cond_func = _function_argument('cond_func') || true
      const callback = _function_argument('callback') || function() {}
      const callback_else = _function_argument('callback_else') || function() {}
      _cycle_params().if_else = cond_func()
      _if(_cycle_params().if_else, callback)!
      _if(!_cycle_params().if_else, callback_else)!
      delete _cycle_params().if_else
      }
      /**
      * While (BAS-функция)
      * Выполнять заданный список действий пока какое-то условие является истинным.
      * Эмуляция while.
      * cond_func - функция условия подстановки в while
      * callback - функция выполнения действий в блоке while
      * message_func - функция, возвращающая строку сообщения в начале итерации цикла
      */
      function BAS_while() {
      const cond_func = _function_argument('cond_func') || true
      const callback = _function_argument('callback') || function(i) {}
      const message_func = _function_argument('message_func')
      _do(function(){
      VAR_CYCLE_INDEX = _iterator() - 1
      BREAK_CONDITION = cond_func();
      if(!BREAK_CONDITION)_break();
      const message = message_func && message_func()
      const log_message = (message === null || message === undefined) ? "Текущее повторение цикла : " + VAR_CYCLE_INDEX : message
      log(log_message)
      callback(VAR_CYCLE_INDEX)!
      })!
      }
      /**
      * Цикл For (BAS-функция)
      * Выполнить определенный список действий заданное число раз.
      * a и b - нижняя и верхняя границы цикла
      * callback - функция действий
      * message_func - функция, возвращающая сообщение, вместо стандартного
      */
      function BAS_for() {
      const a = _function_argument('a')
      const b = _function_argument('b')
      const callback = _function_argument('callback') || function(i) {}
      const message_func = _function_argument('message_func')
      _do(function(){
      VAR_CYCLE_INDEX = _iterator() - 1 + a
      if(VAR_CYCLE_INDEX > b) _break();
      const message = message_func && message_func()
      const log_message = (message === null || message === undefined) ? "Текущее повторение цикла : " + VAR_CYCLE_INDEX : message
      log(log_message)
      callback(VAR_CYCLE_INDEX)!
      })!
      }
      /**
      * Выполнить заданный набор действий для каждого элемента массива.
      * arrayList - входной массив, список
      * callback - функция действий
      * message_data_func - функция, возвращающая сообщение итерируемого значения массива, вместо стандартного
      * message_index_func - функция, возвращающая индекс итерации массива, вместо стандартного
      */
      function BAS_foreach() {
      const arrayList = _function_argument('arrayList')
      const callback = _function_argument('callback')
      const message_data_func = _function_argument('message_data_func')
      const message_index_func = _function_argument('message_index_func')
      _do_with_params({"foreach_data":(arrayList)},function(){
      VAR_CYCLE_INDEX = _iterator() - 1
      if(VAR_CYCLE_INDEX > _cycle_param("foreach_data").length - 1)_break();
      VAR_FOREACH_DATA = _cycle_param("foreach_data")[VAR_CYCLE_INDEX]
      const message_data = (message_data_func === null || message_data_func === undefined) ? "Текущие данные : " + VAR_FOREACH_DATA : message_data_func
      log(message_data)
      const message_index = (message_index_func === null || message_index_func === undefined) ? "Текущее повторение цикла : " + VAR_CYCLE_INDEX : message_index_func
      log(message_index)
      callback(VAR_CYCLE_INDEX, VAR_FOREACH_DATA)!
      })!
      }
      /**
      * Немедленно прервать текущий цикл. Это действие работает только если оно помещено внутрь цикла(действия for, foreach, while).
      * После выполнения этого действия цикл прерывается немедленно, текущий цикл не будет выполнен не единожды, а точка выполнения перемещается за следующие после цикла действие.
      * Обычной практикой является помещение действия break внутрь действия if, таким образом цикл будет остановлен только при некоем условии
      * @param {string} str Строка function для циклов
      */
      function BAS_break(str) {
      str = _function_argument('str') || 'function'
      _break(str)
      }
      /**
      * Немедленно остановить текущее выполнение цикла и начать следующее. Это действие работает только если оно помещено внутрь цикла(действия for, foreach, while).
      * После вызова этого действия текущее выполнение цикла прерывается немедленно, а точка выполнения перемещается в начало цикла
      * @param {string} str Строка function для циклов
      */
      function BAS_continue(str) {
      str = _function_argument('str') || 'function'
      _next(str)
      }
      /**
      * Создать новую переменную или изменить существующую заданным значением.
      Обычные переменные видимо только внутри текущего потока, используйте глобальные переменные если вы хотите сделай так, чтобы они были видимы во всех потоках.
      Имя переменной должно быть написано большими латинскими буквами и отражать ее назначение. Называть переменные VAR_A1 или VAR_A2 не рекомендуется.
      Созданную здесь переменную можно использовать позже если поместить ее имя в двойных квадратных скобках внутри любого поля: VAR_NEW_VARIABLE. Вам не нужно вводить это значение самостоятельно, просто нажмите на любое поле, затем на "Из переменной" и наконец выберите переменную из списка.
      Параметр "Значение переменной" может содержать другие переменные, например VAR_LOGIN@gmail.сom или ресурсы. Так что это действие также может соединять строки(VAR_PART1VAR_PART2), обновлять их, и т. д.
      По умолчанию параметр "Значение переменной" является строкой, но вы можете изменить его тип на int, так что переменная будет числом.
      При установке типа в expression, в переменную будет записан результат выполнения джаваскрипт кода. Это очень мощный механизм. Например, чтобы получить текущее время, введите Date.now() в поле "Значение переменной" (screen)
      Вы можете применять JavaScript функции к переменным BAS, например, код VAR_LINE.split(":")[0] разделит строку на части и возьмёт первый элемент.
      Если вы хотите записать многострочную строку в переменную, используйте действие "Шаблон"
      * @param {string} name имя глобальной переменной
      * @param {number | string | boolean} value значение
      */
      function BAS_set_global(name, value) {
      name = _function_argument('name')
      value = _function_argument('value')
      value = JSON.stringify(value)
      PSet("basglobal", name, value)
      }
      /**
      * Получить значение глобальной переменной
      * @param {string} name имя глобальной переменной
      * @returns значение переменной
      */
      function BAS_get_global(name) {
      name = _function_argument('name')
      const result = JSON.parse(P("basglobal", name) || "0")
      _function_return(result)
      return result
      }
      /**
      * Увеличить глобальную переменную
      * @param {string} name имя глобальной переменной
      * @param {number | string | boolean} val На сколько увеличить переменную
      * Увеличить глобальную переменную на заданное значение.
      Другими словами, это действие выполняет JSON.parse(P("basglobal", "VARIABLE") || '""') = JSON.parse(P("basglobal", "VARIABLE") || '""') + num
      Это действие предполагает, что глобальная переменная будет иметь чисельний тип, если это не так, то тип переменной будет преобразован автоматически.
      Параметр "На сколько увеличить переменную" может быть меньше нуля, в таком случае переменная будет уменьшена на это значение.
      Параметр "На сколько увеличить переменную" также может быть равным нулю, это только преобразует тип переменной в чисельний.
      */
      function BAS_inc_global(name, val) {
      name = _function_argument('name')
      val = _function_argument('val')
      BAS_set_global(name, BAS_get_global(name) + val)
      }
      /**
      * Распарсить CSV строку на элементы.
      Это действие распарсит строку по указанным разделителям и сохранит распарсенные данные по указанным переменным.
      Например, если указана строка "email@gmail.com:mypass1" и переменные USERNAME,PASSWORD, то действие сохранит "email@gmail.com" в переменную VAR_USERNAME и "mypass1" в переменную VAR_PASSWORD.
      По умолчанию действие возвращает строки, но это можно изменить, включив параметр "Преобразовывать типы", находящийся в дополнительных настройках, тогда страки автоматически будут конвертироватся в числа, true или false, обекты, null и undefined.
      Например, если указана строка "test:123:true", то в первую переменную будет сохранена строка "test", во вторую переменную число 123 и в третью переменную логическое значение true.
      Если количество переменных больше, чем количество элементов в строке, то в лишние переменные будет записана пустая строка.
      Используйте действие "Парсить строку" из модуля Список если хотите получить результат в виде списка.
      * @param {string} str Строка
      * @param {string} seps Список разделителей
      * @param {Array} varList Список переменных
      * @param {boolean} convert Преобразовывать типы
      * @returns Объект с результатами
      */
      function BAS_cvs_parse(str, seps, varList, convert) {
      str = _function_argument('str')
      seps = _function_argument('seps') || ":;,"
      varList = _function_argument('varList')
      convert = _function_argument('convert') || false
      const csv_res = _csv_parse(str, seps, convert)
      const result = {}
      for (CYCLE_INDEX = 0; CYCLE_INDEX < varList.length; CYCLE_INDEX++) {
      const i = CYCLE_INDEX
      result[varList[i]] = _avoid_nilb(csv_res[i], "")
      }
      _function_return(result)
      return result
      }
      /**
      * Случайное Число
      * Сгенерировать случайное целое число в заданном диапазоне.
      * @param {number} a Минимальное Значение
      * @param {number} b Максимальное Значение
      * @returns Случайное число в указанном диапазоне
      */
      function BAS_random(a, b) {
      const a = _function_argument('a') || a
      const b = _function_argument('b') || b
      const result = Math.floor(Math.random() * b - a + 1) + a
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022browser_api\u0022\u007d", 803733900)!
      /*Dat:*/
      /**
      * Загрузить (async)
      * Загружает указанный URL в браузере. Примеры: загрузить google.com, загрузить instagram.com.
      *  Если вы столкнулись с ошибками во время выполнения этого действия, попробуйте снять флажок "Ждать полной загрузки страницы" (waiter_timeout_next) или обернуть действие загрузки в блок игнорирования ошибок.
      * @param text Url сайта
      * @param referrer Referrer. Может быть пустым
      * @param is_instant Ждать полной загрузки страницы после этого действия
      * @param callback
      */
      function BAS_load() {
      const text = _function_argument('text')
      const referrer = _function_argument('referrer') || ''
      const is_instant = _function_argument('is_instant')
      const callback = _function_argument('callback')
      _load(text, referrer, is_instant, callback)!
      }
      /**
      * Максимальное время выполнения задания (следующего действия). Используйте действие 'Таймаут' (функция general_timeout) чтобы установить максимальное время ожидания по умолчанию.
      * @param timeout максимальное время выполнения задания, в миллисекундах (следующего действия)
      */
      function BAS_general_timeout_next() {
      general_timeout_next(_function_argument('timeout'))
      }
      /**
      * BAS ограничивает время выполнения каждого действия. Никакое действие не может длиться вечно, кроме сна и ручного решения капчи, но вы можете настроить лимиты.
      * По умолчанию максимальное время решения капчи в неручном режиме составляет 120 секунд и 60 секунд для каждого другого действия.
      * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
      * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
      * BAS позволяет установить таймаут для каждого действия индивидуально, для этого щелкните на значок песочных часов возле кнопки отмены внутри интерфейса конкретного действия.
      * @param timeout Таймаут в миллисекундах
      */
      function BAS_general_timeout() {
      general_timeout(_function_argument('timeout'))
      }
      /**
      * @param timeout Таймаут в миллисекундах
      */
      function BAS_async_load_timeout() {
      async_load_timeout(_function_argument('timeout'))
      }
      /**
      * Изменить максимальное время решения капчи
      * @param timeout Таймаут в миллисекундах
      */
      function BAS_solver_timeout() {
      solver_timeout(_function_argument('timeout'))
      }
      /**
      * Текущий Url (async)
      * Получить текущий url из адресной строки браузера.
      * Получать из функции _result()
      */
      function BAS_url() {
      url()!
      _function_return(_result())
      }
      /**
      * Предыдущая Страница (async)
      * Открыть предыдущий url.
      * Это действие работает так же, как нажатие на кнопку "Назад" в браузере.
      * Если текущая страница загружена первой, это действие загрузит пустую страницу.
      * @param is_instant Не ждать полной загрузки страницы (добавлять wait_async_load и waiter_timeout_next соответственно)
      * @param callback Функция
      */
      function BAS_navigate_back() {
      const is_instant = _function_argument('is_instant')
      const callback = _function_argument('callback')
      const timeout = _function_argument('timeout')
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      navigate_back(is_instant, callback)!
      if (!is_instant) {
      wait_async_load()!
      }
      }
      /**
      * Ввод текста в элемент с фокусом (async)
      * Если вы хотите ввести текст в определенный элемент, кликните по нему и выберите "Ввод Текста".
      * Это действие может вводить любые символы включая специальные клавиши, такие как enter, backspace, insert, delete и т. д.
      * Если вы хотите ввести большой текст, используйте 0 интервал или действие "Запись В Буфер Обмена" и ввод <CONTROL>V
      * Ctrl = <CONTROL>, Alt = <MENU>, Shift = <SHIFT>, Backspace = <BACK>, tab = <TAB>, Enter = <RETURN>, Escape = <ESCAPE>, Page up = <PRIOR>, Page down = <NEXT>, End = <END>, home = <HOME>, Left = <LEFT>, Up = <UP>, Right = <RIGHT>, Down = <DOWN>, Insert = <INSERT>, Delete = <DELETE>, Mouse wheel up = <MOUSESCROLLUP>, Mouse wheel down = <MOUSESCROLLDOWN>
      * Добавлять wait_async_load()! для полной загрузки страницы после этого действия
      * Добавлять waiter_timeout_next(timeout) для задания максимального времени выполнения этого действия
      * @param text Текст для ввода
      * @param interval Интервал в миллисекундах
      */
      function BAS_type() {
      const text = _function_argument('text')
      const intreval = _function_argument('interval')
      const is_instant = _function_argument('is_instant')
      const timeout = _function_argument('timeout')
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      _type(text, interval)!
      if (!is_instant) {
      wait_async_load()!
      }
      }
      /**
      * Разрешение (async)
      * Изменяет разрешение браузера. Стандартное значение 1024x600. Если вы хотите получить стандартные разрешения для разных платформ, используйте сервис fingerprint switcher.
      * @param x Ширина
      * @param y Высота
      * @param callback Функция
      */
      function BAS_resize() {
      const x = _function_argument('x')
      const y = _function_argument('y')
      const callback = _function_argument('callback')
      resize(x, y, callback)!
      }
      /**
      * Получить разрешение и положение курсора (async)
      * Возвращает: Положение курсора X, Положение курсора Y, Положение прокрутки X, Положение прокрутки Y, Ширина бразуера, Высота браузера
      * Получить текущий размер браузера, положение курсора и прокрутки.
      * Чтобы изменить размеры браузера, используйте действие "Разрешение".
      * Чтобы изменить текущее положение прокрутки, используйте действие "Прокрутка".
      * Чтобы изменить текущее положение курсора, используйте действие "Двигать Мышь".
      */
      function BAS_get_browser_screen_settings() {
      _get_browser_screen_settings()!
      _function_return(_result())
      }
      /**
      * Сброс (proxy)
      * Очистите все данные браузера: прокси, user-agent, заголовки, фильтры БАС, данные кэша БАС, cookie.
      * Не вызывайте это действие при запуске потока, BAS автоматически очистит данные самостоятельно.
      */
      function BAS_new_browser() {
      const callback = _function_argument('callback')
      new_browser(callback)!
      }
      /**
      * Диалог Открыть Файл (async)
      * Загрузка файла выполняется в два этапа: установка следующего результата диалога открытия файла с помощью этого действия и нажатия на элемент, который запускает загрузку, например кнопку "Загрузить".
      * Вы всегда должны вызывать это действие перед началом загрузки, иначе BAS не будет знать, какой файл ему нужно отправить в браузер.
      * Используйте ресурс с типом "Файлы из папки" для загрузки всех файлов из папки и распределения их по потокам.
      * @param text Путь к файлу, который будет результатом вызова диалога открытия файла. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Это также может быть json массив с несколькими файлами, смотрите примеры. В этом случае BAS действует, как если бы пользователь выбрал несколько файлов.
      * Примеры: C:\file\path.txt; C:/file/path.txt; ["C:/file/path1.txt", "C:/file/path2.txt"]
      * @param callback функция
      */
      function BAS_open_file_dialog() {
      const text = _function_argument('text')
      const callback = _function_argument('callback')
      open_file_dialog(text, callback)!
      }
      /**
      * Начать Перетягивать Файл (async)
      * Это действие является альтернативой "Диалог Открыть Файл" с одной разницей - оно перетаскивает файл в браузер вместо открытия диалога.
      * Вызов этого действия аналогичен началу перетаскивания файла в обычном браузере.
      * Не забудьте закончить перетягивание с помощью действия Закончить Перетаскивание или Закончить Перетаскивание На Элементе.
      * @param text Путь к файлу для начала перетягивания. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Примеры: C:\file\path.txt; C:/file/path.txt
      * @param callback функция
      */
      function BAS_drag_file() {
      const text = _function_argument('text')
      const callback = _function_argument('callback')
      drag_file(text, callback)!
      }
      /**
      * Окно "prompt" (async)
      * Prompt отображает диалоговое окно с необязательным запросом на ввод текста. Это устаревшая функциональность, и большинство сайтов больше не используют ее. BAS позволяет автоматически вводить текст в это окно, для этого вы должны вызвать действие до появления диалога.
      * Принцип такой же, как в "Диалог Открыть Файл", сначала вы вызываете действие, которое задает результат, а потом запускаете диалог, BAS распознает его и вводит ранее установленное значение.
      * @param text Результат ввода
      * @param callback функция
      */
      function BAS_prompt_result() {
      const text = _function_argument('text')
      const callback = _function_argument('callback')
      prompt_result(text, callback)!
      }
      /**
      * HTTP Аутентификация (async)
      * HTTP аутентификация предоставляет метод для ввода логина и пароля от сайта. В настоящее время он редко используется, но некоторые сайты все еще полагаются на него. Во время аутентификации браузер показывает окно, и пользователь должен ввести данные. Этот процесс может быть автоматизирован, все, что вам нужно сделать, - это вызвать данное действие до отображения окна.
      * Хорошей идеей было бы поставить действие в начало сценария.
      * В случае, если оно будет вызвано после отображения окна, аутентификация работать не будет.
      * @param login HTTP Аутентификация логин
      * @param pass HTTP Аутентификация пароль
      * @param callback функция
      */
      function BAS_http_auth_result() {
      const login = _function_argument('login')
      const pass = _function_argument('pass')
      const callback = _function_argument('callback')
      http_auth_result(login, pass, callback)!
      }
      /**
      * Прокрутка (async)
      * Прокрутка браузера. Цель этого действия - сделать указанные координаты видимыми на экране.
      * Оно не перемещает левый верхний угол в заданное положение, просто гарантирует, что определенная позиция видна на экране. Если координаты уже видны, то это действие ничего не сделает, иначе оно будет прокручивать окно таким образом, чтобы координаты располагались как можно ближе к центру.
      * Если вы хотите, чтобы определенный элемент, а не координаты, был видимым, вместо этого действия используйте "Прокрутка К Элементу".
      * Если выбрана настройка "Использовать колесо мыши или касания", прокрутка будет выполнена так, как если бы ее делал реальный человек. Колесо мыши будет использоваться для настольного ПК и касания для сенсорного экрана в мобильном телефоне. Если флажок не установлен, прокрутка будет выполняться мгновенно.
      * Если вы хотите прокрутить страницу в самый низ, используйте следующие настройки: "X координата" = 0, "Y координата" = 999999.
      * Установка полного времени ожидания: вызовы waiter_timeout_next(timeout) и wait_async_load()! после вызова этой функции
      * @param target смещение Y координаты
      * @param callback функция
      */
      function BAS_scroll_to() {
      const target = _function_argument('target')
      const callback = _function_argument('callback')
      _scroll_to(target, callback)!
      }
      /**
      * Скриншот (async)
      * Это действие делает скриншот выбранной части экрана и сохраняет его в изображении в формате png, закодированном как строка base64.
      * Если выбранная область не видна, страница будет прокручена.
      * Координаты X и Y задаются в абсолютном смещении от краев страницы.
      * Если вы хотите сделать скриншот определенного элемента, нажмите на него и выберите действие "Скриншот".
      * Если вы хотите сделать снимок всей страницы, нажмите на любой элемент в браузере и используйте действие "Скриншот" с селектором >CSS> body.
      * Результат после выполнения этого действия хранится в функции _result
      * @param x X
      * @param y Y
      * @param width Ширина
      * @param height Высота
      * @param callback функция
      */
      function BAS_render() {
      const x = _function_argument('x')
      const y = _function_argument('y')
      const width = _function_argument('width')
      const height = _function_argument('height')
      const callback = _function_argument('callback')
      render(x, y, width, height, callback)!
      }
      /**
      * Recaptcha V3
      * Это действие решает google recaptcha 3.0.
      * Recaptcha v3, в отличие от других капч, не показывает изображения и не требует от пользователя какого-либо взаимодействия. Она работает абсолютно незаметно. Поэтому ее можно разместить в нескольких местах на сайте или даже на каждой странице. При переходе на страницу или при вызове события, к которым прикреплена Recaptcha v3, сайт получает рейтинг браузера. Рейтинг отражает вероятность того, что посетитель сайта является ботом.
      * Сайт может использовать результат по своему усмотрению. Например, один сайт может показывать капчу, если рейтинг пользователя ниже 0.4, на другом сайте может потребоваться проверка телефона, если оценка ниже 0.6, и пользователь будет заблокирован, если она ниже 0.3.
      * Это действие перехватывает запрос верификации пользователя сайтом и отправляет его в указанный сервис. Когда сервис вернет результат, он заменит реальный рейтинг браузера на то, что был получен от одного из работников выбранного сервиса.
      * ВАЖНО: Это действие само по себе не решает капчи, вместо этого оно устанавливает параметры решения Recaptcha v3 для последующих вызовов. Следовательно, оно должно быть вызвано до того, как появится Recaptcha v3.
      * Каждый сайт имеет свои требования к минимальному рейтингу, вы можете настроить ожидаемое значение, изменив параметр 'Минимальный рейтинг'.
      * Recaptcha v3 может быть размещена на всех страницах сайта. В таком случае, каждая страница будет иметь свое собственное действие. Например, могут быть действия для посещения страницы с ценами, посещения страницы c часто задаваемыми вопроcами и создание нового пользователя. Вы можете отключить перехват для второстепенных действий и включить его для важных, изменив параметр 'Название действия'.
      * Чтобы найти точное название действия на конкретном сайте, вам необходимо зайти на страницу с требуемым действием, после чего появится сообщение с его названием.(screen). Все уже вызванные дейстия будут отображены в выпающем списке для параметра 'Название действия'.
      * Использование сервиса требует ключа, который должен быть куплен на сайте сервиса и введен в поле "Ключ Rucaptcha/2captcha".
      * В качестве альтернативы этому действию вы можете попытаться обойти Recapthca V3. Вот что влияет на итоговый рейтинг: профиль с авторизацией Gmail и историей поиска Google созданный некоторе время назад, хороший прокси, продолжительная история действий на сайте, с которым вы работаете. Остановимся подробнее на последнем пункте. Recaptcha v3 отслеживает ваши действия на каждом сайте, регистрируя каждое действие, которое вы выполняете. Например, если вы посещаете страницу покупок, ищете какой-то товар, посещаете страницу с часто задаваемыми вопросами и только после этого пытаетесь зарегистрировать учетную запись, это будет гораздо менее подозрительно, чем попытка зарегистрировать учетную запись немедленно, и с высокой вероятностью получит лучший результат.
      * Существует еще один тип рекапчи, который называется невидимая рекапча. Он работает почти так же, как Recaptcha v3, но вместо того, чтобы возвращать рейтинг пользователя, он показывает изображение, если пользователь кажется подозрительным, это эквивалентно низкому рейтингу. BAS также может решать невидимую рекапчу, для этого используйте действие 'Решить Recaptcha 2.0'.(видео https://www.youtube.com/watch?v=ltWy6O9jsTo).
      * @param action Название действия. Содержит одно или несколько действий recaptcha v3. Это поле может содержать несколько действий разделенный запятыми. Когда браузер выполнит одно из этих действий, запрос оценки рейтинга будет перехвачен и отправлен службе, выбранной в поле "Метод решения". По умолчанию абсолютно все запросы будут перехвачены, но вы можете настроить это поле для отправки только нужных действий.
      * Примеры:
      * * - Перехватывать все действия
      * Action 1 - Перехватывать только 'Action 1', все остальные действия будут возвращать реальный рейтинг браузера.
      * Action 1, Action 2 - Перехватывать только 'Action 1' и 'Action 2', все остальные действия будут возвращать реальный рейтинг браузера.
      * ВНИМАНИЕ: между дейтвиями не должно быть пробелов.
      * @param method Метод решения. Это строка, вы можете установить значение напрямую или использовать переменную или ресурс.
      * Примеры:
      * antigate - Решить с помощью сервиса http://anti-captcha.com/
      * rucaptcha - Решить с помощью сервиса http://rucaptcha.com/
      * 2captcha - Решить с помощью сервиса http://2captcha.com/
      * disable - Перестать перехватывать запросы.
      * Сайт получит ваш реальный рейтинг. Вы можете снова включить перехват позже.
      * @param rucaptcha Ключ Антигейт/Рукапча. Может быть пустым. Это ключ от сервиса, выбранного в поле "Метод решения".
      * @param serverurl Url сервера. Может быть пустым.
      * Примеры:
      * http://127.0.0.3:8083/
      * Пустая строка - Использовать url по умолчанию, например, http://rucaptcha.com для rucaptcha.
      * @param score Минимальный рейтинг, с которым должен приходить ответ от сервиса. 0.1 - самый низкий рейтинг, 0.9 - самый высокий. Это зависит от сайта, хочет ли он пропускать браузеры с данным рейтингом или нет. 0.6 - это значение по умолчанию, оно должно быть приемлемым для большинства сайтов.
      * Примеры:
      * 0.3
      * 0.7
      * @param use_proxy Отправлять текущий прокси на сервис. Заставляет работника, который решает капчу, использовать прокси, который вы настроили с помощью действия "Прокси".
      * Примеры:
      * true - Отправлять текущий прокси на сервис. Значение прокси получается из действия "Прокси".
      * false - Не отправлять прокси. Стандартное значение.
      * @param callback функция
      */
      function BAS_recaptcha_v3() {
      const action = _function_argument('action')
      const method = _function_argument('method')
      const rucaptcha = _function_argument('rucaptcha')
      const serverurl = _function_argument('serverurl')
      const score = _function_argument('score')
      const use_proxy = _function_argument('use_proxy')
      const callback = _function_argument('callback')
      _recaptchav3(action, method, rucaptcha, serverurl, score, use_proxy, callback)
      }
      /**
      * Решить капчу кликами (BAS-функция, вызов через _call_function)
      * Решить любой тип капчи, который требует кликать по изображениям.
      * Для решения ReCaptcha и HCaptcha рекомендуется использовать действия Решить Recaptcha 2.0 и Решить HCaptcha из контекстного меню браузера, если это возможно. С ними проще работать, и капча может решиться быстрее. Также эти действия позволяют выполнять автоматическую валидацию решения. Используйте это действие, если другие варианты не подходят вам по каким-либо причинам.
      * Это действие позволяет вам решить любую капчу, которая требует, чтобы вы нажимали на изображения в соответствии с определенными инструкциями. Это может быть ReCaptcha, HCaptcha и другие типы. Для решения таких капч необходимо отправить на сервис изображение, содержащее элементы, по которым нужно выполнить клики. Если на капче или рядом с ней присутствует описание, рекомендуется отправлять его вместе с изображением, чтобы избежать неверных решений.
      * Данное действие не выполняет автоматических кликов по координатам, в отличие от действия Решить капчу кликами из контекстного меню браузера, которое делает всё без вашего участия. Использовать его будет намного проще.
      * После того, как сервис решит капчу, вы получите список координат, по которым необходимо будет выполнить клики. Для того, чтобы выполнить клики, данный список необходимо пройти любым циклом, например for или foreach, и на каждой итерации вызвать действие Кликнуть для каждой пары координат X и Y. После выполнения кликов вам необходимо вручную продолжить работу. То есть, вы должны сами выполнить подтверждение решения или перейти к следующему изображению.
      * Для всех сервисов требуется сервисный ключ, который должен быть получен на сайте сервиса и введён в поле Ключ сервиса.
      * Для выполнения кликов по полученным координатам вам нужно учитывать позицию элемента, скриншот которого вы отправляете, относительно страницы, а также скролл по вертикали и горизонтали. Поэтому самым простым вариантом будет использование аналогичного действия для конкретного элемента из контекстного меню браузера, где клики будут выполняться автоматически.
      * Важный момент - данное действие не выполняет автоматического подтверждения решения капчи. Вы должны сделать это сами. Например, если вы решаете ReCaptcha2 используя данный метод, то вам нужно самостоятельно выполнить клик по чекбоксу, а после выполнения кликов по координатам - нажать на кнопку Далее или Готово.
      * Параметр Интервал проверки решения задачи отвечает за частоту отправки запросов на сервис для проверки решения капчи. Чем больше вы выставите значение, тем дольше BAS будет ожидать перед тем, как отправить очередной запрос. Рекомендуется использовать задержку не менее 5 секунд.
      * Параметр Задержка проверки решения задачи отвечает за длительность ожидания перед тем, как BAS начнет проверку капчи. Сначала капча отправляется на сервис, после этого BAS будет ожидать указанное время, по прошествии которого начнется непосредственно проверка состояния задачи. Большинство сервисов рекомендуют подождать не менее 5 секунд.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, вы можете указать необходимый URL сервера в поле URL сервиса, находящееся в дополнительных настройках.
      * Если вы используете такие программы, как CapMonster, XEvil или аналоги, вы должны заполнить поле URL сервиса в соответствии с документацией к данному ПО.
      * Подробную документацию по решению подобных капч можно посмотреть здесь. https://rucaptcha.com/api-rucaptcha#solving_clickcaptcha
      * Второй аргумент - объект с параметрами:
      *
      * textInstructions - Описание капчи. Может быть пустым. Если у captcha есть какое-либо описание, его можно добавить в это поле.
      * Примеры:
      * Выберите все изображения, на которых есть самолёт
      * Выберите все изображения, на которых есть лодка
      *
      * dataBase64 - Данные изображения в base64. Данные в формате base64, их можно получить из действия скриншот или из действия читать файл.
      *
      * taskWaitTimeout - Интервал проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между каждой новой проверкой решения капчи.
      * Примеры:
      * 600 - Ждать в течение 600 миллисекунд
      * 10000 - Ждать в течение 10 секунд
      * 5000 - Ждать в течение 5 секунд
      *
      * taskWaitDelay - Задержка проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между отправкой капчи на сервис и началом ожидания решения. Чаще всего, сервисы решения капчи указывают необходимое время ожидания, в остальных случаях вы можете указать любое удобное для вас значение.
      * Примеры:
      * 600 - Ждать в течение 600 миллисекунд
      * 10000 - Ждать в течение 10 секунд
      * 5000 - Ждать в течение 5 секунд
      *
      * serviceName - Название сервиса для решения капчи
      * Примеры:
      * rucaptcha - Решить капчу используя сервис https://rucaptcha.com/
      * 2captcha - Решить капчу используя сервис https://2captcha.com/
      *
      * serviceUrl - URL сервиса. Может быть пустым. ВЫ можете использовать этот параметр, если нужного вам сервиса нет в списке доступных. В таком случае укажите название сервиса, котрый работает по аналогичному API, и используйте нужный вам адрес.
      * Примеры:
      * Пустая строка - Использовать стандартный URL сервиса, http://rucaptcha.com для RuCaptcha и так далее
      * http://127.0.0.1:8083 - Использовать кастомный URL сервиса с портом 8083
      * http://127.0.0.3:8080 - Использовать кастомный URL сервиса с портом 8080
      *
      * serviceKey - Ключ сервиса. Ключ от сервиса решения капчи. Вы можете получить его в личном кабинете выбранного сервиса решения капчи
      *
      * imageData - Данные изображения в base64. Их можно получить из действия скриншот или из действия читать файл.
      */
      function BAS_solve_coordinates_captcha() {
      const textInstructions = _function_argument('textInstructions') || ''
      const dataBase64 = _function_argument('dataBase64')
      const taskWaitTimeout = _function_argument('taskWaitTimeout')
      const taskWaitDelay = _function_argument('taskWaitDelay')
      const serviceName = _function_argument('serviceName') || 'rucaptcha'
      const serviceUrl = _function_argument('serviceUrl') || ''
      const serviceKey = _function_argument('serviceKey')
      const imageData = _function_argument('imageData')
      const params = {
      textInstructions: textInstructions,
      dataBase64: dataBase64,
      taskWaitTimeout: taskWaitTimeout,
      taskWaitDelay: taskWaitDelay,
      serviceName: serviceName,
      serviceUrl: serverUrl,
      serviceKey: serviceKey,
      imageData: imageData
      }
      _call_function(BASCaptchaSolver.solveCoordinatesCaptcha, params)!
      }
      /**
      * Решено Неверно
      * Используйте это действие, если прошлая капча была решена неправильно.
      * На сервис отправляется запрос о неверном решении и деньги за решения не будут сняты со счета.
      * Если последняя капча была решена без использования сервиса(с помощью софта или в ручном режиме), это действие не сделает ничего.
      */
      function BAS_solver_failed() {
      solver_failed()
      }
      /**
      * Нажать кнопку расширения (async)
      * Для ожидания полной загрузки страницы после этого действия - использовать wait_async_load()! после этого действия
      * Для задания максимального времени выполнения задания - использовать waiter_timeout_next(timeout) после вызова этой функции
      * Выполнение этого действия аналогично клику по данной кнопке https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=chrome_2021-05-15_12-50-15.png
      * Перед использованием этого действия необходимо сначала установить расширение. Для этого используйте действие "Настройки браузера".
      * Более подробную информацию об использовании расширений можно найти на этой странице https://wiki.bablosoft.com/doku.php?id=ru:using_extensions
      * @param id Id или имя расширения
      * Идентификатор или имя расширения. Нет необходимости вводить id целиком или полное имя, допускается использование только его части.
      * Примеры:
      * padekgcemlokbadohgkifijomclgjgif - Открыть интерфейс расширения padekgcemlokbadohgkifijomclgjgif.
      * padekgcem - Открыть интерфейс расширения id которого содержит padekgcem.
      * Proxy SwitchyOmega - Открыть интерфейс расширения найденного по имени.
      * Proxy - Открыть интерфейс расширения найденного по части имени.
      * @param callback Функция
      */
      function BAS_click_extension_button() {
      const id = _function_argument('id')
      const callback = _function_argument('callback')
      const is_instant = _function_argument('is_instant')
      const timeout = _function_argument('timeout')
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      _click_extension_button(id, callback)!
      if (!is_instant) {
      wait_async_load()!
      }
      }
      /**
      * Режим сенсорного экрана (async)
      * Включить эмуляцию сенсорного экрана.
      * Сенсорный экран будет включен автоматически после изменения отпечатка, поэтому это действие не требуется вызывать явно.
      * В режиме cенсорного экрана браузер будет вести себя точно так же, как мобильный браузер: события движения мыши не будут отправляться, клики мыши будут заменены событиями касания, многие внутренние методы браузера также будут модифицированы, и т. д.
      * Специальные клавиши, такие как TAB, CTRL или стрелки на клавиатуре, останутся функциональными, но браузер не будет получать никаких уведомлений об этих событиях.
      * События колеса мыши будет заменено свайпами.
      * @param mode mobile | desktop
      * Использовать сенсорный экран. Включить эмуляцию сенсорного экрана для текущей сессии браузера.
      * Примеры:
      * mobile - Включить эмуляцию сенсорного экрана
      * desktop - Десктопный режим
      * @param callback Функция
      */
      function BAS_browser_mode() {
      const mode = _function_argument('mode')
      const callback = _function_argument('callback')
      _browser_mode(mode, callback)!
      }
      /**
      * Настройки Мыши
      * Это настройки перемещения мыши. Вы можете установить его либо глобально(посредством этого действия), либо для каждого действия индивидуально, нажав на значок настроек возле кнопки отмены внутри любого действия, которое использует мышь.
      * @param params Объект с параметрами:
      * speed - Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      * gravity - Притяжение. Значение с плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      * deviation - Отклонение. Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      */
      function BAS_default_move_params() {
      const speed = _function_argument('speed') || 100
      const gravity = _function_argument('gravity') || 6
      const deviation = _function_argument('deviation') || 2.5
      _default_move_params({
      speed: speed,
      gravity: gravity,
      deviation: deviation
      })
      }
      /**
      * Уведомления (async)
      * Разрешать или запрещать уведомления.
      * В обычном браузере уведомления отображаются на рабочем столе пользователя. Перед тем как начать их получать пользователь должен разрешить уведомления. Вызов этого действия идентичен запрету или разрешению уведомлений в зависимости от значения параметра. скрин1 (https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=allownotifications.png), скрин2 (https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=notificationexample.png).
      * По умолчанию уведомления отключены.
      * Если вы хотите включать уведомления только для определенных сайтов, используйте это действие несколько раз перед загрузкой каждого сайта.
      * Это действие необходимо вызвать до того, как будет загружена любая страница, на которой отображаются уведомления.
      * ВАЖНО: уведомления часто используются вместе с сервисами, а они работают только с включенными профилями. Таким образом, вместе с этим действием лучше использовать локальные профили.
      * @param enbale Разрешать (true) или запрещать (false) уведомления.
      * Примеры:
      * true - Всегда разрешать уведомления для всех следующих запросов.
      * false - Всегда запрещать уведомления для всех следующих запросов.
      * @param callback Функция
      */
      function BAS_enable_notifications() {
      const enable = _function_argument('enable')
      const callback = _function_argument('callback')
      _enable_notifications(enable, callback)!
      }
      /**
      * Открыть браузер (async)
      * Создать браузер, если он не был создан ранее. Это действие не обязательно использовать для работы с браузером.
      * По умолчанию браузер создается только после запуска первого действия, использующего браузер. После того, как браузер создан, он не будет остановлен до конца работы потока ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimedefault.png). Запуск и работа браузера, особенно в многопоточном режиме, является задачей, которая потребляет много ресурсов ПК, поэтому стандартный подход может быть не всегда эффективным. Чтобы избежать использования браузера, когда он вам не нужен, вы можете явно указать время работы браузера с помощью действий 'Открыть браузер' и 'Закрыть браузер', ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimemanual.png).
      * Если скрипт содержит хотя бы одно действие 'Открыть браузер' или 'Закрыть браузер', тогда включается режим ручного управления браузером. Это означает, что вы должны явно указать все места, где должен быть создан браузер, и места, где браузер должен быть закрыт. Если вы попытаетесь использовать браузер тогда, когда браузер еще не создан или уже закрыт, поток завершится с ошибкой ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimefail.png).
      * Очень важно понять, что по умолчанию браузер создается автоматически, и вам не нужно вызывать действие 'Открыть браузер', если только не требуется контролировать время работы браузера вручную.
      */
      function BAS_open_browser() {
      open_browser()!
      }
      /**
      * Закрыть браузер
      * Закрыть браузер, который был создан с помощью действия 'Открыть браузер'. Это действие не обязательно для работы с браузером.
      * По умолчанию браузер создается только после запуска первого действия, использующего браузер. После того, как браузер создан, он не будет остановлен до конца работы потока ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimedefault.png). Запуск и работа браузера, особенно в многопоточном режиме, является задачей, которая потребляет много ресурсов ПК, поэтому стандартный подход может быть не всегда эффективным. Чтобы избежать использования браузера, когда он вам не нужен, вы можете явно указать время работы браузера с помощью действий 'Открыть браузер' и 'Закрыть браузер', ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimemanual.png).
      * Если скрипт содержит хотя бы одно действие 'Открыть браузер' или 'Закрыть браузер', тогда включается режим ручного управления браузером. Это означает, что вы должны явно указать все места, где должен быть создан браузер, и места, где браузер должен быть закрыт. Если вы попытаетесь использовать браузер тогда, когда браузер еще не создан или уже закрыт, поток завершится с ошибкой ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserlifetimefail.png).
      * Очень важно понять, что по умолчанию браузер создается автоматически, и вам не нужно вызывать действие 'Открыть браузер', если только не требуется контролировать время работы браузера вручную.
      */
      function BAS_close_browser() {
      close_browser()
      }
      /**
      * Код страницы (BAS-функция)
      * Получение кода страницы и сохранение его в переменной. Это действие сохраняет текущий код со всеми изменениями, а не тот, который сервер вернул изначально.
      * Вы можете парсить его с помощью регулярных выражений или xpath.
      * element - элемент html-страницы, с которого получать скрипт
      */
      function get_html_script() {
      const element = _function_argument('element')
      page().script(element)!
      _function_return(_result())
      }
      /**
      * Получить разрешение и положение курсора (BAS-функция)
      * Получить текущий размер браузера, положение курсора и прокрутки.
      * Чтобы изменить размеры браузера, используйте действие "Разрешение".
      * Чтобы изменить текущее положение прокрутки, используйте действие "Прокрутка".
      * Чтобы изменить текущее положение курсора, используйте действие "Двигать Мышь".
      * Возвращает объект с полями:
      * cursorX - Положение курсора X
      * cursorY - Положение курсора Y
      * scrollX - Положение прокрутки X
      * scrollY - Положение прокрутки Y
      * width - Ширина браузера
      * height - Высота браузера
      */
      function get_browser_screen_settings() {
      _get_browser_screen_settings()!
      const result = JSON.parse(_result())
      _function_return({
      scrollX: result['ScrollX'],
      scrollY: result['ScrollY'],
      cursorX: result['CursorX'],
      cursorY: result['CursorY'],
      width: result['Width'],
      height: result['Height'],
      })
      _result_function()
      }
      /**
      * Прокси
      * По умолчанию браузер работает без прокси, это действие устанавливает его.
      * Используйте ресурсы, если вы хотите взять прокси из файла, url или базы данных.
      * Вы можете изменить прокси до или после создания браузера или загрузки страницы.
      * Пустой параметр сбросит прокси до значения по умолчанию(прямое соединение).
      * 'Настройки безопасности' задают различные настройки браузера в соответствии с новым прокси, например: часовой пояс и месторасположение. Эти сделает ваше приложение менее обнаруживаемым. Проверьте информацию для каждого отдельного параметра, чтобы понять, для чего он нужны. Настройки по умолчанию обеспечат оптимальную работу.
      * Параметры:
      * proxy - Прокси. Строка с информацией о прокси. Она может содержать ip, порт и тип прокси в разных форматах. Эта строка может также содержать логин и пароль, если их нету, данные для аутентификации могут быть заданы с параметрами "Логин прокси" и "Прокси пароль". Примеры: 210.10.10.10:1085, username:password@210.10.10.10:1085, socks5://210.10.10.10:1085, socks:210.10.10.10:1085:username:password, http:username:password:210.10.10.10:1085, \{\{proxy\}\} - Получить из ресурса, Пустая строка - Без прокси
      * proxy_type - Тип прокси. Поддерживаются прокси типа socks5 и http. Примеры: socks, socks5 - То же, что и socks; http, https - То же, что и http
      * login - Прокси Логи. Может быть пустым. Логин от прокси, переопределяет логин в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      * password - Пароль Прокси. Может быть пустым. Пароль от прокси, переопределяет пароль в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      * settings.changeTimeZone - Изменить часовой пояс. Изменить часовой пояс браузера в соответствии с прокси. Например, если прокси находится в Англии, то часовой пояс браузера будет изменен на UTC+00:00. Вы можете задать произвольное значение с помощью модуля "Часовой пояс". Примеры: true - Изменить часовой пояс, false - Не изменять часовой пояс
      * settings.changeLocation - Изменить месторасположение. Изменить месторасположение (координаты) браузера в соответствии с положением прокси. Оно будет установлено в точку, близкую к долготе/широте прокси. Вы можете задать произвольное значение с помощью модуля "Часовой пояс". Примеры: true - Запрос браузера на доступ к вашему месторасположению будет принят. Расположение баузера будет установлено в соответствии с прокси. false - Не менять месторасположение. Запрос браузера на доступ к вашему месторасположению будет отклонен.
      * settings.changeIPWebRTC - Изменить ip WebRTC. Заменить ip, возвращаемый WebRTC на ip прокси. Если вы хотите задать произвольное значение, используйте действие "Настройки браузера". Примеры: true - Включить WebRTC, заменить ip, возвращаемый WebRTC на ip прокси. false - Не менять состояние WebRTC.
      * settings.changeBrowserLanguage - Изменить язык браузера. Изменить язык браузера в зависимости от страны прокси. Этот параметр изменит заголовок Accept-Language, а также свойства javascript navigator.language и navigator.languages. По умолчанию значение языка будет состоять из языка и кода страны, разделенными дефисом, например 'de-DE' для Германии. Это значение корректное, но большинство браузеров использует более сложные варианты. Если вы хотите, чтобы BAS выглядел как настоящий браузер, используйте сервис FingersprintSwitcher, он установит язык в более естественное значение, например, для iPhone из Германии оно будет ровно 'de,en;q=0.8, *;q=0.01'. Вы также можете установить это значение явно, используя действие "Установить заголовок". Примеры: true - Изменить язык браузера в зависимости от страны прокси. false - Не изменять язык браузера, значение по умолчанию - 'en-US,en;q=0.9'.
      * settings.changeExternalIP - Определить внешний ip. Определить ip через внешний сервис. Этот параметр может быть полезен в том случае, если ip, который вы используете для подключения прокси, не соответствует ip видимому сайтом (внешнему ip). BAS будет использовать сервис ip.bablosoft.com для получения значения внешнего ip, а параметры "Изменить часовой пояс", "Изменить месторасположение" и "Изменить ip WebRTC" будут изменены в соответствии с полученным значением ip. Примеры: true - Использовать ip полученный из сервиса. false - Использовать ip полученный из строки прокси.
      * info.methodIP - Метод получения информации о IP. Метод, который будет использоваться для получения информации об IP. Примеры: database - Использовать внутреннюю базу данных, данный подход работает быстро и всегда доступен. Хотя база данных постоянно обновляется, этот метод может быть не самым точным по сравнению с другими. ip-api.com - Использовать сервис ip-api.com. Бесплатная версия имеет ограничение - 45 запросов с одного IP. Pro версия не ограничена количеством запросов, но стоит 15$ в месяц. custom function - Использовать отдельную BAS функцию для получения информации.
      * info.key - Ключ ip-api.com. Может быть пустым. Ключ от сервиса ip-api.com pro версии. Ключ доступен после покупки. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "ip-api.com" Примеры: Пустая строка - Использовать бесплатную версию, Ключ - Использовать pro версию
      * info.func - Отдельная функция для получения информации об IP. Отдельная функция BAS, которая получает строку IP {входной параметр называется "Ip"} и возвращает JSON с информацией об IP. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "custom function" Примеры:
      * {
      *  valid: true,
      *  city: "Frankfurt am Main",
      *  country: "DE",
      *  dstoffset: -120,
      *  offset: -60,
      *  timezone: "Europe/Berlin",
      *  longitude: 8.6843,
      *  latitude: 50.1188,
      * } - Пример JSON, который должна возвращать функция.
      */
      function BAS_proxy() {
      const proxy = _function_argument('proxy')
      const proxy_type = _function_argument('proxy_type')
      const login = _function_argument('login')
      const password = _function_argument('password')
      const settings = _function_argument('settings')
      const info = _function_argument('info')
      const hash = proxy_set_hash(proxy, proxy_type, login, password)
      if (_get_profile().length > 0) {
      if (hash.server.length === 0) {
      native("filesystem", "removefile", _get_profile() + "/proxy.txt")
      } else {
      const portNumber = hash.Port
      hash.Port = hash.Port.toString()
      native("filesystem", "writefile", JSON.stringify({path: _get_profile() + "/proxy.txt",value: JSON.stringify(hash),base64:false,append:false}))
      hash["Port"] = portNumber
      }
      }
      set_proxy(hash.server, hash.Port, hash.IsHttp, hash.name, hash.password)!
      sleep(1000)!
      set_proxy_extended(settings.changeTimeZone === "true", settings.changeLocation === "true", settings.changeIPWebRTC === "true", settings.changeBrowserLanguage === "true", settings.changeExternalIP === "true", info.methodIP, info.key, info.func)!
      sleep(1000)!
      }
      /**
      * Выполнить javscript в браузере
      * Максимальное время выполнения задания - general_timeout_next перед этой функцией
      * Выполнить javascript внутри браузера. Это означает, что доступны document, window и другие javascript объекты браузера.
      * Действие работает точно так же, как если бы вы вводили код в консоль браузера.
      * Вы можете использовать переменные BAS в данном действии как для чтения, так и для записи. Кроме того они могут быть любого типа, в том числе объектами и массивами.
      * Переменные используемые в коде автоматически обновляются после выполнения действия.
      * Ресурсы не доступны для использования в данном действии.
      * Во время выполнения скрипта могут возникать разные ошибки. В случае ошибки BAS прекратит выполнение скрипта.
      * Для того чтобы обработать подобные ситуации используйте действие Игнорировать ошибки.
      * В таком случае вы сможете использовать переменные VAR_WAS_ERROR и VAR_LAST_ERROR, чтобы узнать, была ли ошибка, и обработать её.
      * Пример #1. Изменение HTML определенного элемента:
      * document.getElementById("id").innerHTML = VAR_ELEMENT_HTML;
      * Пример #2. Получение HTML определенных элементов:
      * VAR_ELEMENT1_HTML = document.getElementById("id1").innerHTML;
      * VAR_ELEMENT2_HTML = document.getElementById("id2").innerHTML;
      * Пример #3. Установка значений для элементов `input` и `textarea`:
      * document.querySelector('textarea').value = VAR_TEXTAREA_VALUE.join('\r\n');
      * document.querySelector('input').value = VAR_INPUT_VALUE;
      * В данном действии вы можете писать код с использованием async и await. Действие будет ожидать завершения асинхронных операций.
      * При использовании асинхронного кода всегда дожидайтесь завершения функций с помощью await.
      * В противном случае переменные, значение которых задается в коллбэках либо в функциях then/catch/finally у класса Promise, не будут синхронизированы с BAS.
      * Если в таких участках кода вам не нужно обновлять переменные, вы можете не ждать их завершения.
      * Простой пример. Асинхронное ожидание в течение заданного времени (2 секунды):
      * await new Promise((resolve) => { setTimeout(() => resolve(), 2000); });
      * Другой пример. Получение данных со стороннего сайта с помощью функции fetch:
      * async function getPost(id) {
      *   return await fetch(`https://jsonplaceholder.typicode.com/posts/` + id)
      *     .then((res) => res.json());
      * }
      * VAR_POST = await getPost(1);
      */
      function BAS_javascript() {
      const script = _function_argument('script')
      page().script2(script,JSON.stringify(_read_variables([])))!
      const _parse_result = JSON.parse(_result())
      _write_variables(JSON.parse(_parse_result.variables))
      if(!_parse_result.is_success)
      fail(_parse_result.error)
      }
      /**
      * Выполнять при каждой загрузке страницы в браузере
      * Это действие задает скрипт, который должен выполняться на каждой странице и в каждом фрейме сразу после создания страницы. В отличие от действия "Яваскрипт", скрипт, определенный здесь, выполняется в самом начале загрузки страницы, что дает возможность изменять внутренние элементы браузера, такие как window.navigator. Действие должно быть выполнено до загрузки страницы.
      * script - Текст сценария
      * url - Применять к урл. Измените этот параметр, если вы хотите применить действие только к определенным url. * означет любое количество любых символов. Вы можете использовать несколько действий с разными параметрами "Применять к урл". Например, установите один прокси-сервер для *instagram.com* адресов и другой для *google.com* адресов. Или установите один прокси для *instagram.com* адресов и другой для всех остальных с помощью *
      * Примеры: * - Любой url; *google.com* - Любой адрес, который содержит google.com
      * tab - Применять к вкладке с номером. Измените этот параметр, если вы хотите применить действие только к определенным влкадкам. * означает применить к любым вкладкам. Вы можете использовать несколько действий с разными параметрами "Применять к вкладке с номером". Например, установите один прокси-сервер для 0 вкладки и другой для 1 вкладки. Или установите один прокси для 0 вкладки и другой для всех остальных с помощью *
      * Примеры: * - Любая вкладка; 0 - Только первая вкладка
      */
      function BAS_onLoadJavascript() {
      const script = _function_argument('script')
      const url = _function_argument('url')
      const tab = _function_argument('tab')
      _set_target({
      url: url,
      tab: tab,
      })
      onloadjavascript(script)!
      }
      /**
      * Скриншот (async)
      * Это действие делает скриншот выбранной части экрана и сохраняет его в изображении в формате png, закодированном как строка base64.
      * Если выбранная область не видна, страница будет прокручена.
      * Координаты X и Y задаются в абсолютном смещении от краев страницы.
      * Если вы хотите сделать скриншот определенного элемента, нажмите на него и выберите действие "Скриншот".
      * Если вы хотите сделать снимок всей страницы, нажмите на любой элемент в браузере и используйте действие "Скриншот" с селектором >CSS> body.
      * @param x X
      * @param y Y
      * @param width Ширина
      * @param height Высота
      * @param callback функция
      */
      function BAS_render(x, y, width, height) {
      const x = _function_argument('x')
      const y = _function_argument('y')
      const width = _function_argument('width')
      const height = _function_argument('height')
      render(x, y, width, height)!
      const result = _result()
      _function_return(result)
      return result
      }
      /**
      * Решить Капчу (BAS-функция)
      * Это действие решает капчу в виде картинки(не recaptcha) и работает, только если у вас есть данные изображения, отформатированного как строка в формате base64.
      * Текст капчи сохраняется в переменной и может быть использован позже.
      * Если вы хотите решить капчу из элемента на экране, вы должны нажать на него и используйте действие "Решить Капчу".
      * Если вы хотите решить recaptcha, нажмите на флажок recaptcha внутри браузера и выберите "Решить Recaptcha 2.0".
      * @param {string} dataBase64 Данные изображения в base64. Данные в формате base64, их можно получить из действия скриншот или из действия читать файл.
      * @param {string} method Метод решения. Метод решения - это строка, вы можете установить значение напрямую или использовать переменную или ресурс. Примеры:
      * manual - Капча решается вручную человеком, который использует БАС.
      * antigate - Решить с помощью сервиса http://anti-captcha.com/
      * rucaptcha - Решить с помощью сервиса http://rucaptcha.com/
      * 2captcha - Решить с помощью сервиса http://2captcha.com/
      * capmonster - Решить с помощью capmonster
      * dbc - Решить с помощью сервиса http://deathbycaptcha.com/
      * @param {string} key Ключ Антигейт/Рукапча/2капча/dbc. Может быть пустым. Этот ключ необходим только в том случае, если вы спользуете сервисы для решения капчи. Он не нужен в режимах manual, capmonster и captchasniper. В случае deathbycaptcha это поле должно содержать dbc_login:dbc_password.
      * @param {string} serverUrl Url сервера. Может быть пустым. Примеры:
      * http://127.0.0.3:8083/
      * Пустая строка - Использовать url по умолчанию, например, http://rucaptcha.com для rucaptcha.
      * @return Строка с результатом решения капчи
      */
      function BAS_solveCaptcha() {
      const dataBase64 = _function_argument('dataBase64')
      const method = _function_argument('method')
      const key = _function_argument('key')
      const serverUrl = _function_argument('serverUrl')
      solver_properties_clear(method)
      BAS_SolveRecaptcha_Serverurl = serverUrl;
      if (BAS_SolveRecaptcha_Serverurl.length > 0 && BAS_SolveRecaptcha_Serverurl.substr(BAS_SolveRecaptcha_Serverurl.length - 1) != "/") BAS_SolveRecaptcha_Serverurl += "/"
      if(method === "rucaptcha") {
      if(BAS_SolveRecaptcha_Serverurl) solver_property("rucaptcha","serverurl",BAS_SolveRecaptcha_Serverurl)
      rucaptcha(key)
      }
      if(method === "antigate") {
      if(BAS_SolveRecaptcha_Serverurl) solver_property("antigate","serverurl",BAS_SolveRecaptcha_Serverurl)
      antigate(key)
      }
      if(method === "dbc") {
      if(BAS_SolveRecaptcha_Serverurl) solver_property("dbc","serverurl",BAS_SolveRecaptcha_Serverurl)
      dbc(key)
      }
      if(method === "2captcha") {
      if(BAS_SolveRecaptcha_Serverurl) solver_property("2captcha","serverurl",BAS_SolveRecaptcha_Serverurl)
      twocaptcha(key)
      }
      if(method === "capmonster" || method === "capmonsterimage" || method === "capmonsteraudio") {
      solver_property("capmonster","serverurl",BAS_SolveRecaptcha_Serverurl)
      capmonster(key)
      }
      _if_else(method == "captchasniper", function(){
      _switch_http_client_internal()
      http_client_post(BAS_SolveRecaptcha_Serverurl, ["file","base64://" + dataBase64], {"content-type":("multipart"), "encoding":("UTF-8"), "method":("POST")})!
      {const split = http_client_content().split("|");VAR_CAPTCHA_RESULT = split[split.length-1]}
      _switch_http_client_main()
      }, function(){
      solve_base64("manual",dataBase64)!
      VAR_CAPTCHA_RESULT = _result()
      })!
      _function_return(VAR_CAPTCHA_RESULT)
      }
      /**
      * Решить капчу кликами (BAS-функция, вызов через _call_function)
      * Решить любой тип капчи, который требует кликать по изображениям.
      * Для решения ReCaptcha и HCaptcha рекомендуется использовать действия Решить Recaptcha 2.0 и Решить HCaptcha из контекстного меню браузера, если это возможно. С ними проще работать, и капча может решиться быстрее. Также эти действия позволяют выполнять автоматическую валидацию решения. Используйте это действие, если другие варианты не подходят вам по каким-либо причинам.
      * Это действие позволяет вам решить любую капчу, которая требует, чтобы вы нажимали на изображения в соответствии с определенными инструкциями. Это может быть ReCaptcha, HCaptcha и другие типы. Для решения таких капч необходимо отправить на сервис изображение, содержащее элементы, по которым нужно выполнить клики. Если на капче или рядом с ней присутствует описание, рекомендуется отправлять его вместе с изображением, чтобы избежать неверных решений.
      * Данное действие не выполняет автоматических кликов по координатам, в отличие от действия Решить капчу кликами из контекстного меню браузера, которое делает всё без вашего участия. Использовать его будет намного проще.
      * После того, как сервис решит капчу, вы получите список координат, по которым необходимо будет выполнить клики. Для того, чтобы выполнить клики, данный список необходимо пройти любым циклом, например for или foreach, и на каждой итерации вызвать действие Кликнуть для каждой пары координат X и Y. После выполнения кликов вам необходимо вручную продолжить работу. То есть, вы должны сами выполнить подтверждение решения или перейти к следующему изображению.
      * Для всех сервисов требуется сервисный ключ, который должен быть получен на сайте сервиса и введён в поле Ключ сервиса.
      * Для выполнения кликов по полученным координатам вам нужно учитывать позицию элемента, скриншот которого вы отправляете, относительно страницы, а также скролл по вертикали и горизонтали. Поэтому самым простым вариантом будет использование аналогичного действия для конкретного элемента из контекстного меню браузера, где клики будут выполняться автоматически.
      * Важный момент - данное действие не выполняет автоматического подтверждения решения капчи. Вы должны сделать это сами. Например, если вы решаете ReCaptcha2 используя данный метод, то вам нужно самостоятельно выполнить клик по чекбоксу, а после выполнения кликов по координатам - нажать на кнопку Далее или Готово.
      * Параметр Интервал проверки решения задачи отвечает за частоту отправки запросов на сервис для проверки решения капчи. Чем больше вы выставите значение, тем дольше BAS будет ожидать перед тем, как отправить очередной запрос. Рекомендуется использовать задержку не менее 5 секунд.
      * Параметр Задержка проверки решения задачи отвечает за длительность ожидания перед тем, как BAS начнет проверку капчи. Сначала капча отправляется на сервис, после этого BAS будет ожидать указанное время, по прошествии которого начнется непосредственно проверка состояния задачи. Большинство сервисов рекомендуют подождать не менее 5 секунд.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, вы можете указать необходимый URL сервера в поле URL сервиса, находящееся в дополнительных настройках.
      * Если вы используете такие программы, как CapMonster, XEvil или аналоги, вы должны заполнить поле URL сервиса в соответствии с документацией к данному ПО.
      * Подробную документацию по решению подобных капч можно посмотреть здесь. https://rucaptcha.com/api-rucaptcha#solving_clickcaptcha
      * Второй аргумент - объект с параметрами:
      *
      * textInstructions - Описание капчи. Может быть пустым. Если у captcha есть какое-либо описание, его можно добавить в это поле.
      * Примеры:
      * Выберите все изображения, на которых есть самолёт
      * Выберите все изображения, на которых есть лодка
      *
      * dataBase64 - Данные изображения в base64. Данные в формате base64, их можно получить из действия скриншот или из действия читать файл.
      *
      * taskWaitTimeout - Интервал проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между каждой новой проверкой решения капчи.
      * Примеры:
      * 600 - Ждать в течение 600 миллисекунд
      * 10000 - Ждать в течение 10 секунд
      * 5000 - Ждать в течение 5 секунд
      *
      * taskWaitDelay - Задержка проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между отправкой капчи на сервис и началом ожидания решения. Чаще всего, сервисы решения капчи указывают необходимое время ожидания, в остальных случаях вы можете указать любое удобное для вас значение.
      * Примеры:
      * 600 - Ждать в течение 600 миллисекунд
      * 10000 - Ждать в течение 10 секунд
      * 5000 - Ждать в течение 5 секунд
      *
      * serviceName - Название сервиса для решения капчи
      * Примеры:
      * rucaptcha - Решить капчу используя сервис https://rucaptcha.com/
      * 2captcha - Решить капчу используя сервис https://2captcha.com/
      *
      * serviceUrl - URL сервиса. Может быть пустым. ВЫ можете использовать этот параметр, если нужного вам сервиса нет в списке доступных. В таком случае укажите название сервиса, котрый работает по аналогичному API, и используйте нужный вам адрес.
      * Примеры:
      * Пустая строка - Использовать стандартный URL сервиса, http://rucaptcha.com для RuCaptcha и так далее
      * http://127.0.0.1:8083 - Использовать кастомный URL сервиса с портом 8083
      * http://127.0.0.3:8080 - Использовать кастомный URL сервиса с портом 8080
      *
      * serviceKey - Ключ сервиса. Ключ от сервиса решения капчи. Вы можете получить его в личном кабинете выбранного сервиса решения капчи
      *
      * imageData - Данные изображения в base64. Их можно получить из действия скриншот или из действия читать файл.
      */
      function BAS_solve_coordinates_captcha() {
      const args = _arguments()
      _call_function(BASCaptchaSolver.solveCoordinatesCaptcha, {
      textInstructions: args.textInstructions || "",
      taskWaitTimeout: args.taskWaitTimeout || 0,
      taskWaitDelay: args.taskWaitDelay || 0,
      serviceName: args.serviceName || "rucaptcha",
      serviceUrl: args.serviceUrl || "",
      serviceKey: args.serviceKey || "",
      imageData: args.imageData || "",
      })!
      }
      /**
      * Настройки Браузера (BAS-функция)
      * Изменяет настройки браузера: работа с сетью, canvas, webgl и другое. Используйте действие "Получить отпечаток" чтобы поменять отпечаток браузера.
      * Пустая строка или 0 означает, что значение изменяться не будут.
      * Смена параметров "Флеш", "Расширения", "Widevine" или "Командная строка" перезапустит браузер и таким образом обнулят остальные настройки(прокси, заголовки, и т.д.), так что лучшее место для этого действия - начало работы потока.
      * Расширение Chrome можно использовать в BAS, введя либо id расширения, либо url расширения, либо путь к расширению в поле "Расширения:". Id расширения - это уникальная строка длиной 32, например padekgcemlokbadohgkifijomclgjgif. Url расширения - это основной адрес расширения в магазине Chrome. Его домен - chrome.google.com, например: https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif. Путь расширения - это путь к распакованным файлым расширения. Каждый путь должен содержать папку с manifest.json и другими файлами. Смотрите эту ссылку, для инструкций касающихся распаковки расширений и другой информации об их использовании.
      * Чтобы включить флеш, вам нужно помимо изменения настройки "Флеш" в этом действии также установить флеш на ваш ПК. Инстукция расположена здесь https://wiki.bablosoft.com/doku.php?id=how_to_enable_flash.
      * Если вы хотите поменять настройки для всех потоков, то лучше воспользоваться вкладкой настройки.
      *
      *
      * Параметры:
      *
      * @param {string} flash enable | disable | ''
      * Использование флеш может раскрыть ваш ip, поэтому включать его не рекомендуется. Если вы все же хотите включить флеш, измените эту настройку и установите его на вашем ПК, инструкции находятся в блоке ниже.
      * Примеры:
      * enable - Использовать flash
      * disable - Не использовать flash
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} widevine enable | disable | ''
      * Включить или отключить плагин Widevine.
      * Примеры:
      * enable - Использовать Widevine
      * disable - Не использовать Widevine
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} webRTC enable | disable | replace | ''
      * Использование WebRTC также может раскрыть ваш ip даже если вы используете прокси.
      * Примеры:
      * enable - Включить WebRTC
      * disable - Отключить WebRTC
      * replace - Заменить ip, возвращаемые WebRTC значениями из поля 'WebRTC список ip'.
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} webRTCIps
      * Заменить ip, возвращаемые WebRTC значениями из этого поля. Эта настройка работает только если параметр 'WebRTC' установлен в значение 'replace'. Каждая строка этого поля должна содержать один ip. Этот параметр предназначен только для целей отладки, правильный способ изменения WebRTC ip - использовать действие 'Прокси'.
      * Примеры:
      * 192.168.0.1 - Локальный адрес
      * 142.1.2.3 - Внешний адрес
      * Clear - Удалить все ip
      * Пустая строка - Не изменять
      *
      * @param {string} canvas enable | disable | noise | ''
      * Это html элемент, который содержит графику: разнообразные фигуры, изображения, текст и т.д. Разные браузеры и операционные системы рисуют эти элементы немного по-разному. Сайт может использовать эти отличия, чтобы идентифицировать вас среди других пользователей. BAS позволяет защитить вас отключая canvas-элемент полностью или добавляя шум к получаемому изображению.
      * Примеры:
      * enable - Использовать canvas
      * disable - Не использовать canvas
      * noise - Добавить шум к изображению canvas.
      * Только для целей отладки, используйте сервис FingersprintSwitcher, чтобы задать шум.
      * Пустая строка - Не изменять эту настройку.
      *
      * @param {stirng} canvasNoise Шаблон шума canvas. Эта настройка находится здесь только для целей отладки, правильный метод добавления шума - использования сервиса FingersprintSwitcher
      *
      * @param {string} webGL enable | disable | noise | ''
      * Также как и canvas позволяет идентифицировать вас среди других пользователей.
      * Примеры:
      * enable - Исопльзовать WebGL
      * disable - Не использовать WebGL
      * noise - Добавить шум к изображению WebGL.
      * Только для целей отладки, используйте сервис FingersprintSwitcher, чтобы задать шум.
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} webGLNoise Шаблон шума WebGL. Эта настройка находится здесь только для целей отладки, правильный метод добавления шума - использование сервиса FingersprintSwitcher
      *
      * @param {string} webGLVendor Через свойство WebGL vendor сайт может узнать характеристики вашего оборудования через javascript, так что имеет смысл менять это значение. Пустое поле оставит реальное значение. Эта настройка находится здесь только для целей отладки, правильный метод добавления шума - использование сервиса FingersprintSwitcher
      * Примеры:
      * Google Inc. - Пример поля из реального браузера
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} webGLRenderer Через свойство WebGL renderer сайт может узнать характеристики вашего оборудования через javascript, так что имеет смысл менять это значение. Пустое поле оставит реальное значение. Эта настройка находится здесь только для целей отладки, правильный метод добавления шума - использование сервиса FingersprintSwitcher
      * Примеры:
      * Google Inc. - ANGLE (NVIDIA GeForce GTX 550 Ti DIrect3D11 vs_5_0 ps_5_0)
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} audio enable | disable | noise | ''
      * Сайт может идентифицировать пользователя, генерируя звук и считывая его как массив данных. Различные браузеры и операционные системы будут выполнять эту операцию с немного разными результатами. BAS позволяет защитить вас, запретив браузеру получать звуковые данные или добавляя шум к этим данным.
      * Примеры:
      * enable - Включить audio api
      * disable - Отключить методы audio api, используемые для получения отпечатков
      * noise - Добавить шум к получаемому звуку. Только для целей отладки, используйте сервис FingersprintSwitcher, чтобы задать шум.
      * Пустая строка - Не изменять эту настройку
      *
      * @param {string} audioNoise Шаблон шума audio. Эта настройка находится здесь только для целей отладки, правильный метод добавления шума - использование сервиса FingersprintSwitcher
      *
      * @param {string} QUIC enable | disable | ''
      * Включить протокол QUIC. В отличие от HTTP, протокол QUIC построен поверх UDP. Не все прокси поддерживают UDP. Это означает, что включение QUIC может вызвать проблемы при работе с определенными прокси. Рекомендуется включать эту опцию только в том случае, если вы уверены, что прокси ее поддерживает. ПО умолчанию отключено.
      * Примеры:
      * enable - Включить QUIC
      * disable - Отключить QUIC
      * Пустая строка - Не изменять эту настройку
      *
      * @param {number} maxFPS Ограничения частоты кадров
      * Максимальное количество раз за одну секунду, которое содержимого браузера может быть отрисовано. Чем ниже это значение, тем меньше будет нагрузка на процессор.
      * Установка слишком низкого значения может повлиять на работоспособность сайта. Снижение его ниже 30 может привести к непредсказуемым последствиям. Минимальное значение 10.
      * Примеры:
      * 30 - Ограничить частоту кадров 30
      * 0 - Не менять частоту кадров
      *
      * @param {string} extensions Каждая строка должна содержать либо путь к файлу, либо id расширения, либо url расширения, примеры: с:/путь/к/расширению/ http://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif padekgdemlokbadohgkifijomclgjgif
      * Расширение Chrome можно использовать в BAS, введя в это поле либо id расширения, либо url расширения, либо путь к расширению. Самый простой способ начать использовать расширение - скопировать url из магазина Chrome в это поле.
      * Примеры:
      * http://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif - Загрузить расширение по url
      * padekgdemlokbadohgkifijomclgjgif - Загрузить расширение по id
      * c:/extensions/background - Загрузить расширение из заданной папки. Файл c:/extensions/background/manifest.json обязательно должен существовать
      * Clear - Убрать все расширения
      * Пустая строка - Не изменять
      *
      * @param {string} commandLines Каждая строка должна содержать один параметр командной строки, который будет использоваться для запуска браузера. Это может быть как отлько один ключ так и ключ вместе со значением, Примеры: --disable-component-update --lang=ru-RU
      * Это поле может содержать дополнительные параметры командной строки, используемые для запуска браузера. Их также можно указать, изменив файл chrome_command_line.txt внутри папки apps/BASVERSION. Если в обоих местах будет указан один и тот же ключ, предпочтение будет отдано этому полю. Предыдущий список параметров командной строки будет заменен этим значением.
      * Примеры:
      * --key - Отправить только ключ
      * --key=value - Отправить ключ со значением
      * Clear - Удалить все параметры командной строки
      * Пустая строка - Не изменять
      */
      function BAS_settings() {
      const args = _arguments()
      const Params = {}
      const flash = args.flash || ""
      const widevine = args.widevine || ""
      const param_extensions = args.extensions || ""
      _require_extensions(param_extensions)!
      const extensions = (_result())
      const commandLines = args.commandLines || ""
      const webRTC = args.webRTC || ""
      const webRTCIps = (args.webRTCIps || "").split(/\r?\n/).filter(function(x) {
      return x && x.length > 0
      }).map(function(x) {
      return x.replace(/\s/g, '')
      }).join(';')
      const canvas = args.canvas || ""
      const canvasNoise = args.canvasNoise || ""
      const audio = args.audio || ""
      const audioNoise = args.audioNoise || ""
      const QUIC = args.QUIC || ""
      const maxFPS = args.maxFPS || 0
      const webGL = args.webGL || ""
      const webGLNoise = args.webGLNoise || ""
      const webGLVendor = args.webGLVendor || ""
      const webGLRenderer = args.webGLRenderer || ""
      if (flash.length > 0) Params.UseFlash = flash === 'enable'
      if (widevine.length > 0) Params.UseWidevine = widevine === 'enable'
      if (webRTC.length > 0) Params.Webrtc = webRTC
      if (canvas.length > 0) Params.Canvas = canvas
      if (canvasNoise.length > 0) Params.CanvasNoise = canvasNoise
      if (audio.length > 0) Params.Audio = audio
      if (audioNoise.length > 0) Params.AudioNoise = audioNoise
      if (QUIC.length > 0) Params.QUIC = QUIC
      if (maxFPS > 0) Params.MaxFPS = maxFPS
      if (webGL.length > 0) Params.Webgl = webGL
      if (webGLNoise.length > 0) Params.WebglNoise = webGLNoise
      if (webGLVendor.length > 0) Params.Webgl.unmaskedVendor = webGLVendor
      if (webGLRenderer.length > 0) Params.Webgl.unmaskedRenderer = webGLRenderer
      if (extensions.length > 0) Params.Extensions = extensions
      if (extensions === 'Clear') Params.Extensions = ''
      if (commandLines.length > 0) Params.CommandLine = commandLines
      if (commandLines === 'Clear') Params.CommandLine = ''
      if (webRTCIps.length > 0) Params.WebrtcIps = webRTCIps
      if (webRTCIps === 'Clear') Params.WebrtcIps = ''
      _settings(Params)!
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022network\u0022\u007d", 93274590)!
      /*Dat:*/
      /**
      * Установить заголовок (async)
      * Установить заголовок запроса для последующих запросов браузера.
      * @param name Имя заголовка
      * @param value Значение заголовка
      * @param callback Функция
      */
      function BAS_header() {
      const name = _function_argument('name')
      const value = _function_argument('value')
      const callback = _function_argument('callback')
      header(name, value, callback)!
      }
      /**
      * Сохранить cookies (async)
      * Сохранить все куки браузера в переменную.
      * Сохранять в переменную со значением: "{\"cookies\":" + _result() + "}"
      */
      function BAS_original_save_cookies() {
      save_cookies()!
      }
      /**
      * Разрешить кэш (async)
      * Добавлять содержимое страницы в кэш, если Url соответствует указанной маске. Работает только на страницах, которые будут загружены после вызова этого действия.
      * @param match Маска
      * @param callback Функция
      */
      function BAS_cache_allow() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      cache_allow(match, callback)!
      }
      /**
      * Запретить кэш (async)
      * Не добавлять содержимое страницы в кэш, если Url соответствует указанной маске. Работает только на страницах, которые будут загружены после вызова этого действия.
      * @param match Маска
      * @param callback функция
      */
      function BAS_cache_deny() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      cache_deny(match, callback)!
      }
      /**
      * Разрешать запрос (async)
      * Разрешить загрузку Url, если Url соответствует указанной маске. По умолчанию каждый Url загружается.
      * @param match Маска
      * @param callback функция
      */
      function BAS_request_allow() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      request_allow(match, callback)!
      }
      /**
      * Запретить запрос (async)
      * Запретить загрузку Url, если Url соответствует указанной маске. По умолчанию каждый Url загружается.
      * @param match Маска
      * @param callback функция
      */
      function BAS_request_deny() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      request_deny(match, callback)!
      }
      /**
      * Очистить кэшированные данные (async)
      * Удалить информацию о всех загруженных Url из кэша.
      */
      function BAS_cache_data_clear() {
      const callback = _function_argument('callback')
      cache_data_clear(callback)!
      }
      /**
      * Очистить маски (async)
      * Очистить все ранее добавленные маски кэша.
      */
      function BAS_cache_masks_clear() {
      const callback = _function_argument('callback')
      cache_masks_clear(callback)!
      }
      /**
      * Получить статус запроса (async)
      * Получить статус запроса для указанного Url.
      * В переменную помещать значение _result()
      * @param match Маска
      * @param callback функция
      */
      function BAS_cache_get_status() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      cache_get_status(match, callback)!
      }
      /**
      * Был ли запрос (async)
      * Проверить был ли загружен указанный Url.
      * В переменную помещать значение _result()
      * @param match Маска
      * @param callback функция
      */
      function BAS_is_load() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      is_load(match, callback)!
      const result = _result()
      _function_return(result)
      return result
      }
      /**
      * Запретить всплывающие окна (async)
      * Запретить все всплывающие окна. Запретить конкретные окна можно с помощью действия Запретить запрос.
      */
      function BAS_restrict_popups() {
      const callback = _function_argument('callback')
      _restrict_popups(callback)!
      }
      /**
      * Разрешить всплывающие окна (async)
      * Разрешить все всплывающие окна. Отменяет действие Запретить всплывающие окна.
      * @param callback функция
      */
      function BAS_allow_popups() {
      const callback = _function_argument('callback')
      _allow_popups(callback)!
      }
      /**
      * Разрешить загрузку файлов (async)
      * Разрешить все загрузки файлов. Отменяет действие Запретить загрузку файлов.
      * @param callback функция
      */
      function BAS_allow_downloads() {
      const callback = _function_argument('callback')
      _allow_downloads(callback)!
      }
      /**
      * Сохранить cookies (BAS-функция)
      * Возвращает сохраненные куки браузера
      */
      function BAS_save_cookies() {
      save_cookies()!
      _function_return("{\"cookies\":" + _result() + "}")
      }
      /**
      */
      function get_cookies(cookies) {
      const cookies = _function_argument('cookies') || cookies
      VALUE = cookies
      COOKIES = ""
      if(VALUE.length > 0) {
      COOKIES = JSON.parse(VALUE)["cookies"]
      if (typeof(COOKIES) == "undefined") {
      COOKIES = ""
      } else {
      COOKIES = JSON.stringify(COOKIES)
      }
      }
      cookies = COOKIES
      _function_return(cookies)
      return cookies
      }
      /**
      * Загрузить cookies (BAS-функция)
      * Установить куки для браузера.
      * @param {string} cookies Cookies
      */
      function BAS_load_cookies() {
      const cookies = _function_argument('cookies')
      cookies = get_cookies(cookies)
      restore_cookies(cookies)!
      }
      /**
      * Загрузить cookies из http клиента (BAS-функция)
      * Загрузить cookies из http клиента в браузер.
      */
      function BAS_load_cookies_from_http_client() {
      _switch_http_client_main()
      const cookies = get_cookies(http_client_save_cookies())
      restore_cookies(cookies)!
      }
      /**
      * Получить статус запроса (BAS-функция)
      * Получить статус запроса для указанного Url.
      * @param match Маска
      * @param callback функция
      * @returns статус запроса
      */
      function BAS_cache_get_status() {
      const match = _function_argument('match') || ''
      const callback = _function_argument('callback')
      cache_get_status(match, callback)!
      _function_return(_result())
      }
      /**
      * Был ли запрос (BAS-функция)
      * Проверить был ли загружен указанный Url.
      * В переменную помещать значение _result()
      * @param match Маска
      * @param callback функция
      */
      function BAS_is_load() {
      const match = _function_argument('match')
      const callback = _function_argument('callback')
      is_load(match, callback)!
      _function_return(_result())
      }
      /**
      * Получить последний элемент кэша (BAS-функция)
      * Получить последний элемент кэша для заданного Url и сохранить его в переменную.
      * @param {string} match Маска
      * @param {boolean} isBase64 Кодировать в base64
      * @param {number} timeout Максимальное время выполнения задания, по умолчанию без передачи аргумента
      */
      function BAS_get_cache() {
      const match = _function_argument('match')
      const timeout = _function_argument('timeout')
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_load(match)!
      if (isBase64) {
      cache_get_base64(match)!
      }
      else {
      cache_get_string(match)!
      }
      _function_return(_result())
      }
      /**
      * Получить все элементы кэша для заданного Url и сохранить их в список.
      * Это действие не будет работать само по себе. Чтобы получить элементы кэша, вам нужно сначала использовать действие "Разрешить кэш", оно задаст страницы, которые будут кэшироваться. Затем нужно загрузить страницу или выполнить действия в браузере, которые будут вызывать загрузку страницы, например ввод текста или клики мышью. Только после выполнения "Разрешить кэш" и загрузки страницы вы можете использовать это действие для получения кеша.
      * Старайтесь не использовать маску "*" для действия "Разрешить кэш", вместо этого укажите маску как можно более подробно, чтобы сохранять меньше элементов кэша. Добавление страницы в кеш является ресурсоемкой задачей, ограничивая количество элементов, вы можете оптимизировать скрипт.
      * Результатом этого действия является список, используйте модуль "Список" для его обработки.
      * Если вы хотите получить только последний элемент кэша, используйте действие "Получить последний элемент кэша".
      * Каждый элемент кэша - это объект со следующими свойствами:
      * "status" - целое число, содержит статус HTTP запроса.
      * "request_headers" - список с заголовками запроса, отправленных браузером.
      * "response_headers" - список с заголовками ответа, полученных от сервера.
      * "body" - данные ответа в формате base64. Используйте действие "Base64" для их декодирования.
      * "url" - url запроса.
      * "post_data" - пост данные запроса в формате base64.
      * "is_error" - значение true/false, указывает на наличие ошибки во время запроса.
      * "error" - код ошибки в виде строки.
      * "is_finished" - значение true/false, указывает был ли запрос завершен.
      * @param {string} match Маска. Url, кэш для которого вы хотите получить. url может содержать символ *, который будет заменен любой последовательностью символов.
      * Примеры:
      * * - Получить весь кэш
      * *url/part* - Получить кэш для url, который содержит url/part
      * http://site.com/script.js - Получить кэш для заданного url
      */
      function BAS_cache_get_all(match) {
      const match = _function_argument('match')
      BAS_cache_get_all(match)!
      const result = JSON.parse(_result())
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022waiting\u0022\u007d", 937810226)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQltC00LDRgtGMINCf0L7Qu9C90L7QuSDQl9Cw0LPRgNGD0LfQutC4IChhc3luYylcclxuICog0JbQtNCw0YLRjCDQv9C+0LrQsCDRgdGC0YDQsNC40YbQsCDQvdC1INCx0YPQtNC10YIg0LfQsNCz0YDRg9C20LXQvdCwINC/0L7Qu9C90L7RgdGC0YzRjlxyXG4gKiDQlNC70Y8g0LLRi9GB0YLQsNCy0LvQtdC90LjRjyDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LPQviDQstGA0LXQvNC10L3QuCDQstGL0L/QvtC70L3QtdC90LjRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywgd2FpdGVyX3RpbWVvdXRfbmV4dCwg0LIg0LzQuNC70LvQuNGB0LXQutGD0L3QtNCw0YVcclxuICovXHJcbmZ1bmN0aW9uIEJBU193YWl0X2FzeW5jX2xvYWQoKSB7XHJcbiAgICB3YWl0X2FzeW5jX2xvYWQoKSFcclxufVxyXG5cclxuLyoqXHJcbiAqINCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDQstGA0LXQvNGPINCy0YvQv9C+0LvQvdC10L3QuNGPINC30LDQtNCw0L3QuNGPLCDQsiDQvNC40LvQu9C40YHQtdC60YPQvdC00LDRhSAo0YHQu9C10LTRg9GO0YnQtdCz0L4g0LTQtdC50YHRgtCy0LjRjylcclxuICog0JLRi9C/0L7Qu9C90Y/RgtGMINC/0LXRgNC10LQg0LTQtdC50YHRgtCy0LjQtdC8INC+0LbQuNC00LDQvdC40Y8uINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0LTQtdC50YHRgtCy0LjQtSAn0KLQsNC50LzQsNGD0YInIChnZW5lcmFsX3RpbWVvdXQpINGH0YLQvtCx0Ysg0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0LzQsNC60YHQuNC80LDQu9GM0L3QvtC1INCy0YDQtdC80Y8g0L7QttC40LTQsNC90LjRjyDQv9C+INGD0LzQvtC70YfQsNC90LjRji5cclxuICogQHBhcmFtIHRpbWVvdXRcclxuICovXHJcbmZ1bmN0aW9uIEJBU193YWl0ZXJfdGltZW91dF9uZXh0KCkge1xyXG4gICAgY29uc3QgdGltZW91dCA9IF9mdW5jdGlvbl9hcmd1bWVudCgndGltZW91dCcpXHJcbiAgICB3YWl0ZXJfdGltZW91dF9uZXh0KHRpbWVvdXQpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQltC00LDRgtGMINCX0LDQs9GA0YPQt9C60LggVXJsIChhc3luYylcclxuICog0JbQtNCw0YLRjCDQv9C+0LrQsCDQsdGA0LDRg9C30LXRgCDQvdC1INC30LDQs9GA0YPQt9C40YIg0YPQutCw0LfQsNC90L3Ri9C5IFVSTC5cclxuICog0JTQu9GPINCy0YvRgdGC0LDQstC70LXQvdC40Y8g0LzQsNC60YHQuNC80LDQu9GM0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMIHdhaXRlcl90aW1lb3V0X25leHQsINCyINC80LjQu9C70LjRgdC10LrRg9C90LTQsNGFXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfd2FpdF9sb2FkKCkge1xyXG4gICAgd2FpdF9sb2FkKCkhXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQltC00LDRgtGMINCw0LTRgNC10YHQsCDQsdGA0LDRg9C30LXRgNCwIChhc3luYylcclxuICog0JbQtNCw0YLRjCDQv9C+0LrQsCDQsNC00YDQtdGB0L3QsNGPINGB0YLRgNC+0LrQsCDQvdC1INCx0YPQtNC10YIg0YHQvtC00LXRgNC20LDRgtGMINGD0LrQsNC30LDQvdC90YvQuSBVUkwuXHJcbiAqINCU0LvRjyDQstGL0YHRgtCw0LLQu9C10L3QuNGPINC80LDQutGB0LjQvNCw0LvRjNC90L7Qs9C+INCy0YDQtdC80LXQvdC4INCy0YvQv9C+0LvQvdC10L3QuNGPINC40YHQv9C+0LvRjNC30L7QstCw0YLRjCB3YWl0ZXJfdGltZW91dF9uZXh0LCDQsiDQvNC40LvQu9C40YHQtdC60YPQvdC00LDRhVxyXG4gKi9cclxuZnVuY3Rpb24gQkFTX3dhaXRfdXJsKCkge1xyXG4gICAgd2FpdF91cmwoKSFcclxufVxyXG5cclxuLyoqXHJcbiAqINCW0LTQsNGC0Ywg0YLQtdC60YHRgiAoYXN5bmMpXHJcbiAqINCW0LTQsNGC0Ywg0L/QvtC60LAg0L3QsCDRgdGC0YDQsNC90LjRhtC1INC90LUg0L/QvtGP0LLQuNGC0YHRjyDQvtC/0YDQtdC00LXQu9C10L3QvdGL0Lkg0YLQtdC60YHRgi5cclxuICog0JTQu9GPINCy0YvRgdGC0LDQstC70LXQvdC40Y8g0LzQsNC60YHQuNC80LDQu9GM0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMIHdhaXRlcl90aW1lb3V0X25leHQsINCyINC80LjQu9C70LjRgdC10LrRg9C90LTQsNGFXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfd2FpdF9jb250ZW50KCkge1xyXG4gICAgd2FpdF9jb250ZW50KCkhXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQltC00LDRgtGMIGNzcyAoYXN5bmMpXHJcbiAqINCW0LTQsNGC0Ywg0L/QvtC60LAg0L7Qv9GA0LXQtNC10LvQtdC90L3Ri9C5IENTUy3RgdC10LvQtdC60YLQvtGAINC90LUg0LLQtdGA0L3QtdGCINC90LXQv9GD0YHRgtC+0Lkg0YDQtdC30YPQu9GM0YLQsNGCLlxyXG4gKiDQlNC70Y8g0LLRi9GB0YLQsNCy0LvQtdC90LjRjyDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LPQviDQstGA0LXQvNC10L3QuCDQstGL0L/QvtC70L3QtdC90LjRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywgd2FpdGVyX3RpbWVvdXRfbmV4dCwg0LIg0LzQuNC70LvQuNGB0LXQutGD0L3QtNCw0YVcclxuICovXHJcbmZ1bmN0aW9uIEJBU193YWl0X2NzcygpIHtcclxuICAgIHdhaXRfY3NzKCkhXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQodC/0LDRgtGMIChhc3luYylcclxuICog0J/RgNC40L7RgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0YLQtdC60YPRidC40Lkg0L/QvtGC0L7QuiDQvdCwINGD0LrQsNC30LDQvdC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQvNC40LvQu9C40YHQtdC60YPQvdC0LlxyXG4gKiBAcGFyYW0gbWlsbGlzZWNvbmRzINCS0YDQtdC80Y8g0YHQvdCwINCyINC80LjQu9C70LjRgdC10LrRg9C90LTQsNGFXHJcbiAqIEBwYXJhbSBjYWxsYmFjayDRhNGD0L3QutGG0LjRj1xyXG4gKi9cclxuZnVuY3Rpb24gQkFTX3NsZWVwKCkge1xyXG4gICAgY29uc3QgbWlsbGlzZWNvbmRzID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdtaWxsaXNlY29uZHMnKVxyXG4gICAgY29uc3QgY2FsbGJhY2sgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2NhbGxiYWNrJylcclxuICAgIHNsZWVwKG1pbGxpc2Vjb25kcywgY2FsbGJhY2spIVxyXG59XHJcblxyXG4vKipcclxuICog0JbQtNCw0YLRjCDQl9Cw0LPRgNGD0LfQutC4INCk0LDQudC70LBcclxuICog0JbQtNCw0YLRjCDQvtC60L7QvdGH0LDQvdC40Y8g0YLQtdC60YPRidC10Lkg0LfQsNCz0YDRg9C30LrQuC5cclxuICog0JTQu9GPINCy0YvRgdGC0LDQstC70LXQvdC40Y8g0LzQsNC60YHQuNC80LDQu9GM0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMIHdhaXRlcl90aW1lb3V0X25leHQsINCyINC80LjQu9C70LjRgdC10LrRg9C90LTQsNGFXHJcbiAqL1xyXG4gZnVuY3Rpb24gd2FpdF9sb2FkX2ZpbGVzKCkge1xyXG4gIHdhaXRfbG9hZCgnZG93bmxvYWQ6Ly8qJykhXHJcbiAgY2FjaGVfZ2V0X3N0cmluZygnZG93bmxvYWQ6Ly8qJykhXHJcbiAgY29uc3QgZmlsZXBhdGggPSBKU09OLnBhcnNlKG5hdGl2ZShcImZpbGVzeXN0ZW1cIiwgXCJmaWxlaW5mb1wiLCBfcmVzdWx0KCkpKVtcImRpcmVjdG9yeVwiXSArIFwiL1wiICsgX3Jlc3VsdCgpXHJcbiAgX2Z1bmN0aW9uX3JldHVybihmaWxlcGF0aClcclxufSIsImNsYXNzIjoiZXhwcmVzc2lvbiJ9XX0=*/
      /**
      * Ждать Полной Загрузки (async)
      * Ждать пока страица не будет загружена полностью
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function BAS_wait_async_load() {
      wait_async_load()!
      }
      /**
      * Максимальное время выполнения задания, в миллисекундах (следующего действия)
      * Выполнять перед действием ожидания. Используйте действие 'Таймаут' (general_timeout) чтобы установить максимальное время ожидания по умолчанию.
      * @param timeout
      */
      function BAS_waiter_timeout_next() {
      const timeout = _function_argument('timeout')
      waiter_timeout_next(timeout)
      }
      /**
      * Ждать Загрузки Url (async)
      * Ждать пока браузер не загрузит указанный URL.
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function BAS_wait_load() {
      wait_load()!
      }
      /**
      * Ждать адреса браузера (async)
      * Ждать пока адресная строка не будет содержать указанный URL.
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function BAS_wait_url() {
      wait_url()!
      }
      /**
      * Ждать текст (async)
      * Ждать пока на странице не появится определенный текст.
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function BAS_wait_content() {
      wait_content()!
      }
      /**
      * Ждать css (async)
      * Ждать пока определенный CSS-селектор не вернет непустой результат.
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function BAS_wait_css() {
      wait_css()!
      }
      /**
      * Спать (async)
      * Приостанавливает текущий поток на указанное количество миллисекунд.
      * @param milliseconds Время сна в миллисекундах
      * @param callback функция
      */
      function BAS_sleep() {
      const milliseconds = _function_argument('milliseconds')
      const callback = _function_argument('callback')
      sleep(milliseconds, callback)!
      }
      /**
      * Ждать Загрузки Файла
      * Ждать окончания текущей загрузки.
      * Для выставления максимального времени выполнения использовать waiter_timeout_next, в миллисекундах
      */
      function wait_load_files() {
      wait_load('download://*')!
      cache_get_string('download://*')!
      const filepath = JSON.parse(native("filesystem", "fileinfo", _result()))["directory"] + "/" + _result()
      _function_return(filepath)
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022email\u0022\u007d", 630131116)!
      /*Dat:*/
      /**
      * Настроить
      * Настроить доступ к серверу imap для чтения электронной почты.
      * Это действие нужно вызвать один раз перед любым другим действием, которое работает с чтением писем.
      * Вам нужно заполнить imap сервер, ваше имя пользователя и пароль. Их обычно можно найти, выполнив поиск imap настроек для вашего почтового хостинга, например: 'Настройки gmail imap'
      * Для большинства почтовых хостингов вам также необходимо разрешить доступ imap в настройках учетной записи. Вот настройки для gmail.
      * Gmail также требует, чтобы разрешить доступ небезопасным приложениям для работы с BAS.
      * Логин и пароль почти всегда совпадают с вашим логином и паролем для почтового ящика. Логин может включать или не включать почтовый домен, убедитесь в этом на странице настроек imap для вашей электронной почты.
      * Mail.ru не позволяет искать письма в почтовом ящике.
      * Почтовый ящик может содержать несколько папок, и вы можете искать письма из определенной папки, изменяя параметр 'Имя папки'. По умолчанию он установлен в 'INBOX', эта папка содержит абсолютно все сообщения. Каждый почтовый хостинг предоставляет свои собственные имена по умолчанию для разных папок. Например, имя по умолчанию для папки удаленных писем в gmail - '[Gmail]/Trash', для папки спама - '[Gmail]/Spam'. Вы также можете создавать свои собственные папки и использовать их в этом действии.
      * @param host Imap сервер. Можно получить, поискав настройки imap для вашего почтового хостинга, например: 'Настройки gmail imap'
      * Примеры:
      * imap.gmail.com - gmail.com
      * imap.mail.yahoo.com - yahoo.com
      * imap-mail.outlook.com - outlook.com
      * imap.yandex.ru - yandex.ru
      * imap.mail.ru - mail.ru
      * @param username Имя пользователя. Может быть пустым. Имя пользователя, оно почти всегда совпадает с адресом электронной почты.
      * Примеры:
      * test@gmail.com
      * test - Логин может также не включать почтовый домен. Смотрите настройки imap для вашей почты.
      * @param password Пароль. Может быть пустым. Пароль, он почти всегда совпадает с паролем электронной почты
      * @param port Порт imap сервера. Почти всегда это значение должно быть равно 993. Если 993 не работает, попробуйте найти настройки imap для своего почтового хостинга, например 'Настройки gmail imap'
      * Примеры:
      * 993 - Порт по умолчанию для сервера imap
      * @param encryption 'ssl' | 'none' Шифрование
      * @param inbox Имя папки. Почтовый ящик может содержать несколько папок, и вы можете искать письма из определенной папки, изменяя этот параметр. По умолчанию он установлен в 'INBOX', эта папка содержит абсолютно все сообщения. Каждый почтовый хостинг предоставляет свои собственные имена по умолчанию для разных папок. Например, имя по умолчанию для папки удаленных писем в gmail - '[Gmail]/Trash', для папки спама - '[Gmail]/Spam'. Вы также можете создавать свои собственные папки и использовать их в этом действии.
      * Примеры:
      * INBOX - Доступ ко всем сообщениям
      * [Gmail]/Trash - Корзина, только для gmail
      * [Gmail]/Spam - Спам-папка, только для gmail
      */
      function BAS_imap_client_set_config() {
      const host = _function_argument('host')
      const username = _function_argument('username') || ''
      const password = _function_argument('password') || ''
      const port = _function_argument('port') || 993
      const encryption = _function_argument('encryption') || 'ssl'
      const inbox = _function_argument('inbox')
      imap_client_set_config(host, username, password, port, encryption, inbox)
      }
      /**
      *
      */
      function proxy_set_hash(proxy, proxy_type, login, password) {
      const proxy = _function_argument('proxy') || proxy
      const proxy_type = _function_argument('proxy_type') || proxy_type
      const login = _function_argument('login') || login
      const password = _function_argument('password') || password
      const hash = proxy_parse(proxy)
      if (proxy_type !== 'auto') {
      hash.IsHttp = proxy_type === 'http'
      }
      if (login.length > 0 && password.length > 0) {
      hash.name = login
      hash.password = password
      }
      return hash
      }
      /**
      * Почта Прокси
      * По умолчанию клиент imap работает без прокси, но он может быть задан с помощью этого действия.
      * Используйте ресурсы, если вы хотите взять прокси из файла, url или базы данных.
      * Вы можете изменить прокси один раз, и он будет применяться к каждому действию, которое работает с получением писем.
      * Пустой параметр сбросит прокси до значения по умолчанию(прямое соединение).
      * @param {string} proxy Прокси. Строка, с информацией о прокси. Она может содержать ip, порт и тип прокси в разных форматах. Эта строка может также содержать логин и пароль, если их нету, данные для аутентификации могут быть заданы с параметрами "Логин прокси" и "Прокси пароль".
      * Примеры:
      * 210.10.10.10:1085
      * username:password@210.10.10.10:1085
      * socks%://210.10.10.10:1085
      * socks:210.10.10.10:1085:username:password
      * http:username:password:210.10.10.10:1085
      * \{\{proxy\}\} - Получить из ресурса
      * Пустая строка - Без прокси
      * @param {string} proxy_type 'http' | 'https' | 'socks' | 'socks5' | 'auto'
      * Тип прокси. Поддерживаются прокси типа socks5 и http.
      * Примеры:
      * socks
      * socks5 - То же, что и socks
      * http
      * https - То же, что и http
      * @param {string} login Прокси Логин. Может быть пустым. Логин от прокси, переопределяет логин в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      * @param {string} password Прокси Пароль. Может быть пустым. Пароль от прокси, переопределяет пароль в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      */
      function BAS_imap_client_set_proxy(proxy, proxy_type, login, password) {
      const args = _arguments()
      const proxy = args.proxy || (proxy || '')
      const proxy_type = args.proxy_type || (proxy_type || 'http')
      const login = args.login || (login || '')
      const password = args.password || (password || '')
      const hash = proxy_set_hash(proxy, proxy_type, login, password)
      imap_client_set_proxy(hash.server, hash.Port, hash.IsHttp, hash.name, hash.password)
      }
      /**
      * Количество писем
      * Получить количество сообщений в почтовом ящике.
      * Для правильной работы необходимо сначала выполнить действие 'Настроить'.
      * @param {number} timeout Максимальное время выполнения задания
      * @returns Целочисленное значение с количеством писем
      */
      function BAS_imap_client_messages_length() {
      const timeout = _function_argument('timeout')
      general_timeout_next(timeout)
      imap_client_pull_messages_length()!
      _function_return(imap_client_messages_length())
      }
      /**
      *
      */
      function BAS_parse_message() {
      const timeout = _function_argument('timeout')
      const id = _function_argument('id')
      if (timeout) {
      general_timeout_next(timeout)
      }
      imap_client_pull_message(id)!
      VAR_MAIL_BODY = imap_client_message()
      const csv_parse_result = VAR_MAIL_BODY.match(LINK_REGEXP) || []
      VAR_LINK1 = csv_parse_result[0]
      if(typeof(VAR_LINK1) == 'undefined' || !VAR_LINK1) {
      VAR_LINK1 = ""
      }
      VAR_LINK2 = csv_parse_result[1]
      if(typeof(VAR_LINK2) == 'undefined' || !VAR_LINK2) {
      VAR_LINK2 = ""
      }
      VAR_LINK3 = csv_parse_result[2]
      if(typeof(VAR_LINK3) == 'undefined' || !VAR_LINK3) {
      VAR_LINK3 = ""
      }
      }
      /**
      * Найти Письмо (BAS-функция)
      * Искать первое письмо, соответствующее всем критериям, сохранить тест письма и заголовки в указанных переменных.
      * Если вы вызовете это действие без критериев, то будет найдено первое сообщение.
      * Это действие автоматически извлекает ссылки из письма и сохраняет их в переменных.
      * Если вы хотите получить несколько писем, используйте действие 'Найти все письма'.
      * Чтобы извлекать заголовки такие как 'SUBJECT' или 'FROM', примените регулярное выражение к переменной VAR_MAIL_BODY. Например, чтобы извлечь заголовок 'FROM', используйте регулярное выражение From\:\s+(.*)
      * Для правильной работы необходимо сначала выполнить действие 'Настроить'.
      * @param {number} timeout Максимальное время выполнения задания
      * @param {string} sender Отправитель Письма. Поиск по полю 'from' (отправитель письма). Поместите здесь часть почтового ящика отправителя. Оставьте пустым, чтобы не фильтровать по отправителю.
      * Примеры:
      * Пустая строка - Не фильтровать по отправителю.
      * @twitter.com - Поиск письма от твиттер
      * info@twitter.com - Поиск почты, отправленной с info@twitter.com
      * @param {string} subject Тема Письма. Поиск по теме письма. Это условие можно комбинировать с другими.
      * Примеры:
      * Пустая строка - Не фильтровать по теме письма
      * Часть темы письма - Поиск письма с темой, содержащей определенную строку
      * @param {string} body Текст Письма. Поиск электронной почты по тексту сообщения. Это условие можно комбинировать с другими.
      * Примеры:
      * Пустая строка - Не фильтровать по тексту письма
      * Часть текста письма - Поиск сообщения с текстом, содержащим определенную строку
      * @param {string} to Получатель. Поиск по полю 'to' (почтовый получатель). Поместите здесь часть адреса получателя письма. Оставьте пустым, чтобы не фильтровать по получателю. Этот параметр полезен, если вы собираете почту из нескольких почтовых ящиков.
      * Примеры:
      * Пустая строка - Не фильтровать по получателю.
      * test@yourdomain.com - Поиск сообщения, отправленного на почтовый ящик test@yourdomain.com
      * @param {Function} callback Функция
      * @returns Объект с параметрами:
      *
      * mail_body - Текст письма. Эта переменная будет содержать заголовки сообщения и текст письма после успешного выполнения действия. Вы можете извлекать заголовки или части текста с помощью регулярных выражений.
      * Примеры:
      * From: sender@gmail.com
      * To: receiver@gmail.com
      * Subject: Mail subject
      *
      * mail_id - Идентификатор найденного сообщения. Найденный идентификатор письма, может юыть использован для удаления сообщения действием 'Удалить сообщение'.
      * Примеры:
      * 7571 - Найдено сообщение с идентификатором 7571
      *
      * link1, link2, link3 - Переменные со ссылками. Ссылки будут автоматически извлечены из текста письма и помещены в переменные VAR_LINK1, VAR_LINK2 и VAR_LINK3. Вы можете назвать переменные по-другому или добавить новые, чтобы извлечь больше ссылок.
      */
      function BAS_imap_client_search(timeout, sender, subject, body, to, callback) {
      const args = _arguments()
      const timeout = args.timeout || timeout
      const sender = args.sender || (sender || '')
      const subject = args.subject || (subject || '')
      const body = args.body || (body || '')
      const to = args.to || (to || '')
      const callback = args.callback || callback
      if (timeout) {
      general_timeout_next(timeout)
      }
      if (!args.callback) {
      imap_client_search(sender, subject, body, to)!
      }
      else {
      imap_client_search(sender, subject, body, to, callback)!
      }
      VAR_MAIL_BODY = imap_client_search_result()
      if (VAR_MAIL_BODY.length > 0) {
      VAR_MAIL_BODY = VAR_MAIL_BODY[VAR_MAIL_BODY.length - 1]
      }
      else {
      VAR_MAIL_BODY = ""
      }
      VAR_MAIL_ID = VAR_MAIL_BODY
      _call_function(BAS_parse_message, {
      timeout: timeout,
      id: VAR_MAIL_BODY
      })!
      _function_return({
      mail_body: imap_client_message(),
      mail_id: VAR_MAIL_ID,
      link1: VAR_LINK1,
      link2: VAR_LINK2,
      link3: VAR_LINK3
      })
      }
      /**
      * Найти все письма (BAS-функция)
      * Найти все письма, соответствующие критериям, сохранить идентификаторы в переменную с типом список.
      * Если будет задано несколько критериев, это действие вернет только письма, соответствующие сразу всем критериям.
      * Если вы запустите это действие без критериев, будут извлечены все письма в почтовом ящике.
      * Если вы хотите получить только одно сообщение, используйте действие 'Найти письмо'.
      * Это действие возвращает переменную с типом список, используйте модуль 'Список' чтобы обработать эту переменную или действие 'Foreach' для создания цикла по списку screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=fetchmails.png.
      * Для правильной работы необходимо сначала выполнить действие 'Настроить'.
      * @param {number} timeout Максимальное время выполнения задания
      * @param {string} sender Отправитель Письма. Поиск по полю 'from' (отправитель письма). Поместите здесь часть почтового ящика отправителя. Оставьте пустым, чтобы не фильтровать по отправителю.
      * Примеры:
      * Пустая строка - Не фильтровать по отправителю.
      * @twitter.com - Поиск письма от твиттер
      * info@twitter.com - Поиск почты, отправленной с info@twitter.com
      * @param {string} subject Тема Письма. Поиск по теме письма. Это условие можно комбинировать с другими.
      * Примеры:
      * Пустая строка - Не фильтровать по теме письма
      * Часть темы письма - Поиск письма с темой, содержащей определенную строку
      * @param {string} body Текст Письма. Поиск электронной почты по тексту сообщения. Это условие можно комбинировать с другими.
      * Примеры:
      * Пустая строка - Не фильтровать по тексту письма
      * Часть текста письма - Поиск сообщения с текстом, содержащим определенную строку
      * @param {string} to Получатель. Поиск по полю 'to' (почтовый получатель). Поместите здесь часть адреса получателя письма. Оставьте пустым, чтобы не фильтровать по получателю. Этот параметр полезен, если вы собираете почту из нескольких почтовых ящиков.
      * Примеры:
      * Пустая строка - Не фильтровать по получателю.
      * test@yourdomain.com - Поиск сообщения, отправленного на почтовый ящик test@yourdomain.com
      * @param {Function} callback Функция
      * @returns Список с идентификаторами найденных писем. Эта переменная будет содержать список с идентификаторами писем. Идентификаторы не содержат ни текста сообщения, ни заголовков, но могут использоваться для их получения с помощью действия 'Получить сообщение'. Идентификаторы также могут использоваться для удаления писем действием 'Удалить сообщение'. Используйте действие 'Foreach', чтобы запустить цикл по списку идентификаторов.
      * Примеры:
      * [] - Сообщения не найдены.
      * ["1", "2", "3"] - Найдено 3 сообщения.
      */
      function BAS_imap_client_search_all(sender, subject, body, to, callback) {
      const args = _arguments()
      const sender = args.sender || (sender || '')
      const subject = args.subject || (subject || '')
      const body = args.body || (body || '')
      const to = args.to || (to || '')
      const callback = args.callback || callback
      if (args.timeout) {
      general_timeout_next(args.timeout)
      }
      if (!callback) {
      imap_client_search(sender, subject, body, to)!
      }
      else {
      imap_client_search(sender, subject, body, to, callback)!
      }
      const result = imap_client_search_result()
      _function_return(result)
      return result
      }
      /**
      * Получить сообщение (BAS-функция)
      * Получить письмо по идентификатору почты и извлечь ссылки.
      * Идентификатор почты, может быть получен из действия 'Найти письмо' или из действия 'Найти все письма'.
      * Это действие автоматически извлекает ссылки из письма и сохраняет их в переменных.
      * Чтобы извлекать заголовки такие как 'SUBJECT' или 'FROM', примените регулярное выражение к переменной VAR_MAIL_BODY. Например, чтобы извлечь заголовок 'FROM', используйте регулярное выражение From\:\s+(.*)
      * Для правильной работы необходимо сначала выполнить действие 'Настроить'.
      *
      * @param {number} timeout Максимальное время выполнения задания
      *
      * @param {string} id Идентификатор сообщения. Идентификатор почты, может быть получен из действия 'Найти письмо' или из действия 'Найти все письма'.
      * Примеры:
      * 7571 - Извлечь сообщение с идентификатором 7571
      *
      * @returns Объект с параметрами:
      * mail_body - Текст письма. Эта переменная будет содержать заголовки сообщения и текст письма после успешного выполнения действия. Вы можете извлекать заголовки или части текста с помощью регулярных выражений.
      * Примеры:
      * From: sender@gmail.com
      * To: receiver@gmail.com
      * Subject: Mail subject
      *
      *
      * link1, link2, link3 - Переменные со ссылками. Ссылки будут автоматически извлечены из текста письма и помещены в переменные VAR_LINK1, VAR_LINK2 и VAR_LINK3. Вы можете назвать переменные по-другому или добавить новые, чтобы извлечь больше ссылок.
      */
      function BAS_imap_client_get_message() {
      const timeout = _function_argument('timeout')
      const id = _function_argument('id')
      _call_function(BAS_parse_message, {
      timeout: timeout,
      id: id
      })!
      _function_return({
      mail_body: VAR_MAIL_BODY,
      link1: VAR_LINK1,
      link2: VAR_LINK2,
      link3: VAR_LINK3
      })
      }
      /**
      * Удалить сообщение (BAS-функция)
      * Удалить адрес электронной почты с заданным идентификатором.
      * Идентификатор почты, может быть получен из действия 'Найти письмо' или из действия 'Найти все письма'.
      * Для правильной работы необходимо сначала выполнить действие 'Настроить'.
      * @param {number} timeout Максимальное время выполнения задания
      * @param {string} id Идентификатор сообщения. Идентификатор почты, может быть получен из действия 'Найти письмо' или из действия 'Найти все письма'.
      * Примеры:
      * 7571 - Извлечь сообщение с идентификатором 7571
      */
      function BAS_imap_client_delete_message(timeout, id) {
      const timeout = _function_argument('timeout') || timeout
      const id = _function_argument('id') || id
      if (timeout) {
      general_timeout_next(timeout)
      }
      imap_custom_query("%base%folder","STORE " + id + " +Flags \\Deleted","")!
      imap_custom_query("%base%folder","EXPUNGE","")!
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022http-client\u0022\u007d", 581066535)!
      /*Dat:*/
      /**
      * HTTP-Клиент Прокси
      * По умолчанию клиент http работает без прокси, это действие устанавливает прокси.
      * Используйте ресурсы, если вы хотите взять прокси из файла, url или базы данных.
      * Вы можете изменить прокси один раз, и он будет применяться к каждому следующему действию, которое использует http клиент.
      * Пустой параметр сбросит прокси до значения по умолчанию(прямое соединение).
      * @param {string} proxy Прокси
      Строка, c информацией о прокси. Она может содержать ip, порт и тип прокси в разных форматах. Эта строка может также содержать логин и пароль, если их нету, данные для аутентификации могут быть заданы с параметрами "Логин прокси" и "Прокси пароль".
      Примеры :
      210.10.10.10:1085
      username:password@210.10.10.10:1085
      socks5://210.10.10.10:1085
      socks:210.10.10.10:1085:username:password
      http:username:password:210.10.10.10:1085
      \{\{proxy\}\} - Получить из ресурса
      Пустая строка - Без прокси
      * @param {string} proxy_type Тип Прокси
      Тип прокси
      Поддерживаются прокси типа socks5 и http.
      Примеры :
      socks
      socks5 - То же, что и socks
      http
      https - То же, что и http
      * @param {string} login
      Прокси Логин. Может быть пустым.
      Логин от прокси, переопределяет логин в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      * @param {string} password
      Пароль Прокси. Может быть пустым.
      Пароль от прокси, переопределяет пароль в строке прокси. Полезно, если у вас много прокси с одинаковыми логинами и паролями.
      */
      function BAS_http_client_set_proxy(proxy, proxy_type, login, password) {
      const args = _arguments()
      const proxy = args.proxy || (proxy || "")
      const proxy_type = args.proxy_type || (proxy_type || "http")
      const login = args.login || (login || "")
      const password = args.password || (password || "")
      const hash = proxy_set_hash(proxy, proxy_type, login, password)
      _switch_http_client_main()
      http_client_set_proxy(
      hash.server,
      hash.Port,
      hash.IsHttp,
      hash.name,
      hash.password
      )
      }
      /**
      * HTTP-Клиент Сброс
      * Это действие перезапустит http клиент и сбросит все его настройки.
      * Используйте действие 'HTTP-Клиент Загрузить cookies' с пустым значением, если вы хотите сбросить только файлы cookies.
      * Это действие влияет на состояние http клиента и все настройки, такие как: прокси, заголовки, текст последнего ответа от сервера, статус ответа, cookies и т. д.
      */
      function BAS_http_client_reset() {
      _switch_http_client_main()
      new_http_client()
      }
      /**
      * Get запрос (BAS-функция)
      * Сделать http-запрос, используя метод GET, HEAD, DELETE, TRACE или OPTIONS,то есть методы, которые не отправляют данные.
      * Специальные и нелатинские символы должны быть закодированы с помощью функции encodeURIComponent. Например, вместо использования https://www.google.com/search?q=коты URL должен быть https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B
      * Если включен режим 'Захват HTTP-запросов', то каждый запрос, который выполняет браузер, будет преобразован в действия с помощью http-клиента и добавлен во вкладку сценария ( screen ).
      * HTTP заголовки (например, User-Agent) могут быть указаны в параметре 'Заголовки' или с помощью действия 'HTTP-Клиент Установить Заголовок'. В первом случае заголовки будут изменены только для текущего действия, во втором случае заголовки будут изменены для всех следующих действий.
      * По умолчанию http клиент будет следовать переадресациям. Если вы хотите, вы можете отключить эту настройку и обработывать заголовок 'Location' самостоятельно. Чтобы получить заголовки, которые сервер отсылает в ответ, используйте действие 'Получить заголовок' после запроса.
      * Действие 'Get' не возвращает результат через изменение переменных, чтобы получить ответ, вам нужно вызвать действие 'Текущий Url', 'Содержание ответа', 'Статус ответа' или 'Получить заголовок' после выполнения запроса.
      * 'Текущий Url' получит последний url после всех перенаправлений.
      * 'Содержание ответа' вернет код html последнего запроса.
      * 'Статус ответа' возвращает HTTP статус, например, 200 - если запрос выполнен правильно, 500 - в случае ошибки сервера и т. д.
      * 'Получить заголовок' возвращает заголовки ответа, например 'Content-Type', 'Date', 'Set-Cookie'
      * HTTP клиент обрабатывает cookies автоматически, поэтому вам не нужно обрабатывать заголовок 'Set-Cookie' самостоятельно.
      * Самый быстрый способ извлечь данные из кода страницы - xpath. http клиент имеет множество действий для выполнения xpath запросов. Не рекомендуется использовать действие 'Содержание ответа' и регулярные выражения, если только это не абсолютно необходимо.
      * Если сервер возвращает данные в формате json, используйте функцию JSON.parse для парсинга.
      * Вы можете установить максимальное время загрузки страницы, щелкнув на значок песочных часов возле кнопки 'Отмена'.
      * @param {string} url
      Url
      Url запроса
      Примеры :
      https://google.com - Url с протоколом
      google.com - Url без протокола
      https://www.google.com/search?q=cats - Url со строкой запроса
      https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B - Url с запросом в формате urlencode. Для кодирования строки используется функция encodeURIComponent.
      * @param {string} headers Заголовки, например:
      * User-Agent: Mozilla/5.0 Gecko/20100101 Firefox/57.0
      * Referer: google.com
      * @param {string} method Метод
      Метод http запроса, вы можете поместить сюда любую строку.
      * @param {boolean} no_redirect Следовать переадресациям
      * @param {number} timeout Максимальное время выполнения задания
      */
      function BAS_http_client_get() {
      const args = _arguments()
      _switch_http_client_main()
      if (args.timeout) {
      general_timeout_next(args.timeout)
      }
      const obj = {
      method: args.method,
      headers: args.headers
      }
      if (no_redirect) {
      http_client_get_no_redirect2(args.url, obj)!
      } else {
      http_client_get2(args.url, obj)!
      }
      }
      /**
      * Post запрос (BAS-функция)
      * Сделать http-запрос, используя метод POST, PUT или PATCH, то есть любые методы, которые отправляют данные.
      * Данные запроса могут быть указаны в двух форматах: в неформатированном и созданных с конструктором. Рекомендуется использовать вариант именно с неформатированными данными.
      * При использовании данных запроса в неформатированном виде, вы можете копировать их прямо из http сниффера и помещать в поле никак не изменяя. Проверьте справку для этого поля, она содержит много примеров. Также вам нужно правильно выбрать параметр 'Content-Type', он указывает, какой тип содержимого находится в поле 'Post Data', это может быть json, поля формы на сайте и т. д.
      * В поле 'Post Data' могут быть использованы переменные и ресурсы. Если вам нужно отправить двоичные данные, поместите их в переменную с кодировкой base64 (например, прочитав файл в base64) и перед названием переменной поставьте префикс 'base64:'(например, base64:VAR_FILE_CONTENT). В справке к полю 'Post data' содержится больше примеров.
      * Если включен режим 'Захват HTTP-запросов', то каждый запрос, который выполняет браузер, будет преобразован в действия с помощью http-клиента и добавлен во вкладку сценария ( screen ). Это самый простой способ сгенерировать действия с использованием http клиента.
      * Специальные и нелатинские символы должны быть закодированы с помощью функции encodeURIComponent. Например, вместо использования https://www.google.com/search?q=коты URL должен быть https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B
      * HTTP заголовки (например, User-Agent) могут быть указаны в параметре 'Заголовки' или с помощью действия 'HTTP-Клиент Установить Заголовок'. В первом случае заголовки будут изменены только для текущего действия, во втором случае заголовки будут изменены для всех следующих действий.
      * По умолчанию http клиент будет следовать переадресациям. Если вы хотите, вы можете отключить эту настройку и обработывать заголовок 'Location' самостоятельно. Чтобы получить заголовки, которые сервер отсылает в ответ, используйте действие 'Получить заголовок' после запроса.
      * Действие 'Post запрос' не возвращает результат через изменение переменных, чтобы получить ответ, вам нужно вызвать действие 'Текущий Url', 'Содержание ответа', 'Статус ответа' или 'Получить заголовок' после выполнения запроса.
      * 'Текущий Url' получит последний url после всех перенаправлений.
      * 'Содержание ответа' вернет код html последнего запроса.
      * 'Статус ответа' возвращает HTTP статус, например, 200 - если запрос выполнен правильно, 500 - в случае ошибки сервера и т. д.
      * 'Получить заголовок' возвращает заголовки ответа, например 'Content-Type', 'Date', 'Set-Cookie'
      * HTTP клиент обрабатывает cookies автоматически, поэтому вам не нужно обрабатывать заголовок 'Set-Cookie' самостоятельно.
      * Самый быстрый способ извлечь данные из кода страницы - xpath. http клиент имеет множество действий для выполнения xpath запросов. Не рекомендуется использовать действие 'Содержание ответа' и регулярные выражения, если только это не абсолютно необходимо.
      * Если сервер возвращает данные в формате json, используйте функцию JSON.parse для парсинга.
      * Вы можете установить максимальное время загрузки страницы, щелкнув на значок песочных часов возле кнопки 'Отмена'.
      * @param {string} url
      Url
      Url запроса
      Примеры :
      https://google.com - Url с протоколом
      google.com - Url без протокола
      https://www.google.com/search?q=cats - Url со строкой запроса
      https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B - Url с запросом в формате urlencode. Для кодирования строки используется функция encodeURIComponent.
      * @param {string} headers Заголовки, например:
      * User-Agent: Mozilla/5.0 Gecko/20100101 Firefox/57.0
      * Referer: google.com
      * @param {string} data Post data
      * @param {string} content_type
      Content-Type
      Заголовок 'Content-Type'. Этот параметр указывает, какой тип содержимого находится в поле 'Post Data'.
      Примеры :
      application/x-www-form-urlencoded - Данные содержат пары ключ/значение, разделенные символом & (амперсанд). Например, key1=value1&key2=value2&key3=value3
      multipart/form-data - Данные содержат пары ключ/значение, значения могут иметь двоичный формат, могут использоваться для отправки файлов. Разделитель между парами ключ/значение будет получен из поля 'Post Data'.
      application/json - Отправлять данные в формате json. Например, {"key1": "value1", "key2": "value2", "key3": "value3"}
      * @param {string} encoding
      Кодировка
      Кодировка поля 'Post Data'. Этот параметр задает название кодировки, которая будет использоваться при отправке данных запроса. Он не изменяет заголовок Content-Type, если это требуется, вы должны сделать это самостоятельно.
      Примеры :
      UTF-8 - Это значение подходит для большинства сайтов.
      WINDOWS-1251 - Используется на некоторых российских сайтах.
      * @param {string} method
      Метод
      Метод http запроса, вы можете поместить сюда любую строку.
      * @param {boolean} no_redirect Следовать переадресациям
      * @param {number} timeout Максимальное время выполнения задания
      */
      function BAS_http_client_post() {
      const args = _arguments()
      _switch_http_client_main()
      if (args.timeout) {
      general_timeout_next(args.timeout)
      }
      const obj = {
      content_type: 'custom/' + args.content_type,
      encoding: args.encoding,
      method: args.method,
      headers: args.headers
      }
      if (!args.no_redirect) {
      http_client_post(args.url, ['data', args.data], obj)!
      } else {
      http_client_post_no_redirect(args.url, ['data', args.data], obj)!
      }
      }
      /**
      * Скачать (BAS-функция)
      * Загрузить выбранный url в файл.
      * Если вы не хотите сохранять данные на диске, вы должны использовать действие 'GET' или 'POST'.
      * Это действие использует cookies и заголовки, точно так же, как и действия 'GET' и 'POST'.
      * Специальные и нелатинские символы должны быть закодированы с помощью функции encodeURIComponent. Например, вместо использования https://www.google.com/search?q=коты URL должен быть https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B
      * HTTP заголовки(например, User-Agent) могут быть заданы с помощью действия 'HTTP-Клиент Установить Заголовок'.
      * Действие 'Скачать' не возвращает результат через изменение переменных, чтобы получить результат, вам нужно вызвать действие 'Текущий Url', 'Статус ответа' или 'Получить заголовок' после выполнения запроса. И, конечно, указанный файл будет содержать текст ответа.
      * 'Текущий Url' получит последний url после всех перенаправлений.
      * 'Статус ответа' возвращает HTTP статус, например, 200 - если запрос выполнен правильно, 500 - в случае ошибки сервера и т. д.
      * 'Получить заголовок' возвращает заголовки ответа, например 'Content-Type', 'Date', 'Set-Cookie'
      * Вы можете установить максимальное время загрузки страницы, щелкнув на значок песочных часов возле кнопки 'Отмена'.
      * @param {string} url
      Url
      Url запроса
      Примеры :
      https://google.com - Url с протоколом
      google.com - Url без протокола
      https://www.google.com/search?q=cats - Url со строкой запроса
      https://www.google.com/search?q=%D0%BA%D0%BE%D1%82%D1%8B - Url с запросом в формате urlencode. Для кодирования строки используется функция encodeURIComponent.
      * @param {string} filepath
      Путь к файлу
      Путь к файлу, который будет загружен. Если файл существует, он будет перезаписан. Использование ресурса с типом 'LinesFromFile' в этом поле почти всегда приведет к неправильному результату, потому что ресурс будет преобразован в строку из выбранного файла, а не в имя файла. Если вы хотите получить имя файла из ресурса, используйте действие 'Расположение Ресурса' чтобы получить путь к файлу в виде переменной, а уже эту переменную поместите сюда.
      Примеры :
      c:/downloads/pic.png
      c:\downloads\pic.png
      * @param {number} timeout Максимальное время выполнения задания
      */
      function BAS_http_client_download() {
      const args = _arguments()
      _switch_http_client_main()
      if (args.timeout) {
      general_timeout_next(args.timeout)
      }
      http_client_download(args.url, args.filepath)!
      }
      /**
      * Текущий Url
      * Получить текущий url для клиента http.
      * Url может отличаться от последнего url, используемого в действии 'GET' или 'POST', если были перенаправления.
      * @returns текущий url для http-клиента
      */
      function BAS_http_client_url() {
      _switch_http_client_main()
      return http_client_url()
      }
      /**
      * Содержание ответа
      * Получить код страницы для последнего запроса http клиента.
      * Код страницы, который возвращает это действие точно такой же, как и тот, который отображается в обычном браузере после нажатия CTRL-U.
      * Ответ не содержит заголовков, чтобы получить заголовки, необходимо использовать действие 'Получить заголовок'.
      * Вам нужно установить кодировку base64, если вы получаете двоичные данные. Многие действия принимают данные в формате base64.
      * Вы можете указать точное название кодировки, см. список поддерживаемых кодировок https://doc.qt.io/qt-5/qtextcodec.html#details.
      * Самый быстрый способ извлечь данные из кода страницы - xpath. http клиент имеет множество действий для выполнения xpath запросов. Не рекомендуется использовать действие 'Содержание ответа' и регулярные выражения, если только это не абсолютно необходимо.
      * @param {string} encoding Кодировка
      * @returns код страницы без заголовков
      */
      function BAS_http_client_encoded_content(encoding) {
      const encoding = _function_argument('encoding') || encoding
      _switch_http_client_main()
      const result = http_client_encoded_content(encoding)
      _function_return(result)
      return result
      }
      /**
      * Стаутс ответа
      * Получить статус последнего запроса http-клиента.
      * Вы можете сравнить статус действием 'If', например VAR_SAVED_STATUS == 200. Это выражение проверяет, был ли запрос успешным.
      * Список http-статусов https://www.webfx.com/web-development/glossary/http-status-codes/.
      * @returns http статус как целое число
      Примеры :
      200 - Запрос завершился успешно.
      302 - Целевая страница находится под другим адресом.
      404 - Страница не найдена
      */
      function BAS_http_client_status() {
      _switch_http_client_main()
      const result = http_client_status()
      _function_return(result)
      return result
      }
      /**
      * Получить заголовок
      * Получить заголовок из последнего запроса http клиента.
      * Если запрос был выполнен с переадресацией, будут получены только заголовки для последнего перенаправления. Если вы хотите получить заголовки для запроса в середине цепочки, вам необходимо отключить опцию 'Следовать переадресациям' для действий 'GET' или 'POST' и выполнить перенаправления самостоятельно. Чтобы получить url следующего перенаправления, используйте действие 'Получить заголовок' с параметром 'Location'.
      * Заголовки могут отображаться в инструментах разработчика браузера ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=showheaders.png).
      * @param {string} header Имя заголовка
      Имя заголовка ответа. Название заголовка должно содержать одно или несколько слов, разделенных дефисом. Реестр символов не важен.
      Примеры :
      Location - Получить заголовок 'Location'.
      Content-Type - Получить заголовок 'Content-Type'.
      cOnTeNt-tYpE - Также получает заголовок 'Content-Type'.
      * @returns значение заголовка
      */
      function BAS_http_client_header(header) {
      const header = _function_argument('header') || header
      _switch_http_client_main()
      const result = http_client_header(header)
      _function_return(result)
      return result
      }
      /**
      * HTTP-Клиент Установить Заголовок
      * Установить заголовок запроса для всех последующих запросов с помощью http client.
      * Вы можете установить любой допустимый заголовок, например 'User-Agent', 'Referer' и т. д. Однако, вот список заголовков, которые не следует задавать с помощью этого действия: 'Connection', 'Host', 'Content-Type'. 'Content-Type' должен быть установлен в действии 'POST' для каждого конкретного запроса. 'Accept-Encoding' может быть установлен, но запрещается помещать кодировку 'br' в список. Кодировка 'br' пока не поддерживается http клиентом.
      * Чтобы гарантировать, что заголовки отправлены правильно, используйте инструмент 'HTTP анализ трафика', это окно, которое автоматически всплывает после любого http запроса в режиме записи ( скрин https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=httpsniffer.png).
      * Используйте действие 'Очистить заголовки', если вы хотите отключить все заголовки, установленные этим действием.
      * @param {string} header_name Имя заголовка
      Название заголовка запроса. Оно должно содержать одно или несколько слов, разделенных дефисом.
      Примеры :
      User-Agent - Установить заголовок 'User-Agent'.
      Accept-Language - Установить заголовок 'Accept-Language'.
      Referer - Установить referer.
      * @param {string} header_value Значение заголовка
      Значение заголовка запроса. Это может быть произвольная строка.
      */
      function BAS_http_client_set_header(header_name, header_value) {
      const header_name = _function_argument('header_name') || header_name
      const header_value = _function_argument('header_value') || header_value
      _switch_http_client_main()
      http_client_set_header(header_name, header_value)
      }
      /**
      * Очистить заголовки
      * Очистите все заголовки запросов, которые были установлены с помощью действия 'HTTP-Клиент Установить Заголовок'.
      */
      function BAS_http_client_clear_header() {
      _switch_http_client_main()
      http_client_clear_header()
      }
      /**
      * HTTP-Клиент Сохранить cookies
      * Сохраните все cookies для http-клиента в переменную.
      * В переменной будет содержаться строка в формате json со списоком всех cookies для всех доменов.
      * Большинство сайтов использует cookies для хранения пользовательских данных, таких как авторизация пользователя. Это означает, что, сохраняя cookies после авторизации на каком-либо сайте и восстанавливая их позже, вы можете реализовать автовход на этом сайте.
      * Cookies - это всего лишь строка, поэтому вы можете сохранить ее в файл или базу данных и использовать позже.
      * Cookies из http-клиента могут быть отправлены в браузер даже без этого действия, используя 'Загрузить cookies из браузера'. Другое действие 'Загрузить cookies из http клиента' отправит cookies из http клиента в браузер.
      * Cookies браузера и cookies http клиента имеют одинаковый формат.
      * Строка cookies может быть преобразована в объект с помощью функции JSON.parse, например, VAR_JSON = JSON.parse (VAR_SAVED_COOKIES). Результат - это ассоциативный массив с одним ключом 'cookies', который содержит список, например {'cookies': [COOKIE1, COOKIE2, COOKIE3, ...]}. ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=cookiesformat2.png).
      * Если вы хотите изменить cookies или получить от туда какие-то значения, вам необходимо использовать javascript. Код Javascript может быть выполнен в любом поле, если вы задаете тип поля как 'expression' или с помощью действия 'Выполнить код'.
      * Каждый cookie представляет собой ассоциативный массив со следующими ключами: value, name, domain, path, expires, httpOnly, secure.
      * secure и httpOnly - булевые значения.
      * expires задает время жизни cookie, оно представлено как количество секунд, прошедших с полуночи (00:00:00 UTC) 1 января 1970 года.
      * Вот некоторые примеры кода для работы с cookies. Все они могут быть помещены в действие 'Выполнить код'. Прежде чем использовать их, вы должны получить объект cookies из строки, например так, VAR_COOKIES = JSON.parse(VAR_SAVED_COOKIES)["cookies"]
      * Найти значение cookie по названию: VAR_COOKIE = VAR_COOKIES.filter(function(el){return el["name"] == "ЗАМЕНИТЬ НА НАЗВАНИЕ COOKIE"})[0]
      * Проверить, существует ли cookie: VAR_COOKIE_EXISTS = VAR_COOKIES.filter(function(el){return el["name"] == "ЗАМЕНИТЬ НА НАЗВАНИЕ COOKIE"}).length > 0
      * Получить значение cookie VAR_COOKIE_VALUE = VAR_COOKIE["value"]
      * Вы также можете изменить значение cookie VAR_COOKIE["value"] = "My value". Но изменение этого объекта не повлечет за собой изменение cookies внутри http-клиента, для этого вам нужно преобразовать cookies в строку(с помощью JSON.stringify(VAR_COOKIES)) и использовать его с действием 'HTTP-Клиент Загрузить cookies'.
      * Переменная VAR_COOKIES будет содержать список cookies, и так как это список, то его также можно обработать с помощью действий из модуля 'Список'.
      * @returns строка в формате json со списоком всех cookies для всех доменов. Формат Json описан ниже.
      */
      function BAS_http_client_save_cookies() {
      _switch_http_client_main()
      const result = http_client_save_cookies()
      _function_return(result)
      return result
      }
      /**
      * HTTP-Клиент Загрузить cookies
      * Установить cookies для http клиента.
      * Параметр 'Cookies' должен содержать строку в формате json со списком cookies. Эта строка может быть получена как результат действия 'HTTP-Клиент Сохранить cookies' и также может быть изменена после этого если есть такая надобность.
      * Большинство сайтов использует cookies для хранения пользовательских данных, таких как авторизация пользователя. Это означает, что, сохраняя cookies после авторизации на каком-либо сайте и восстанавливая их позже, вы можете реализовать автовход на этом сайте.
      * Cookies - это всего лишь строка, поэтому вы можете сохранить ее в файл или базу данных и использовать позже.
      * Cookies из http клиента могут быть отправлены в браузер, используя действие 'Загрузить cookies из http клиента', а действие 'Загрузить cookies из браузера' наоборот отправит cookies из браузера в http клиент.
      * Cookies браузера и cookies http клиента имеют одинаковый формат.
      * Cookies должны быть ассоциативным массивом с одним ключом 'cookies', который содержит список, например {'cookies': [COOKIE1, COOKIE2, COOKIE3, ...]}. ( скрин https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=cookiesformat2.png).
      * Если вы хотите изменить cookies или получить от туда какие-то значения, вам необходимо использовать javascript. Код Javascript может быть выполнен в любом поле, если вы задаете тип поля как 'expression' или с помощью действия 'Выполнить код'.
      * Каждый cookie представляет собой ассоциативный массив со следующими ключами: value, name, domain, path, expires, httpOnly, secure.
      * secure и httpOnly - булевые значения.
      * expires задает время жизни cookie, оно представлено как количество секунд, прошедших с полуночи (00:00:00 UTC) 1 января 1970 года.
      * Вот некоторые примеры кода для работы с cookies. Все они могут быть помещены в действие 'Выполнить код'. Прежде чем использовать их, вы должны получить объект cookies из строки, например так, VAR_COOKIES = JSON.parse(VAR_SAVED_COOKIES)["cookies"]
      * Найти значение cookie по названию: VAR_COOKIE = VAR_COOKIES.filter(function(el){return el["name"] == "ЗАМЕНИТЬ НА НАЗВАНИЕ COOKIE"})[0]
      * Проверить, существует ли cookie: VAR_COOKIE_EXISTS = VAR_COOKIES.filter(function(el){return el["name"] == "ЗАМЕНИТЬ НА НАЗВАНИЕ COOKIE"}).length > 0
      * Получить значение cookie VAR_COOKIE_VALUE = VAR_COOKIE["value"]
      * Вы также можете изменить значение cookie VAR_COOKIE["value"] = "My value".
      * После того, как вы закончите редактирования списка VAR_COOKIES, вам нужно преобразовать его в строку с помощью кода JSON.stringify(VAR_COOKIES) ( скрин https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=cookiesrestore2.png).
      * Переменная VAR_COOKIES будет содержать список cookies, и так как это список, то его также можно обработать с помощью действий из модуля 'Список'.
      * @param {string} cookies Cookies
      Это поле должно содержать строку в формате json со списком всех cookies для всех доменов. Формат json описан ниже. Используйте пустую строку для очистки cookies.
      Примеры :
      Пустая строка - Удалить cookies
      */
      function BAS_http_client_restore_cookies(cookies) {
      _switch_http_client_main()
      http_client_restore_cookies(cookies)
      }
      /**
      * Загрузить cookies из браузера (BAS-функция)
      * Загрузить cookies из браузера в http клиент.
      * Большинство сайтов использует cookies для хранения пользовательских данных, таких как авторизация пользователя. Это означает, что, сохраняя cookies после авторизации на каком-либо сайте и восстанавливая их позже, вы можете реализовать автовход на этом сайте.
      * Если процедура авторизации на сайте сложная, то она может быть выполнена с помощью браузера, а все остальное с помощью http клиента. Для этого после авторизации через браузер, cookies c помощью этого действия могут быть переданы в http клиент.
      */
      function BAS_http_client_restore_cookies_from_browser() {
      save_cookies()!
      _switch_http_client_main()
      http_client_restore_cookies(JSON.stringify({cookies:JSON.parse(_result())}))
      }
      /**
      * Завершать работу после ошибки
      * Это действие устарело, рекомендуется вместо него использовать 'Игнорировать ошибки'.
      * @param {string} fail_on_error 'fail' | 'continue'
      * Завершать работу после ошибки
      */
      function BAS_http_client_set_fail_on_error(fail_on_error) {
      _switch_http_client_main()
      http_client_set_fail_on_error(fail_on_error === 'fail')
      }
      /**
      * Была ли ошибка
      * Это действие устарело, рекомендуется вместо него использовать 'Игнорировать ошибки'.
      * @returns boolean
      */
      function BAS_http_client_was_error() {
      _switch_http_client_main()
      const result = http_client_was_error()
      _function_return(result)
      return result
      }
      /**
      * Получить текст ошибки
      * Это действие устарело, рекомендуется вместо него использовать 'Игнорировать ошибки'.
      * @returns string
      */
      function BAS_http_client_error_string() {
      _switch_http_client_main()
      const result = http_client_error_string()
      _function_return(result)
      return result
      }
      /**
      * Xpath получить xml
      * Выполнить xpath запрос и найти xml первого элемента, который соответствует запросу.
      * Это действие, в отличие от 'Xpath получить текст', ищет xml элемента(html-код).
      * Если элемент не будет найден, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу после ошибки, используйте действие 'Игнорировать ошибки' или уберите флажок 'Завершать работу после ошибки'.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} do_not_fail Не завершать работу после ошибки
      * @returns xml первого элемента, который соответствует xpath запросу
      */
      function BAS_http_client_xpath_xml(query, do_not_fail) {
      const query = _function_argument('query') || query
      const do_not_fail = _function_argument('do_not_fail') || do_not_fail
      _switch_http_client_main()
      const result = http_client_xpath_xml(query, do_not_fail)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить каждый xml
      * Выполнить xpath запрос и найти xml каждого элемента, соответствующего запросу.
      * Это действие, в отличие от 'Xpath получить каждый текст', ищет именно xml элементов (html-код).
      * Результатом этого действия является список, вы можете обработать его с помощью модуля 'Список'.
      * Если ни один элемент не будет найден, то список будет пустым.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} do_not_fail Не завершать работу после ошибки
      * @returns Список, который состоит из xml каждого найденного элемента
      */
      function BAS_http_client_xpath_xml_list(query, do_not_fail) {
      const query = _function_argument('query') || query
      const do_not_fail = _function_argument('do_not_fail') || do_not_fail
      _switch_http_client_main()
      const result = http_client_xpath_xml_list(query, do_not_fail)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить текст
      * Выполнить xpath запрос и найти текст первого элемента, который соответствует запросу.
      * Результатом этого действия является текст. Например, если элемент имеет xml <div>word</div>, то его текст - 'word'.
      * Если вы хотите получить xml элемента, используйте действие 'Xpath получить xml'.
      * Если элемент не будет найден, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу после ошибки, используйте действие 'Игнорировать ошибки' или уберите флажок 'Завершать работу после ошибки'.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} do_not_fail Не завершать работу после ошибки
      * @returns Текст первого элемента, который соответствует xpath запросу
      */
      function BAS_http_client_xpath_text(query, do_not_fail) {
      const query = _function_argument('query') || query
      const do_not_fail = _function_argument('do_not_fail') || do_not_fail
      _switch_http_client_main()
      const result = http_client_xpath_text(query, do_not_fail)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить каждый текст
      * Выполнить xpath запрос и найти текст всех элементов, соответствующих запросу.
      * Результатом этого действия является список, каждый элемент которого текст. Например, если элемент имеет xml <div>word</div>, то его текст - 'word'.
      * Результатом этого действия является список, поэтому вы можете обработать его с помощью модуля 'Список'.
      * Если ни один элемент не будет найден, то список будет пустым.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} do_not_fail Не завершать работу после ошибки
      * @returns Список, который состоит из текста каждого найденного элемента
      */
      function BAS_http_client_xpath_text_list(query, do_not_fail) {
      const query = _function_argument('query') || query
      const do_not_fail = _function_argument('do_not_fail') || do_not_fail
      _switch_http_client_main()
      const result = http_client_xpath_text_list(query, do_not_fail)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить количество элементов
      * Выполнить xpath запрос и получить число элементов, которое ему соответствует.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} do_not_fail Не завершать работу после ошибки
      * @returns количество элементов, соответствующих xpath запросу.
      Примеры :
      0 - Нет элементов, которые соответствуют запросу.
      3 - Есть три элемента, которые соответствуют запросу.
      */
      function BAS_http_client_xpath_count(query, do_not_fail) {
      const query = _function_argument('query') || query
      const do_not_fail = _function_argument('do_not_fail') || do_not_fail
      _switch_http_client_main()
      const result = http_client_xpath_count(query, do_not_fail)
      _function_return(result)
      return result
      }
      /**
      * Xpath проверить существование
      * Проверить, существует ли хотя бы один элемент, соответствующий xpath запросу.
      * Html для применения запроса берется из последнего запроса http клиента.
      * Если вы хотите применить xpath запрос к произвольной строке, а не к результату запроса http клиента, то вам нужно использовать модуль 'Xpath'.
      * @param {string} query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @returns true или false в зависимости от наличия элемента, который соответствует запросу.
      Примеры :
      true - Существует по крайней мере один элемент, который соответствует запросу.
      false - Нет элементов, которые соответствуют запросу.
      */
      function BAS_http_client_xpath_exists(query) {
      const query = _function_argument('query') || query
      _switch_http_client_main()
      const result = http_client_xpath_exist(query)
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022date_and_time\u0022\u007d", 116408138)!
      /*Dat:*/
      /**
      * Строку В Дату
      * Преобразовать строку в дату и время используя заданный формат
      * @param value Строка с датой и временем
      * @param format 'auto' | 'yyyy-MM-dd' | 'hh:mm:ss' | 'yyyy-MM-ddThh:mm:ss'
      * Формат даты и времени
      */
      function BAS_parse_date() {
      const value = _function_argument('value')
      const format = _function_argument('format')
      const result = _parse_date(value, format)
      _function_return(result)
      return result
      }
      /**
      * Дату В Строку
      * Преобразовать дату и время в строку используя заданный формат.
      * @param value Дата и время либо строка
      * @param format 'yyyy-MM-dd' | 'hh:mm:ss' | 'yyyy-MM-ddThh:mm:ss'
      * Формат даты и времени
      */
      function BAS_format_date() {
      const value = _function_argument('value')
      const format = _function_argument('format')
      const result = _format_date(value, format)
      _function_return(result)
      return result
      }
      /**
      * Миллисекунды В Дату
      * Преобразовать количество миллисекунд с начала эпохи в дату.
      * Количество миллисекунд при таком преобразовании отсчитывается с 1 января 1970 года, 00:00:00 UTC.
      * @param {Date | string} value Дата и время либо строка
      * @returns Date
      */
      function BAS_parse_milliseconds(value) {
      const value = _function_argument('value') || value
      const result = _parse_date(value, "auto")
      _function_return(result)
      return result
      }
      /**
      * Дату в Миллисекунды
      * Преобразовать дату в количество миллисекунд с начала эпохи.
      * Количество миллисекунд при таком преобразовании отсчитывается с 1 января 1970 года, 00:00:00 UTC.
      * @param {Date | string} value Дата и время либо строка
      * @returns number
      */
      function BAS_milliseconds_from_date(value) {
      const value = _function_argument('value') || value
      const result = _parse_date(value, "auto").getTime()
      _function_return(result)
      return result
      }
      /**
      * Создать Дату
      * Создать новый объект даты и времени, используя указанные параметры.
      * @param {number} year Год
      * @param {number} month Месяц. От 1 до 12
      * @param {number} day День. От 1 до 31
      * @param {number} hour Час. От 0 до 23
      * @param {number} minutes Минуты. От 0 до 59
      * @param {number} seconds Секунды. От 0 до 59
      * @param {number} milliseconds Миллисекунды. От 0 до 999
      * @param {number} timezone Часовой пояс как смещение от UTC в минутах
      * @returns Date
      */
      function BAS_create_date(
      year,
      month,
      day,
      hour,
      minutes,
      seconds,
      milliseconds,
      timezone
      ) {
      const year = _function_argument('year') || year
      const month = _function_argument('month') || month
      const day = _function_argument('day') || day
      const hour = _function_argument('hour') || hour
      const minutes = _function_argument('minutes') || minutes
      const seconds = _function_argument('seconds') || seconds
      const milliseconds = _function_argument('milliseconds') || milliseconds
      const timezone = _function_argument('timezone') || timezone
      const date = new Date(
      Date.UTC(year, month - 1, day, hour, minutes, seconds, milliseconds)
      )
      date.getTimezoneOffset = function () {
      return parseInt(timezone)
      }
      _function_return(date)
      return date
      }
      /**
      * Изменить Дату
      * Изменить существующий объект даты и времени, используя указанные параметры.
      * Это действие может изменять год, месяц или другие части даты. Оставьте параметры равными -1 если вы не хотите их менять.
      * @param {string | Date} value Строка с датой и временем
      * @param {number} year Год
      * @param {number} month Месяц. От 1 до 12
      * @param {number} day День. От 1 до 31
      * @param {number} hour Час. От 0 до 23
      * @param {number} minutes Минуты. От 0 до 59
      * @param {number} seconds Секунды. От 0 до 59
      * @param {number} milliseconds Миллисекунды. От 0 до 999
      * @returns Date
      */
      function BAS_change_date(
      value,
      year,
      month,
      day,
      hour,
      minutes,
      seconds,
      milliseconds
      ) {
      const value = _function_argument('value') || value
      const year = _function_argument('year') || year
      const month = _function_argument('month') || month
      const day = _function_argument('day') || day
      const hour = _function_argument('hour') || hour
      const minutes = _function_argument('minutes') || minutes
      const seconds = _function_argument('seconds') || seconds
      const milliseconds = _function_argument('milliseconds') || milliseconds
      const date = _parse_date(value, "auto")
      const offset = date.getTimezoneOffset()
      const newDate = new Date(date.getTime())
      newDate.getTimezoneOffset = function () {
      return offset
      }
      if (year !== -1) newDate.setFullYear(year)
      if (month !== -1) newDate.setMonth(month - 1)
      if (day !== -1) newDate.setDate(day)
      if (hour !== -1) newDate.setHours(hour)
      if (minutes !== -1) newDate.setMinutes(minutes)
      if (seconds !== -1) newDate.setSeconds(seconds)
      if (milliseconds !== -1) newDate.setMilliseconds(milliseconds)
      _function_return(newDate)
      return newDate
      }
      /**
      * Добавить Секунды к Дате
      * Добавить указанное количество секунд к существующей дате.
      * @param {string} value Дата и время либо строка
      * @param {int} seconds Прибавить секунд. Может быть отрицательным.
      * @param {int} minutes Прибавить минут. Может быть отрицательным
      * @param {int} hours Прибавить часов. Может быть отрицательным.
      * @param {int} days Прибавить дней. Может быть отрицательным
      * @returns Date
      */
      function BAS_add_time(value, seconds, minutes, hours, days) {
      const value = _function_argument('value') || value
      const seconds = _function_argument('seconds') || seconds
      const minutes = _function_argument('minutes') || minutes
      const hours = _function_argument('hours') || hours
      const days = _function_argument('days') || days
      const date = _parse_date(value, "auto")
      const offset = date.getTimezoneOffset()
      const newDate = new Date(
      date.getTime() +
      seconds * 1000 +
      minutes * 1000 * 60 +
      hours * 1000 * 60 * 60 +
      days * 1000 * 60 * 60 * 24
      )
      newDate.getTimezoneOffset = function () {
      return offset
      }
      _function_return(newDate)
      return newDate
      }
      /**
      * Разница Между Датами
      * Получить разницу в секундах между указанными датами.
      * @param {string | Date} value1 Уменьшаемая дата и время либо строка
      * @param {string | Date} value2 Вычитаемая дата и время либо строка
      * @returns number
      */
      function BAS_difference_between_dates(value1, value2) {
      const value1 = _function_argument('value1') || value1
      const value2 = _function_argument('value2') || value2
      const result = Math.floor(
      (_parse_date(value1, "auto").getTime() -
      _parse_date(value2, "auto").getTime()) /
      1000
      )
      _function_return(result)
      return result
      }
      /**
      * Дата Сейчас
      * Получить текущую дату и время
      * @returns Date
      */
      function BAS_current_date() {
      const date = _parse_date(Date.now(), "auto")
      date.getTimezoneOffset = function () {
      return parseInt(netive("datetime", "systemtimezone", ""))
      }
      _function_return(date)
      return date
      }
      /**
      * Изменить Часовой Пояс Даты
      * Изменить часовой пояс существующей даты.
      * @param {Date | string} value Строка с датой и временм
      * @param {int} timezone Часовой пояс как смещение от UTC в минутах
      * @returns Date
      */
      function BAS_date_change_timezone(value, timezone) {
      const value = _function_argument('value') || value
      const timezone = _function_argument('timezone') || timezone
      const date = _parse_date(value, "auto")
      const newDate = new Date(date.getTime())
      newDate.getTimezoneOffset = function () {
      return parseInt(timezone)
      }
      _function_return(newDate)
      return newDate
      }
      /**
      * Получить Часовой Пояс Даты
      * Получить часовой пояс существующей даты.
      * @param {Date | string} value Строка с датой и временем
      * @returns Date
      */
      function BAS_date_get_timezone(value) {
      const value = _function_argument('value') || value
      const result = _parse_date(value, "auto").getTimezoneOffset()
      _function_return(result)
      return result
      }
      /**
      * День Месяца
      * Получить день месяца из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns День месяца. От 1 до 31.
      */
      function BAS_get_day_of_month(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, "d"))
      _function_return(result)
      return result
      }
      /**
      * День Недели
      * Получить день недели из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns День недели. От 1 до 7.
      */
      function BAS_get_day_of_week(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, "N"))
      _function_return(result)
      return result
      }
      /**
      * День гОда
      * Получить день года из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns День года. От 1 до 366.
      */
      function BAS_get_day_of_year(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, "Z"))
      _function_return(result)
      return result
      }
      /**
      * Получить Год Из Даты
      * Получить год из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Год
      */
      function BAS_get_year_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 'yyyy'))
      _function_return(result)
      return result
      }
      /**
      * Получить Месяц Из Даты
      * Получить месяц из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Месяц
      */
      function BAS_get_month_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 'M'))
      _function_return(result)
      return result
      }
      /**
      * Получить Часы Из Даты
      * Получить число часов из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Часы
      */
      function BAS_get_hours_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 'h'))
      _function_return(result)
      return result
      }
      /**
      * Получить Минуты Из Даты
      * Получить число минут из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Минуты
      */
      function BAS_get_minutes_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 'm'))
      _function_return(result)
      return result
      }
      /**
      * Получить Секунды Из Даты
      * Получить число секунд из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Секунды
      */
      function BAS_get_seconds_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 's'))
      _function_return(result)
      return result
      }
      /**
      * Получить Миллисекунды Из Даты
      * Получить число миллисекунд из указанной даты.
      * @param {Date | string} value Дата и время либо строка
      * @returns Миллисекунды
      */
      function BAS_get_milliseconds_from_date(value) {
      const value = _function_argument('value') || value
      const result = parseInt(_format_date(value, 'z'))
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022filesystem\u0022\u007d", 253250879)!
      /*Dat:*/
      /**
      * Читать Файл
      * Прочитать содержимое файла в переменную.
      * @param {string} filepath Путь к файлу
      * @param {int} from Первый байт
      * @param {int} to Последний байт. Используйте 0, чтобы прочитать весь файл.
      * @param {boolean} isBase64 Сохранить в формате base64
      * @returns number
      */
      function BAS_read_file(filepath, from, to, isBase64) {
      const filepath = _function_argument('filepath') || filepath
      const from = _function_argument('from') || from
      const to = _function_argument('to') || to
      const isBase64 = _function_argument('isBase64') || isBase64
      const result = native('filesystem', 'readfile', JSON.stringify({
      value: filepath,
      base64: isBase64,
      from: from,
      to: to
      }))
      _function_return(result)
      return result
      }
      /**
      * Запись В Файл
      * Записать текст или бинарные данные в файл.
      * Лучше использовать действие Результат для вывода результатов
      * @param {string} filepath Путь к файлу
      * @param {string} data Данные
      * @param {boolean} isLn Добавить символ окончания строки
      * @param {boolean} isAppend Дописывать файл
      * @param {boolean} isBase64 Данные представлены в формате base64
      */
      function BAS_write_file(filepath, data, isLn, isAppend, isBase64) {
      const filepath = _function_argument('filepath') || filepath
      const data = _function_argument('data') || data
      const isLn = _function_argument('isLn') || isLn
      const isAppend = _function_argument('isAppend') || isAppend
      const isBase64 = _function_argument('isBase64') || isBase64
      native('filesystem', 'writefile', JSON.stringify({
      path: filepath,
      value: data.toString() + '\r' + (isLn ? '\n' : ''),
      base64: isBase64,
      append: isAppend
      }))
      }
      /**
      * Информация О Файле/Папке
      * Получить подробную информацию о файле или папке: размер, базовая папка, проверить существование и т. д.
      * @param {string} filename Имя Файла
      * @returns Object {
      *  exists: boolean - Существование Файла
      *  size: number - Размер Файла
      *  baseDirectory: string - Папка Файла
      *  isDirectory: boolean - Является Ли Папкой
      *  lastModified: string - Последнее Изменение
      * }
      */
      function BAS_file_info(filename) {
      const filename = _function_argument('filename') || filename
      const json = JSON.parse(native('filesystem', 'fileinfo', filename))
      const result = {
      exists: json.exists,
      size: json.size,
      baseDirectory: json.directory,
      isDirectory: json.is_directory,
      lastModified: new Date(json.last_modified * 1000)
      }
      _function_return(result)
      return result
      }
      /**
      * Создать Папку
      * Создать новую папку по указанному пути
      * @param {string} dirname Имя Папки
      */
      function BAS_create_dir(dirname) {
      const dirname = _function_argument('dirname') || dirname
      native('filesystem', 'createdir', firname)
      }
      /**
      * Удалить Файл/Папку
      * Удалить файл или папку.
      * @param {string} path Имя Файла Или Папки
      */
      function BAS_remove_file(path) {
      const path = _function_argument('path') || path
      native('filesystem', 'removefile', path)
      }
      /**
      * Переместить Файл/Папку
      * Переместить файл или папку в новое место.
      * @param {string} path Имя Файла Или Папки
      * @param {string} dest Новое Расположение Файла Или Папки
      */
      function BAS_move_file(path, dest) {
      const path = _function_argument('path') || path
      const dest = _function_argument('dest') || dest
      native('filesystem', 'movefile', {
      path: path,
      dest: dest
      })
      }
      /**
      * Копировать Файл/Папку
      * Скопировать файл или папку в новое место.
      * @param {string} path Имя Файла Или Папки
      * @param {string} dest Место Назначения Копирования
      */
      function BAS_copy_file(path, dest) {
      const path = _function_argument('path') || path
      const dest = _function_argument('dest') || dest
      native('filesystem', 'copyfile', {
      path: path,
      dest: dest
      })
      }
      /**
      * Поиск Файлов
      * Найти в указанной папке все файлы, удовлетворяющие определенным условиям.
      * @param {string} folder Папка Для Поиска
      * @param {string} mask Маска Имени Файла
      * @param {string} contains Файл Должен Содержать
      * @param {boolean} include_folders Искать Папки
      * @param {boolean} include_files Искать Файлы
      * @param {boolean} recursive Поиск В Подпапках
      * @returns string
      */
      function BAS_search_files(folder, mask, contains, include_folders, include_files, recursive) {
      const folder = _function_argument('folder') || folder
      const mask = _function_argument('mask') || mask
      const contains = _function_argument('contains') || contains
      const include_folders = _function_argument('include_folders') || include_folders
      const include_files = _function_argument('include_files') || include_files
      const recursive = _function_argument('recursive') || recursive
      const args = _arguments()
      native_async('filesystem', 'search', JSON.stringify({
      folder: args.folder,
      mask: args.mask,
      contains: args.contains,
      include_folders: args.include_folders,
      include_files: args.include_files,
      recursive: args.recursive
      }))!
      const result = JSON.parse(_result()).d
      _function_return(result)
      return result
      }
      /**
      * Читать Файл В Список
      * Прочитать содержимое указанного файла в список. Каждый элемент списка будет содержать одну строку исходного файла.
      * @param {string} filepath Путь к файлу
      * @returns Array
      */
      function BAS_read_file_to_array(filepath) {
      const filepath = _function_argument('filepath') || filepath
      const d = BAS_read_file(filepath, 0, 0, false)
      const result = d.length === 0 ? [] : d.split(/\r?\n/)
      _function_return(result)
      return result
      }
      /**
      * Записать Список В Файл
      * Записать содержимое указанного списка в файл. Каждый элемент списка будет записан в виде строки в файле.
      * @param {string} filepath Путь к файлу
      * @param {Array} arr Список Для Записи В Файл
      * @param {boolean} isLn Добавить символ окончания строки
      * @param {boolean} isAppend Дописывать файл
      */
      function BAS_write_file_array(filepath, arr, isLn, isBase64, isAppend) {
      const filepath = _function_argument('filepath') || filepath
      const arr = _function_argument('arr') || arr
      const isLn = _function_argument('isLn') || isLn
      const isBase64 = _function_argument('isBase64') || isBase64
      const isAppend = _function_argument('isAppend') || isAppend
      native('filesystem', 'writefile', JSON.stringify({
      path: filepath,
      value: arr.join('\r\n') + (isLn ? '\r\n' : ''),
      base64: false,
      append: isAppend
      }))
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022fingersprint\u0022\u007d", 744529534)!
      /*Dat:*/
      /**
      * Получить отпечаток (BAS-функция)
      *
      * Получить отпечаток браузера, который содержит: юзер агент, размер экрана, свойства navigator, шрифты и многое другое.
      * По завершении выполнения этого действия переменная VAR_FINGERPRINT будет содержать все данные, необходимые для изменения отпечатка. Они могут быть использованы как сразу, вместе с действием 'Применить отпечаток', так и в любое другое время, даже после перезапуска BAS. Для этого сохраните их в текстовый файл или базу данных и загрузите перед использованием.
      * Это действие - более продвинутая версия смены юзер агента. Оно меняет не только юзер агент, но и множество внутренних методов и переменных браузера, так, что он выглядел абсолютно идентично хрому, файерфоксу, сафари, настольному или мобильному браузеру.
      * Некоторые дополнительные действия могут быть использованы, чтобы сделать ваш браузер более защищенным. Задайте прокси сервер через действие 'Прокси'. Измените часовой пояс с помощью действия 'Установить часовой пояс и координаты по ип'. Используйте, сохраняйте и повторно используйте профили, потому что запуск браузера на только что созданных профилях может быть подозрительным.
      * Отпечатки загружаются из сервиса FingerprintSwitcher https://fingerprints.bablosoft.com/, чтобы его использовать вам необходимо купить ключ https://fingerprints.bablosoft.com/.
      * Тем не менее, вы можете бесплатно получать отпечатки с тегами Microsoft Windows,Chrome и с ограничениями на количество запросов. Чтобы использовать бесплатную версию, оставьте поле 'Ключ сервиса' пустым.
      * Сервис FingerprintSwitcher извлекает данные из реальных браузеров на реальных устройствах, поэтому вы можете быть уверены, что отпечатки всегда актуальные, они содержат новые юзер агенты, версии плагинов и т. д.
      * Применение отпечатка не требует перезапуск браузера, поэтому настройки не сбрасываются.
      * По умолчанию FingerprintSwitcher добавляет шум в данные canvas. Если вы хотите получить более точные результаты, используйте технологию PerfectCanvas. Она позволяет получать данные canvas из реального устройства, а затем заменяет результаты получения отпечатков canvas в вашем браузере. Для использования этой технологии, необходима подготовка. Необходимо заполнить поле "Запрос PerfectCanvas". Данные для этого поля могут быть получены с помощью приложения CanvasInspector. Это бесплатное и простое в использовании и установке приложение, которое позволяет получить запрос PerfectCanvas для сайта, с которым вы работаете. Более подробную информацию и ссылку для скачивания можно найти здесь https://wiki.bablosoft.com/doku.php?id=ru:perfectcanvas#%D0%BA%D0%B0%D0%BA_%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C_%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81_perfectcanvas
      * Чтобы заменить отпечаток с использованием PerfectCanvas, достаточно вызвать это действие с заполненым параметром "Запрос PerfectCanvas", а затем использовать этот отпечаток вызвав действие "Применить отпечаток".
      * "Запрос PerfectCanvas" должен быть получен один раз для сайта, а не для каждого отпечатка.
      * Если вы оставите поле "Запрос PerfectCanvas" пустым, это действие вернет стандартный отпечаток с подменой canvas с помощью добавления шума.
      * Получение отпечатка с помощью PerfectCanvas может занять некоторое время в зависимости от длины очереди запросов и используемой комбинации тегов. Если вы используете комбинацию тегов, которые встречаются редко, это может привести к медленной работе этого действия. Используйте * в качестве значения для поля "Теги", чтобы ускорить процесс. Получение отпечатка для популярного сервиса также может быть медленным.
      * Получение отпечатка с помощью PerfectCanvas может выполняться только в одном потоке, вы можете использовать несколько потоков, но остальные потоки будут ожидать, а работать будет только один.
      * Если поле "Запрос PerfectCanvas", было подготовленно для "сайта A", и вы посещаете "сайт Б", то данные canvas для "сайта Б" будут заменены с помощью добавления шума. Если вы хотите, чтобы данные canvas заменялись для обоих сайтов, необходимо подготовить запрос как для "сайта A", так и для "сайта Б".
      * Чтобы проверить, действительно ли данные для PerfectCanvas были заменены, проверьте лог в файле BrowserAutomationStudio/apps/ТЕКУЩАЯ_ВЕРСИЯ_BAS/s/ID_ПРОЦЕССА.txt.
      * Вы можете найти дополнительную информацию и получить тестовые отпечатки на следующей странице FingerprintSwitcher https://fingerprints.bablosoft.com/.
      *
      * Параметры:
      *
      * tags: string - Теги
      * Выберите систему и устройство, для которых вы хотите получить отпечаток. Несколько параметров могут быть объединены вместе, в этом случае сервис вернет только те отпечатки, которые соответствуют всем параметрам.
      Примеры :
      Chrome - Выберать отпечаток Chrome для любой платформы
      Microsoft Windows,Chrome - Выбрать отпечаток Chrome для Windows. Это единственный тип отпечатков, который можно использовать бесплатно.
      Пустая строка - Выбрать любой отпечаток
      * key: string - Ключ сервиса. Может быть пустым
      Отпечатки загружаются удаленно из службы FingerprintSwitcher, чтобы использовать этот сервис, вам нужно купить ключ (см. ссылку ниже). Однако вы можете использовать его бесплатно с тегами Microsoft Windows,Chrome и с ограничениями на количество запросов. Чтобы использовать бесплатную версию, оставьте это поле пустым.
      Примеры :
      pGGeNdza2e0gIw48oa - Пример ключа
      Пустая строка - Использовать бесплатную версию
      * min_browser_version: string - Минимальная версия браузера
      Выбирать только те отпечатки, которые имеют определенную версию браузера. Рекомендуется использовать эту опцию вместе с явным указанием названия браузера. Например, вы можете выбрать отпечатки для браузера Chrome с версией не меньше 75.
      Примеры :
      * - Не фильтровать по версии браузера
      75 - Версия браузера должна быть не меньше 75
      * min_width: string - Минимальная ширина браузера
      Минимальная ширина браузера
      Выбирать только те отпечатки, ширина которых больше заданного значения.
      Примеры :
      * - Не фильтровать по ширине браузера
      1600 - Ширина браузера должна быть больше 1600
      * min_height: string - Минимальная высота браузера
      Минимальная высота браузера
      Выбирать только те отпечатки, высота которых больше заданного значения.
      Примеры :
      * - Не фильтровать по высоте браузера
      900 - Высота браузера должна быть больше 900
      * max_width: string - Максимальная ширина браузера
      Максимальная ширина браузера
      Выбирать только те отпечатки, ширина которых меньше заданного значения.
      Примеры :
      * - Не фильтровать по ширине браузера
      2000 - Ширина браузера должна быть меньше 2000
      * max_height: string - Максимальная высота браузера
      Максимальная высота браузера
      Выбирать только те отпечатки, высота которых меньше заданного значения.
      Примеры :
      * - Не фильтровать по высоте браузера
      1200 - Высота браузера должна быть меньше 1200
      * time_limit: string - Минимальная дата добавления
      Минимальная дата добавления
      Выбирать только те отпечатки, дата добавления которых соответствует определенному условию
      Примеры :
      * - Не фильтровать по дате добавления
      15 days - Выбирать только те отпечатки, которые были добавлены не позже 15 дней назад
      * perfectcanvas_request: string - Запрос PerfectCanvas. Может быть пустым.
      Запрос PerfectCanvas содержит все данные, необходимые для отрисовки canvas на удаленной машине. Чтобы получить строку запроса, используйте приложение CanvasInspector, смотрите вики для получения дополнительной информации и ссылки для скачивания. "Запрос PerfectCanvas" должен быть получен один раз для сайта, а не для каждого отпечатка.
      Примеры :
      Пустая строка - Использовать стандартный отпечаток. К данным canvas будет добавлен шум.
      Запрос PerfectCanvas - Использовать отпечаток с PerfectCanvas. Все данные, соответствующие запросу PerfectCanvas, будут заменены изображениями с реальных устройств. Любые другие данные canvas будут заменены добавлением шума.
      *
      * perfectcanvas_logs: boolean - PerfectCanvas логи
      Нужно ли добавлять логи при получении отпечатков с PerfectCanvas.
      Примеры :
      true - Добавить логи, может быть полезно для диагностики.
      false - Отключить логи, отпечаток будет получен без каких-либо сообщений.
      * enable_custom_server: boolean - Использовать пользовательские серверы
      Использовать пользовательские серверы
      Эта настройка полезна только в том случае, если пользовательские серверы активированы для вашей учетной записи. В противном случае действие всегда будет выдавать ошибку. Если у вас включен этот параметр, отпечаток будет получен только из вашего сервера. Данный метод совместим с PerfectCanvas. Проверьте вики для получения дополнительной информации.
      Примеры :
      true - Использовать пользовательский сервер для получения отпечатка.
      false - Получить отпечаток из стандартного сервера.
      * dynamic_perfect_canvas: boolean - Получение PerfectCanvas в реальном времени
      В случае, если отпечаток с заданным запросом PerfectCanvas отсутствует в базе, данные canvas будут получаться в реальном времени с одной из машин, которая в данный момент находится online. Так действие работает по умолчанию, но вам также может понадобиться отключить получение PerfetCanvas в реальном времени, например, чтобы сэкономить время или по какой-либо другой причине. Для этого установите значение false. Эта настройка не действуют, если не задан запрос PerfectCanvas.
      Примеры :
      true - Поиск отпечатка с указанным запросом PerfectCanvas будет происходить в статической базе данных, если он не найден, данные canvas будут получаться в реальном времени с одной из машин, которая в данный момент находится online.
      false - Поиск отпечатка с указанным запросом PerfectCanvas будет происходить в статической базе данных, если он не найден, произойдет ошибка.
      *
      * enable_precomputed_fingerprints: boolean - Включить предварительное вычисление PerfectCanvas
      В случае, если отпечаток с заданным запросом PerfectCanvas отсутствует в базе, данные canvas будут получаться в реальном времени с одной из машин, которая в данный момент находится online. Так действие работает по умолчанию, но вам также может понадобиться отключить получение PerfetCanvas из статичной базы и сразу получать отпечаток в реальном времени. Для этого установите значение false. Эта настройка не действуют, если не задан запрос PerfectCanvas или если используется CustomServers.
      Примеры :
      true - Поиск отпечатка с указанным запросом PerfectCanvas будет происходить в статической базе данных, если он не найден, данные canvas будут получаться в реальном времени с одной из машин, которая в данный момент находится online.
      false - Получение отпечатка с указанным запросом PerfectCanvas будет происходить в реальном времени с одной из машин, которая в данный момент находится online.
      *
      */
      function BAS_get_fingerprint() {
      const args = _arguments()
      _call(BrowserAutomationStudio_GetFingerprint, [args])!
      const result = _result()
      _function_return(result)
      return result
      }
      /**
      * Применить отпечаток (BAS-функция)
      * Изменить отпечаток браузера, который содержит: юзер агент, размер экрана, свойства navigator, шрифты и многое другое.
      * Параметр 'Отпечаток' должен содержать данные, необходимые для изменения отпечатка. Их можно получить как результат действия 'Получить отпечаток'. Обратите внимание, что отпечаток может быть использован как сразу, так и в любое другое время, даже после перезапуска BAS. Для этого сохраните его в текстовый файл или базу данных и загрузите перед использованием.
      * Это действие - более продвинутая версия смены юзер агента. Оно меняет не только юзер агент, но и множество внутренних методов и переменных браузера, так, что он выглядел абсолютно идентично хрому, файерфоксу, сафари, настольному или мобильному браузеру.
      * Некоторые дополнительные действия могут быть использованы, чтобы сделать ваш браузер более защищенным. Задайте прокси сервер через действие 'Прокси'. Измените часовой пояс с помощью действия 'Установить часовой пояс и координаты по ип'. Используйте, сохраняйте и повторно используйте профили, потому что запуск браузера на только что созданных профилях может быть подозрительным.
      * Применение отпечатка не требует перезапуск браузера, поэтому настройки не сбрасываются.
      * Вы можете найти дополнительную информацию и получить тестовые отпечатки на следующей странице FingerprintSwitcher https://fingerprints.bablosoft.com/.
      *
      * Параметры:
      *
      * args.fingerprint: string - Отпечаток
      *
      Этот параметр должен содержать данные, необходимые для изменения отпечатка. Их можно получить как результат действия 'Получить отпечаток'. Обратите внимание, что отпечаток может быть использован как сразу, так и в любое другое время, даже после перезапуска BAS. Для этого сохраните его в текстовый файл или базу данных и загрузите перед использованием.
      * args.safeUseCanvas: boolean - Безопасное использование Canvas
      Если в этом поле установлено значение true, получение данных из canvas будет включено, но к этим данным будет добавлен шум.
      * args.safeUsePerfectCanvas: boolean - Использовать PerfectCanvas
      Если в этом поле установлено значение true, замена данных PerfectCanvas будет включена. Чтобы это работало, отпечаток должен содержать данные PerfectCanvas. Смотрите действие "Получить отпечаток" чтобы узнать больше.
      * args.safeUseWebGL: boolean - Безопасное использование WebGL
      Если в этом поле установлено значение true, WebGL будет включен, шум будет добавлен к изображениям получаемым из элементов отображаемым с помощью WebGL, а ваши реальные свойства видеокарты будут изменены
      * args.safeUseAudio: boolean - Безопасное использование Audio
      Если в этом поле установлено значение true, audio api будет включен, шум будет добавлен к звуку, а ваши реальные свойства железа будут изменены
      * args.safeUseBattery: boolean - Безопасное использование батареи
      Если в этом поле установлено значение true, заряд батареи будет показывать разные значения для каждого потока, что предотвращает обнаружение вас сайтом. В случае, если устройство, из которого был получен отпечаток, не имеет API для работы с батареей, всегда будет возвращен уровень заряда 100%.
      * args.safeUseClientRect: boolean - Безопасное использование ClientRect
      Если в этом поле установлено значение true, результаты API, который возвращают координаты элемента, будут изменены для защиты от техники получения отпечатков браузера 'ClientRect'.
      * args.emulationDeviceSensors: boolean - Эмуляция датчиков устройства
      Chrome поддерживает считывание данных из датчиков устройства, таких как акселерометр, гироскоп или другие. Данные с этих устройств доступны только на мобильных платформах. После установки данной настройки, данные для этих устройств будут сгенерированы и заменены автоматически. Включите эту опцию для более точной эмуляции мобильных отпечатков.
      */
      function BAS_apply_fingerprint() {
      const args = _arguments()
      _call(BrowserAutomationStudio_ApplyFingerprint, [
      args.fingerprint,
      args.safeUseCanvas,
      args.safeUseWebGL,
      args.safeUseAudio,
      args.safeUseBattery,
      args.safeUseClientRect,
      args.safeUsePerfectCanvas,
      args.emulationDeviceSensors
      ])!
      sleep(1000)!
      }
      /**
      * Отпечаток производительности (BAS-функция)
      * Изменить отпечаток производительности.
      * Это действие позволяет снизить эффективность методики получения отпечатка, основанной на измерении времени выполнения определенного javascript функционала. Например, сайт может измерять время выполнения некоторых криптографических функций, которые зависят от используемого оборудования. Результаты будут одинаковыми при разных запусках тестов и, следовательно, могут быть использованы для получения отпечатков.
      * Данное действие изменит результаты измерений времени. Величина этих изменений может быть установлена с помощью параметров "Деформация времени от" и "Время деформации до".
      * Значения по умолчанию должны давать хорошие результаты и могут быть использованы без изменений.
      * Для сброса значений установите параметры "Деформация времени от" и "Время деформации до" в 1.0.
      * Эта технология все еще экспериментальна и может привести к непредсказуемым результатам.
      * Все значения будут сохранены в текущем профиле и будут автоматически восстановлены при следующем использовании профиля.
      * При использовании параметра "Отключить высокую точность замеров" точность измерения времени будет уменьшена. Этот подход снизит возможность получения отпечатка, но может казаться подозрительным. Смотрите описание параметров для более подробной информации.
      *
      * Параметры:
      *
      * args.time_deformation_from: number - Деформация времени от
      Определяет, насколько сильно будут изменены результаты измерения времени. Большие значения означают, что сайт будет считать, что выполнение кода займет больше времени, чем на самом деле. Значения, близкие к 0.0, создадут ощущение, что код выполняется быстрее. Например, если коэффициент деформации времени равен 1.1, а выполнение конкретного кода занимает 10 мс, сайт будет считать, что код был выполнен за 11 мс. Значения не может быть меньше нуля. Этот параметр работает только вместе с другим параметром "Деформация времени до".
      Примеры :
      1.0 - 1.2 - Коэффициент деформации времени будет выбираться случайным образом между 1.0 и 1.2. Измерения времени выполнения кода покажут более высокие значения, чем есть на самом деле.
      0.8 - 1.0 - Коэффициент деформации времени будет выбираться случайным образом между 0.8 и 1.0. Измерения времени выполнения кода покажут более низкие значения, чем есть на самом деле.
      1.15 - 1.15 - Установить коэффициент деформации в точное значение.
      1.0 - 1.0 - Деформация времени не будет применена.
      * args.time_deformation_to: number - Деформация времени до
      Определяет, насколько сильно будут изменены результаты измерения времени. Большие значения означают, что сайт будет считать, что выполнение кода займет больше времени, чем на самом деле. Значения, близкие к 0.0, создадут ощущение, что код выполняется быстрее. Например, если коэффициент деформации времени равен 1.1, а выполнение конкретного кода занимает 10 мс, сайт будет считать, что код был выполнен за 11 мс. Значения не может быть меньше нуля. Этот параметр работает только вместе с другим параметром "Деформация времени от".
      Примеры :
      1.0 - 1.2 - Коэффициент деформации времени будет выбираться случайным образом между 1.0 и 1.2. Измерения времени выполнения кода покажут более высокие значения, чем есть на самом деле.
      0.8 - 1.0 - Коэффициент деформации времени будет выбираться случайным образом между 0.8 и 1.0. Измерения времени выполнения кода покажут более низкие значения, чем есть на самом деле.
      1.15 - 1.15 - Установить коэффициент деформации в точное значение.
      1.0 - 1.0 - Деформация времени не будет применена.
      * args.max_measurement_time: number - Максимальное время измерений
      Это действие будет пытаться изменить результаты измерения времени только тогда, когда они выполняются в пределах небольшого временного интервала. Если интервал между измерениями большой, он не может быть использован для получения отпечатков браузера, поэтому замена не требуется. Этот параметр задает максимальное время между измерениями при котором состоится замена.
      Примеры :
      100 - Значение по умолчанию, делать замену только если интервал между измерениями меньше 100 миллисекунд.
      100000 - Выполнять замену всегда.
      * args.disable_performance_precision: boolean - Отключить высокую точность замеров
      По умолчанию измерение времени вернет значение с высокой точностью, она может быть больше 1 миллисекунды. Например, значение 1200.695 означает 1 секунду и 200.695 миллисекунд. Это может быть использовано для получения отпечатка браузера, но вы можете ограничить точность результата до 1 миллисекунды с помощью этого параметра. Это означает, что возвращаемое значение будет 1200.0 вместо 1200.695. Этот подход снизит возможность получения отпечатка, но может казаться подозрительным, поэтому вместо него лучше использовать деформацию временни.
      Примеры :
      false - Значение по умолчанию, разрешить высокую точность.
      true - Отключить высокую точность.
      */
      function BAS_fingerprint_performance() {
      const args = _arguments()
      _call(BrowserAutomationStudio_PerformanceFingerprint, args)!
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022async\u0022\u007d", 435121423)!
      /*Dat:*/
      /**
      * Прервать асинхронную функцию
      * Прервать вызов асинхронной функции.
      * Это действие немедленно остановит выполнение асинхронной функции.
      * Если параметр "ID потока" содержит список, то каждый поток из этого списка будет остановлен.
      * Это действие работает только с асинхронными функциями, созданными с помощью действия "Вызов функции асинхронно".
      * @param thread_id ID потока
      ID потока, полученный из действия "Вызов функции асинхронно". Если параметр является списком, это действие остановит все асинхронные функций в этом списке.
      Примеры :
      VAR_THREAD_ID - Остановить одну функцию.
      VAR_THREAD_LIST - Остановить все функции из списка.
      */
      function BAS_thread_stop() {
      _thread_stop(_function_argument('thread_id'))
      }
      /**
      * Вызов функции асинхронно (BAS-функция)
      * Выполнить функцию асинхронно не дожидаясь её завершения.
      * Функция должна быть определена заранее. BAS позволяет определять функции используя "Менеджер функций" (screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=browserautomationstudio_2020-02-19_12-28-39.png)
      * Функции - это контейнеры, в которых содержится список действий. Они помогают группировать несколько действий, которые выполняют одну и ту же задачу. Например, может быть функция, которая логинится на сайте, функция, которая проверяет баланс и т. д. Это делает ваш код понятным и хорошо организованным.
      * Другим преимуществом является то, что одна функция может выполняться столько раз, сколько вы хотите и из любого места. Это помогает избежать повторения кода. Если вы хотите изменить функцию, вам нужно сделать это только один раз, а не в любом месте, где она используется.
      * Это действие запустит новый поток и выполнит в нем функцию с указанными параметрами.
      * Важно понимать, что из-за того, что функция будет запущена в новом потоке, все локальные переменные не будут доступны внутри нее. Функция будет использовать совершенно другой браузер. Это означает, что, например, авторизация на сайте, выполненная в потоке, который вызвал функцию, не будет доступна внутри функции.
      * Обмен данными. Вы можете передать данные в функцию, установив входные параметры, результаты из нее можно получить с помощью действия "Получить результат асинхронной функции". Результаты доступны только после завершения работы функции.
      * Выполнение этого действия завершится сразу после его вызова, даже если само выполнение функции занимает значительное время. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_17-08-03.png)
      * Вы можете дождаться завершения одной или нескольких асинхронных функций, используя действие "Ждать завершение асинхронной функции". (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_17-10-57.png)
      * Это действие ведет себя по-разному в режиме записи и запуска. В режиме запуска оно создает новый поток и распараллеливает процесс выполнения приложения. В режиме записи оно работает так же, как обычный вызов функции, потому что режим записи всегда однопоточный.
      * Это действие сохраняет ID потока в переменную THREAD_ID. Этот идентификатор позволяет взаимодействовать с функцией, с помощью него вы можете: получить результат функции, дождаться завершения ее выполнения или остановить функцию. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_14-57-58.png)
      * Используйте действие "Ждать завершение асинхронной функции", а затем "Получить результат асинхронной функции", чтобы получить результат выполнения. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_16-12-55.png)
      * Данное действие также добавляет ID потока в переменную THREAD_LIST. Эта переменная имеет тип список и может обрабатываться модулем "Список". Он накапливает все запущенные потоки, поэтому вы можете выполнять с помощью него действия сразу над несколькими потоками, например, немедленно останавливать их.
      * Выполнение скрипта не завершится, пока будет работать хотя бы одна асинхронная функция. Вы можете использовать это поведение для автоматической остановки скрипта, когда все задачи выполнены. Расмотрим пример, если основной поток запускает две функции, выполнение одной занимает 1 минуту, а второй - 2 минуты. В этом случае скрипт завершится через 2 минуты, даже если основной поток завершит работу сразу после запуска. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_14-53-55.png)
      * Вы можете ограничить максимальное количество одновременно работающих потоков с асинхронными функциями, установив параметр "Максимальное количество асинхронных функций, выполняемых одновременно". Если функция будет запущена свыше этого предела, она будет отложена до того момента, когда завершится какая-то другая функция и число потоков упадет ниже предела. Это очень мощная настройка, она позволяет запускать неограниченное число потоков, при этом BAS будет балансировать нагрузку самостоятельно. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_14-51-19.png)
      * По умолчанию функция будет запущена в новом потоке, а после завершения функции поток будет удален. Тем не менее, вы можете поддерживать работу потока и даже запустить в нем новую функцию после завершения старой. Запущенная в старом потоке функция будет иметь тот же контекст - тот же браузер и те же локальные переменные. Рассмотрим следующий пример - есть две функции: SetProxy и DoParsing. Если вы выполняете их в разных потоках, парсинг будет выполняться с реальным ip, а если вы выполняете их в одном и том же потоке последовательно, парсинг будет выполняться через прокси. Чтобы запустить функцию в ранее использованном потоке, установите у параметра "Желаемый ID потока" значение ID этого потока, также необходимо установить у параметра "Остановить поток после завершения функции" значение false.
      * Если в потоке будет запущена функция, в то время, пока идет выполнение какой-то другой функции, то новая будет отложена. Она будет запущена сразу после завершения старой. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-20_20-12-47.png)
      *
      * @param {string} func Имя функции
      *
      * @param {number} thread_id Желаемый ID потока
      ID потока, в котором будет запускаться функция. По умолчанию функция будет запущена в новом потоке, но вы можете изменить это поведение, задав данное значение.
      Примеры :
      0 - Запустить функцию в новом потоке. ID созданного потока будет возвращен в параметре 'Результат. ID потока'.
      VAR_THREAD_ID - Запустить функцию в созданном ранее потоке. Переменная THREAD_ID должна быть получена в результате ранее вызванного действия 'Вызов функции асинхронно'. Предыдущий вызов действия должен установить для параметра 'Остановить поток после завершения функции' значение false, иначе поток будет остановлен преждевременно.
      @param {boolean} stop_thread Остановить поток после завершения функции
      Должен ли поток быть остановлен после того, как эта функция завершит выполнение. Значение по умолчанию - true, оно помогает избежать утечки потоков. Если вы хотите использовать этот поток позже, установите значение false.
      Примеры :
      true - Остановить поток после завершения функции
      false - Не останавливать поток. Следующая функция может быть вызвана в этом потоке. Используйте параметр 'Желаемый ID потока', чтобы указать поток для запуска.
      @param {string} behaviour_inactive 'wait' | 'start postponded function'
      Поведение во время бездействия потока
      Этот параметр определяет поведение во время бездействия потока, т.е. когда функция завершится, но поток останется активным. Используя опцию 'start postponded function', вы можете добиться такого поведения, когда все функции будут выполняться в одном и том же пуле потоков. Это поможет сэкономить ресурсы, необходимые для перезапуска потоков и браузеров. Не забудьте установить для параметра 'Остановить поток после завершения функции' значение false, иначе потоки будут закрываться автоматически вместо перехода в состояние бездействия.
      Примеры :
      wait - Значение по умолчанию. Когда поток находится в состоянии бездействия, он будет ждать вызова новой функции.
      start postponded function - В состоянии бездействия поток будет искать отложенные функции, то есть те, которые были поставлены в очередь из-за установки 'Максимальное количество асинхронных функций, выполняемых одновременно'. Если такая функция будет найдена, она будет выполнена в текущем потоке.
      @param {number} max_funcs Максимальное количество асинхронных функций, выполняемых одновременно
      Максимум одновременно работающих потоков с асинхронными функциями. Лимит устанавливается для всего приложения целиком. Если функция будет запущена свыше этого предела, она будет отложена до того момента, когда завершится какая-то другая функция и число потоков упадет ниже предела. Это очень мощная настройка, она позволяет запускать неограниченное число потоков, при этом BAS будет балансировать нагрузку самостоятельно.
      Примеры :
      30 - Ограничить количество потоков до 30. Значение по умолчанию.
      1 - Выполнять асинхронные функции последовательно.
      100 - Ограничить количество потоков до 100.
      *
      * @returns Object {
      * thread_id: number - Результат. ID потока
      Вместо результата функции эта переменная содержит идентификатор, который можно использовать для получения результата функции после ее завершения. Он также позволяет взаимодействовать с функцией, с помощью него вы можете: получить результат функции, дождаться завершения функции или остановить функцию.
      * thread_list: Array - Список, куда будет добавлен ID потока
      Список, куда будет добавлен ID потока. Эта переменная имеет тип список и может обрабатываться модулем "Список". Он накапливает все запущенные потоки, поэтому вы можете выполнять с помощью него действия сразу над несколькими потоками, например, немедленно останавливать их. Если переменная не существует, она будет создана.
      * }
      */
      function BAS_async() {
      const args = _arguments()
      const thread_id = args.thread_id || 0
      const stop_thread = args.stop_thread || true
      const behaviour_inactive = args.behaviour_inactive || 'wait'
      const max_funcs = args.max_funcs || 30
      VAR_THREAD_ID = 0
      if(VAR_THREAD_ID <= 0) {
      VAR_THREAD_ID = Math.floor(Math.random() * 1000000) + 1;
      }
      if(typeof(VAR_THREAD_LIST) == "undefined") {
      VAR_THREAD_LIST = [];
      }
      if((VAR_THREAD_LIST).indexOf(VAR_THREAD_ID) < 0) {
      (VAR_THREAD_LIST).push(VAR_THREAD_ID)
      }
      _thread_start(VAR_THREAD_ID, 0 == thread_id, args.func, {}, stop_thread, max_funcs, behaviour_inactive !== "wait")!
      const result = {
      thread_id: VAR_THREAD_ID,
      thread_list: VAR_THREAD_LIST,
      }
      _function_return(result)
      return result
      }
      /**
      * Ждать завершение асинхронной функции (BAS-функция)
      * Ждать завершения асинхронной функции.
      * Для работы этого действия необходимо, чтобы функция запускалась асинхронно с помощью действия "Вызов функции асинхронно".
      * Важно понимать, что действие "Вызов функции асинхронно" немедленно завершает свою работу после запуска, и вы можете получить результат выполнения функции только дождавшись ее завершения с помощью этого действия.
      * Это действие может ожидать как отдельную функцию, так и список функций. Чтобы дождаться окончания работы списка функций, установите переменную с типом список в параметр "ID потока", обычно ее имя - THREAD_LIST, в нем накапливаются ID потоков в результате работы действия "Вызов функции асинхронно".
      * о умолчанию это действие будет ожидать бесконечное количество времени, но вы можете указать максимальное время ожидания. Если функция не завершится к этому времени, она будет остановлена и возникнет ошибка. Вы можете обработать ошибку с помощью действия "Игнорировать ошибки". Установка максимального времени ожидания - очень удобный способ ограничить время выполнения для любой функции. (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_17-03-54.png).
      * Пример ожидания нескольких функций может выглядеть вот так https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_17-01-15.png.
      *
      * @param {number} thread_id ID потока
      ID потока, полученный из действия "Вызов функции асинхронно". Если параметр является списком, это действие будет ожидать завершения всех асинхронных функций в списке.
      Примеры :
      VAR_THREAD_ID - Ждать завершения одной функции.
      VAR_THREAD_LIST - Ждать завершения всех функций в списке.
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_thread_wait() {
      const args = _arguments()
      const timeout = args.timeout || 100000000
      waiter_timeout_next(timeout)
      _thread_wait(args.thread_id)
      }
      /**
      * Получить результат асинхронной функции
      * Получить результат выполнения асинхронной функции.
      * Для работы этого действия необходимо, чтобы функция запускалась асинхронно с помощью действия "Вызов функции асинхронно".
      * Важно понимать, что действие "Вызов функции асинхронно" немедленно завершает свою работу после запуска, и чтобы получить результат выполнения функции нужно предварительно дождавшись ее завершения с помощью действия "Ждать завершение асинхронной функции".
      * Это действие получает результат выполнения функции, оно также помогает узнать состояние функции, то есть выполняется ли она в данный момент и являлось ли последнее выполнение успешным.
      * Нет смысла проверять значение переменной THREAD_RESULT до тех пор, пока переменная THREAD_IS_RUNNING не будет равна false, то есть до тех пор, пока функция все еще работает.
      * Вы можете использовать переменную THREAD_IS_RUNNING для ожидания результата функции, но гораздо проще использовать действие "Ждать завершение асинхронной функции". (screen https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_16-06-37.png)
      * Если во время вызова функции произошла ошибка, используйте переменную THREAD_IS_SUCCESS и THREAD_ERROR, чтобы проверить было ли выполнение успешным и получить сообщение об ошибке.
      * Пример получения результата асинхронной функции может выглядеть вот так https://wiki.bablosoft.com/lib/exe/fetch.php?media=browserautomationstudio_2020-02-19_16-12-55.png.
      * @param {number} thread_id ID потока
      ID потока, полученный из действия "Вызов функции асинхронно".
      * @returns Object {
      *  result: string - Результат
      Результат работы асинхронной функции. Чтобы установить это значение из выполняемой функции, вам нужно использовать действие "Return". Если в функции не было вызова действия "Return", возвращается значение null.
      *  is_running: boolean - Работает ли функция
      Логическое значение(true/false) указывает, работает ли функция в данный момент.
      *  is_success: boolean - Результат выполнения успешный
      Логическое значение(true/false) указывает, был ли результат последнего выполнения успешным.
      *  error: string - Строка с ошибкой
      Строка с ошибкой в случае, если последний вызов функции не был успешным.
      * }
      */
      function BAS_thread_get_status(thread_id) {
      const thread_id = _function_argument('thread_id') || thread_id
      const thread_data = _thread_get_status(thread_id)
      const result = {
      result: thread_data.result,
      is_running: thread_data.is_running,
      error: thread_data.error,
      is_success: thread_data.is_success,
      }
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022inactivity_emulation\u0022\u007d", 720897598)!
      /*Dat:*/
      /**
      * Эмуляция бездействия (BAS-функция)
      * Имитировать просмотр пользователем веб-страницы.
      * Это действие - более правдободобная замена действия 'Спать'.
      * Во время бездействия страница может быть прокручена и курсор мыши может перемещаться, но клики не выполняются.
      * Все бездействие разделяется на интервалы. Каждый интервал имеет тип. Вот список типов:
      * 1 - прокрутка страницы колесом мыши.
      * 2 - случайные движения мыши на большое расстояние.
      * 3 - случайные движения мыши на короткое расстояние.
      * 4 - сон.
      * Каждый раз появление интервала выбирается случайным образом. Это означает, что вы будете получать разные результаты каждый раз, когда запускаете это действие.
      * Кроме того, частота появления интервала с одними типами может быть больше, чем с другими.
      * Параметр 'Тип ожидания и его наполнение' должен содержать список типов, чем чаще в списке появляются определенные типы, тем чаще они будут встречаться во время выполнения действия. Прочтите помощь к параметру 'Тип ожидания и его наполнение' чтобы увидеть примеры.
      * @param {number} time Время, проведенное на странице в секундах
      Этот параметр задает длительность бездействия в секундах. Заданное время не является точным, фактическая длительность действия может быть немного дольше, чем указано.
      Примеры :
      60 - Бездействие в течение одной минуты
      300 - Бездействие в течение 5 минут
      @param {Array} expectations Тип ожидания и его наполнение
      Все бездействие разделяется на интервалы. Каждый интервал имеет тип. Вот список типов интервалов: 1 - прокрутка страницы колесом мыши, 2 - случайные движения мыши на большое расстояние, 3 - случайные движения мыши на короткое расстояние, 4 - сон. Кроме того, частота появления интервала с одними типами может быть больше, чем с другими. Этот параметр должен содержать список типов, чем чаще в списке появляются определенные типы, тем чаще они будут встречаться во время выполнения действия.
      Примеры :
      [1] - Выполнять только прокрутку страницы.
      [1,4] - Выполнять прокрутку страницы и сон. И сон и прокрутка будут иметь одинаковую частоту появления
      [1,4,4] - Выполнять прокрутку страницы и сон. Сон будет выполняться в 2 раза чаще, чем прокрутка.
      [1,3,4,4] - Выполнять прокрутку страницы, сон и движения мыши на коротком состоянии. Сон будет выполняться в 2 раза чаще, чем прокрутка. Прокрутка и короткие движения мыши будут иметь одинаковую частоту появления
      */
      function BAS_inactivity_emulation() {
      const args = _arguments()
      IDDLE_EMULATION_END = Date.now() + 1000 * (args.time)
      IDDLE_EMULATION_DISTRIBUTION = args.expectations
      _get_browser_screen_settings()!
      IDDLE_EMULATION_RESULT = JSON.parse(_result())
      IDDLE_CURSOR_POSITION_X = IDDLE_EMULATION_RESULT["CursorX"]
      IDDLE_CURSOR_POSITION_Y = IDDLE_EMULATION_RESULT["CursorY"]
      IDDLE_CURSOR_POSITION_WIDTH = IDDLE_EMULATION_RESULT["Width"]
      IDDLE_CURSOR_POSITION_HEIGHT = IDDLE_EMULATION_RESULT["Height"]
      IDDLE_CURSOR_POSITION_WAS_SCROLL = false
      _do(function(){
      if(Date.now() >= IDDLE_EMULATION_END)
      _break()
      IDDLE_EMULATION_CURRENT_ITEM = IDDLE_EMULATION_DISTRIBUTION[Math.floor(Math.random()*IDDLE_EMULATION_DISTRIBUTION.length)]
      if(_iterator() == 1 && IDDLE_EMULATION_DISTRIBUTION.indexOf(2)>=0)
      IDDLE_EMULATION_CURRENT_ITEM = 2
      _if(IDDLE_EMULATION_CURRENT_ITEM == 1, function(){
      IDDLE_EMULATION_CURRENT_DIRECTION = (rand(1,2) == 2) ? "<MOUSESCROLLUP>" : "<MOUSESCROLLDOWN>"
      if(!IDDLE_CURSOR_POSITION_WAS_SCROLL)
      IDDLE_EMULATION_CURRENT_DIRECTION = "<MOUSESCROLLDOWN>"
      IDDLE_CURSOR_POSITION_WAS_SCROLL = true
      IDDLE_EMULATION_CURRENT_NUMBER = rand(1,5)
      _do(function(){
      if(_iterator() >= IDDLE_EMULATION_CURRENT_NUMBER)
      _break()
      _type(IDDLE_EMULATION_CURRENT_DIRECTION,1000)!
      sleep(rand(300,1000))!
      })!
      })!
      _if(IDDLE_EMULATION_CURRENT_ITEM == 2, function(){
      page().script("document.documentElement.scrollLeft")!
      IDDLE_CURSOR_POSITION_SCROLL_X = parseInt(_result())
      page().script("document.documentElement.scrollTop")!
      IDDLE_CURSOR_POSITION_SCROLL_Y = parseInt(_result())
      IDDLE_CURSOR_POSITION_X = rand(1,IDDLE_CURSOR_POSITION_WIDTH)
      IDDLE_CURSOR_POSITION_Y = rand(1,IDDLE_CURSOR_POSITION_HEIGHT)
      move(IDDLE_CURSOR_POSITION_SCROLL_X + IDDLE_CURSOR_POSITION_X,IDDLE_CURSOR_POSITION_SCROLL_Y + IDDLE_CURSOR_POSITION_Y)!
      })!
      _if(IDDLE_EMULATION_CURRENT_ITEM == 3, function(){
      if(IDDLE_CURSOR_POSITION_X < 0 || IDDLE_CURSOR_POSITION_Y < 0)
      _break()
      page().script("document.documentElement.scrollLeft")!
      IDDLE_CURSOR_POSITION_SCROLL_X = parseInt(_result())
      page().script("document.documentElement.scrollTop")!
      IDDLE_CURSOR_POSITION_SCROLL_Y = parseInt(_result())
      IDDLE_EMULATION_CURRENT_NUMBER = rand(1,4)
      _do(function(){
      if(_iterator() >= IDDLE_EMULATION_CURRENT_NUMBER)
      _break()
      IDDLE_CURSOR_POSITION_X += rand(-50,50)
      IDDLE_CURSOR_POSITION_Y += rand(-50,50)
      if(IDDLE_CURSOR_POSITION_X > IDDLE_CURSOR_POSITION_WIDTH)
      IDDLE_CURSOR_POSITION_X = IDDLE_CURSOR_POSITION_WIDTH
      if(IDDLE_CURSOR_POSITION_Y > IDDLE_CURSOR_POSITION_HEIGHT)
      IDDLE_CURSOR_POSITION_Y = IDDLE_CURSOR_POSITION_HEIGHT
      if(IDDLE_CURSOR_POSITION_X < 0)
      IDDLE_CURSOR_POSITION_X = 0
      if(IDDLE_CURSOR_POSITION_Y < 0)
      IDDLE_CURSOR_POSITION_Y = 0
      move(IDDLE_CURSOR_POSITION_SCROLL_X + IDDLE_CURSOR_POSITION_X,IDDLE_CURSOR_POSITION_SCROLL_Y + IDDLE_CURSOR_POSITION_Y)!
      _if(rand(1,10) > 3,function(){
      sleep(rand(10,300))!
      })!
      })!
      })!
      _if(IDDLE_EMULATION_CURRENT_ITEM == 4, function(){
      sleep(rand(500,5000))!
      })!
      })!
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022image\u0022\u007d", 99485954)!
      /*Dat:*/
      /**
      * Начать работу с изображением
      * Загрузить изображение из бинарных данных (формат base64). Получить идентификатор изображения, который поможет работать с изображением.
      * @param {string} data_base64 Данные изображения в формате base64
      * @returns id изображения
      */
      function BAS_load_image(data_base64) {
      const data_base64 = _function_argument('data_base64') || data_base64
      const result = native("imageprocessing", "load", data_base64)
      _function_return(result)
      return result
      }
      /**
      * Закончить работу с изображением
      * Закрыть изображение с указанным идентификатором и освободить использованную память.
      * @param {string} image_id Id изображения
      */
      function BAS_delete_image(image_id) {
      const image_id = _function_argument('image_id') || image_id
      native("imageprocessing", "delete", image_id)
      }
      /**
      * Создать пустое изображение
      * Создать пустое изображение используя указанные параметры.
      * @param {number} width Ширина
      * @param {number} height Высота
      * @param {number} red Цвет красный. От 0 до 255
      * @param {number} green Цвет зеленый. От 0 до 255
      * @param {number} blue Цвет синий. От 0 до 255
      * @param {number} alpha Цвет прозрачный. От 0 до 255
      * @returns Id изображения
      */
      function BAS_create_image(width, height, red, green, blue, alpha) {
      const width = _function_argument('width') || width
      const height = _function_argument('height') || height
      const red = _function_argument('red') || red
      const green = _function_argument('green') || green
      const blue = _function_argument('blue') || blue
      const alpha = _function_argument('alpha') || alpha
      width = width || 800
      height = height || 800
      red = red || 255
      green = green || 255
      blue = blue || 255
      alpha = alpha || 255
      const result = native(
      "imageprocessing",
      "create",
      width + "," + height + "," + red + "," + green + "," + blue + "," + alpha
      )
      _function_return(result)
      return result
      }
      /**
      * Изменить формат изображения
      * Изменить формат изображения: png, jpeg.
      * @param {string} image_id Id изображения
      * @param {string} format 'png' | 'jpeg'. Формат изображения
      */
      function BAS_convert_image(image_id, format) {
      const image_id = _function_argument('image_id') || image_id
      const format = _function_argument('format') || format
      native("imageprocessing", "convert", image_id + "," + format)
      }
      /**
      * Получить данные изображения
      * Получить данные изображения с заданным идентификатором в формате base64. Действие может быть использовано для сохранения в файл.
      * @param {string} image_id Id изображения
      * @returns Данные изображения
      */
      function BAS_get_image_data(image_id) {
      const image_id = _function_argument('image_id') || image_id
      const result = native("imageprocessing", "getdata", image_id)
      _function_return(result)
      return result
      }
      /**
      * Получить цвет пикселя
      * Получить цвет пикселя по его координатам на изображении.
      * @param {string} image_id Id изображения
      * @param {number} x X
      * @param {number} y Y
      * @returns Object {
      *  R: Цвет красный
      *  G: Цвет зеленый
      *  B: Цвет синий
      *  A: Цвет прозрачный
      * }
      */
      function BAS_image_get_pixel(image_id, x, y) {
      const image_id = _function_argument('image_id') || image_id
      const x = _function_argument('x') || x
      const y = _function_argument('y') || y
      const split = native(
      "imageprocessing",
      "getpixel",
      image_id + "," + x + "," + y
      ).split(",")
      const result = {
      R: parseInt(split[0]),
      G: parseInt(split[1]),
      B: parseInt(split[2]),
      A: parseInt(split[3]),
      }
      _function_return(result)
      return result
      }
      /**
      * Установить цвет пикселя
      * Установить цвет пикселя по его координатам на изображении.
      * @param {string} image_id Id изображения
      * @param {number} x X
      * @param {number} y Y
      * @param {number} red Цвет красный. От 0 до 255
      * @param {number} green Цвет зеленый. От 0 до 255
      * @param {number} blue Цвет синий. От 0 до 255
      * @param {number} alpha Цвет прозрачный. От 0 до 255
      */
      function BAS_image_set_pixel(image_id, x, y, red, green, blue, alpha) {
      const image_id = _function_argument('image_id') || image_id
      const x = _function_argument('x') || x
      const y = _function_argument('y') || y
      const red = _function_argument('red') || red
      const green = _function_argument('green') || green
      const blue = _function_argument('blue') || blue
      const alpha = _function_argument('alpha') || alpha
      native(
      "imageprocessing",
      "setpixel",
      image_id +
      "," +
      x +
      "," +
      y +
      "," +
      red +
      "," +
      green +
      "," +
      blue +
      "," +
      alpha
      )
      }
      /**
      * Получить размер
      * Получить ширину и высоту изображения.
      * @param {string} image_id Id изображения
      * @returns Object {
      *  width: number - Ширина
      *  height: number - Высота
      * }
      */
      function BAS_image_get_size(image_id) {
      const image_id = _function_argument('image_id') || image_id
      const split = native("imageprocessing", "getsize", image_id).split(",")
      const result = {
      width: parseInt(split[0]),
      height: parseInt(split[1]),
      }
      _function_return(result)
      return result
      }
      /**
      * Изменить размер.
      * Изменить ширину и высоту изображения.
      * @param {string} image_id Id изображения
      * @param {number} width Ширина
      * @param {number} height Высота
      */
      function BAS_image_resize(image_id, width, height) {
      const image_id = _function_argument('image_id') || image_id
      const width = _function_argument('width') || width
      const height = _function_argument('height') || height
      native("imageprocessing", "resize", image_id + "," + width + "," + height)
      }
      /**
      * Вставить одно изображение в другое.
      * Вставить одно изображение в другое используя заданные координаты.
      * @param {string} target_image_id Id целевого изображения
      * @param {string} source_image_id Id изображения источника
      * @param {number} x X
      * @param {number} y Y
      */
      function BAS_image_insert(target_image_id, source_image_id, x, y) {
      const target_image_id = _function_argument('target_image_id') || target_image_id
      const source_image_id = _function_argument('source_image_id') || source_image_id
      const x = _function_argument('x') || x
      const y = _function_argument('y') || y
      native(
      "imageprocessing",
      "insert",
      target_image_id + "," + source_image_id + "," + x + "," + y
      )
      }
      /**
      * Поиск одного изображения в другом
      * Найти одно изображение в другом и получить координаты найденного места.
      * @param {string} target_image_id Id целевого изображения
      * @param {string} source_image_id Id изображения источника
      * @returns Object {
      *  found_subimage_x: number - Найденная координата x в целевом изображении
      * found_subimage_y: number - Найденная координата y в целевом изображении
      * threshold: number - Насколько хорошо подходит изображение. 100 - точно подходит, 0 - не подходит совсем.
      * }
      */
      function BAS_image_find(target_image_id, source_image_id) {
      const target_image_id = _function_argument('target_image_id') || target_image_id
      const source_image_id = _function_argument('source_image_id') || source_image_id
      const split = native(
      "imageprocessing",
      "find",
      target_image_id + "," + source_image_id
      ).split(",")
      const result = {
      found_subimage_x: split[0],
      found_subimage_y: split[1],
      threshold: split[2],
      }
      _function_return(result)
      return result
      }
      /**
      * Заполнить прямоугольник цветом
      * Заполнить прямоугольник на изображении определенным цветом.
      * @param {string} image_id Id изображения
      * @param {number} x X
      * @param {number} y Y
      * @param {number} width Ширина
      * @param {number} height Высота
      * @param {number} red Цвет красный. От 0 до 255
      * @param {number} green Цвет зеленый. От 0 до 255
      * @param {number} blue Цвет синий. От 0 до 255
      * @param {number} alpha Цвет прозрачный. От 0 до 255
      */
      function BAS_image_fill(
      image_id,
      x,
      y,
      width,
      height,
      red,
      green,
      blue,
      alpha
      ) {
      const image_id = _function_argument('image_id') || image_id
      const x = _function_argument('x') || x
      const y = _function_argument('y') || y
      const width = _function_argument('width') || width
      const height = _function_argument('height') || height
      const red = _function_argument('red') || red
      const green = _function_argument('green') || green
      const blue = _function_argument('blue') || blue
      const alpha = _function_argument('alpha') || alpha
      x = x || 0
      y = y || 0
      width = width || 100
      height = height || 100
      red = red || 255
      green = green || 255
      blue = blue || 255
      alpha = alpha || 255
      native(
      "imageprocessing",
      "fill",
      image_id +
      "," +
      x +
      "," +
      y +
      "," +
      width +
      "," +
      height +
      "," +
      red +
      "," +
      green +
      "," +
      blue +
      "," +
      alpha
      )
      }
      /**
      * Получить часть изображения
      * Обрезать изображение используя конкретные координаты и размер.
      * @param {string} image_id Id изображения
      * @param {number} x X
      * @param {number} y Y
      * @param {number} width Ширина
      * @param {number} height Высота
      * @returns Id изображения
      */
      function BAS_image_sub(image_id, x, y, width, height) {
      const image_id = _function_argument('image_id') || image_id
      const x = _function_argument('x') || x
      const y = _function_argument('y') || y
      const width = _function_argument('width') || width
      const height = _function_argument('height') || height
      x = x || 0
      y = y || 0
      width = width || 800
      height = height || 800
      const result = native(
      "imageprocessing",
      "sub",
      image_id + "," + x + "," + y + "," + width + "," + height
      )
      return result
      }
      /**
      * Добавить текст
      * Добавить текст в изображение используя заданные параметры.
      * @param {string} image_id Id изображения
      * @param {string} text Текст
      * @param {Object} params {
      *  x: number - X
      *  y: number - Y
      *  width: number - Ширина
      *  height: number - Высота
      *  font: string - Семейство шрифтов
      *  fontRed: number - Цвет шрифта красный. От 0 до 255
      *  fontGreen: number - Цвет шрифта зеленый. От 0 до 255
      *  fontBlue: number - Цвет шрифта синий. От 0 до 255
      *  fontAlpha: number - Цвет шрифта прозрачный. От 0 до 255
      *  verticalAlign: 'top' | 'bottom' | 'center' - Вертикальное выравнивание
      *  gorizontalAlign: 'left' | 'right' | 'center' - Горизонтальное выравнивание
      * }
      */
      function BAS_image_text(image_id, text, params) {
      const image_id = _function_argument('image_id') || image_id
      const text = _function_argument('text') || text
      const params = _function_argument('params') || params
      const x = params.x || 0
      const y = params.y || 0
      const width = params.width || 800
      const height = params.height || 800
      const font = params.font || "Arial"
      const fontSize = params.fontSize || 15
      const fontRed = params.fontRed || 0
      const fontGreen = params.fontGreen || 0
      const fontBlue = params.fontBlue || 0
      const fontAlpha = params.fontAlpha || 255
      const verticalAlign = params.verticalAlign || "top"
      const gorizontalAlign = params.gorizontalAlign || "center"
      native(
      "imageprocessing",
      "text",
      verticalAlign +
      "," +
      gorizontalAlign +
      "," +
      image_id +
      "," +
      x +
      "," +
      y +
      "," +
      width +
      "," +
      height +
      "," +
      font +
      "," +
      fontRed +
      "," +
      fontGreen +
      "," +
      fontBlue +
      "," +
      fontAlpha +
      "," +
      fontSize +
      "," +
      text
      )
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022json\u0022\u007d", 138278807)!
      /*Dat:*/
      /**
      * Получить значение
      * Выполнить запрос JPath и получить одно значение (первое подходящее).
      * Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
      * Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - m1. С помощью JSONPath мы можем просто указать нужный путь - $.messages[0] и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа $, обращаемся к дочернему элементу messages через символ точки, и указываем индекс нужного нам элемента.
      * Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений, но действия Получить значение или Получить ключ вернут только первый элемент из списка, т.е m1, а не [m1, m2, m3]. Если вам нужен именно список, используйте действия Получить все значения или Получить все ключи.
      * Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида age и получить значение этого свойства - 100.
      * Вы также можете использовать упрощённый синтаксис для запросов. Например, результат запросов $.messages[*] и messages[*] будет одинаковым. Модуль сам добавит необходимые символы в начале строки запроса. Это также касается поиска любых элементов (не только корневого), т.е. для запросов вида $..messages[*] и ..messages[*] результат также будет одинаковым.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html
      * @param {string | Object} json JSON строка или объект для парсинга
      JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для парсинга
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns Результат парсинга (Первое подходящее значение)
      */
      function BAS_json_value(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.value(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Получить все значения
      * Выполнить запрос JPath и получить все подходящие значения.
      * Если результатом действия будет одно значение, будет возвращён список, содержащий это значение.
      * Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
      * Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - m1. С помощью JSONPath мы можем просто указать нужный путь - $.messages[0] и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа $, обращаемся к дочернему элементу messages через символ точки, и указываем индекс нужного нам элемента.
      * Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений, но действия Получить значение или Получить ключ вернут только первый элемент из списка, т.е m1, а не [m1, m2, m3]. Если вам нужен именно список, используйте действия Получить все значения или Получить все ключи.
      * Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида age и получить значение этого свойства - 100.
      * Вы также можете использовать упрощённый синтаксис для запросов. Например, результат запросов $.messages[*] и messages[*] будет одинаковым. Модуль сам добавит необходимые символы в начале строки запроса. Это также касается поиска любых элементов (не только корневого), т.е. для запросов вида $..messages[*] и ..messages[*] результат также будет одинаковым.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html
      *
      * @param {string | Object} json JSON строка или объект для парсинга
      JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для парсинга
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns результат парсинга (Все значения или список, состоящий из одного значения).
      */
      function BAS_json_values(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.values(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Получить ключ
      * Выполнить запрос JPath и получить один ключ (первый подходящий).
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
      * Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"Kate":{"rating":5,"count":6},"John":{"rating":1,"count":2}}. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида $.[?(@.rate >= 1)]. Таким образом, в результате мы получим первое имя, удволетворяющее нашему запросу.
      * Обратите внимание, если вы используете это действие - результатом всегда будет одно значение, но действие Получить все ключи вернёт все подходящие элементы в виде списка.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json JSON строка или объект для парсинга
      JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для парсинга
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns результат парсинга (Первый подходящий ключ).
      */
      function BAS_json_key(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.key(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Получить все ключи
      * Выполнить запрос JPath и получить все подходящие ключи.
      * Если результатом действия будет один ключ, будет возвращён список, содержащий этот ключ.
      * Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
      * Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"Kate":{"rating":5,"count":6},"John":{"rating":1,"count":2}}. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида $.[?(@.rate >= 1)]. Таким образом, в результате мы получим список имён, удволетворяющих нашему запросу.
      * Обратите внимание, если вы используете это действие - результатом всегда будет список значений, но действие Получить ключ вернёт только первый подходящий элемент из списка.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json JSON строка или объект для парсинга
      JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для парсинга
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns результат парсинга (Все ключи или список, состоящий из одного ключа).
      */
      function BAS_json_keys(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.keys(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Количество элементов
      * Выполнить запрос JPath и получить количество элементов.
      * Если объект по указанному запросу не будет найден или не будет содержать элементов, результатом будет ноль.
      * JSONPath запрос может быть пустым в этом действии. В этом случае будет подсчитано общее количество ключей объекта или строки в формате JSON.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
      * Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. Мы хотим узнать, сколько новых сообщений было получено от пользователя. С помощью JSONPath мы можем просто указать нужный путь - $.messages[*] и получить точное число входящих сообщений.
      * Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений и число элементов будет равно 3, но если вы укажете запрос вида $.messages число элементов будет равно 1, потому что данный запрос указывает на объект в целом, а не на его элементы.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json JSON строка или объект для подсчёта
      JSON строка или объект для подсчёта. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для подсчёта
      Любой нужный вам запрос JSONPath. Может быть пустым.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns результат подсчёта (Количество элементов).
      Примеры :
      0 - Нет элементов, удовлетворяющих запросу.
      6 - Есть шесть элементов, удовлетворяющих запросу.
      */
      function BAS_json_count(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.count(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Изменить значение
      * Выполнить запрос JPath и изменить значение объекта.
      * Тип возвращаемого объекта будет таким же, как и у оригинальной переменной. Это означает, что если вы укажете строку, будет возвращена строка; если вы вы укажете объект, будет возвращён объект.
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Обратите внимание, в данном действии нельзя использовать сложные пути. Например, изменить или удалить значение с помощью запроса вида $.data[?(@.price == 10)] не получится, так как распознать дочерний элемент в таком виде не представляется возможным.
      * Вместо этого, используйте простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида {"name":"John", "data":{"score": 10, "tries": 5}} и мы хотим изменить значение у data.score. Чтобы сделать это, в качестве запроса возьмём строку вида $.data.score или data.score и в качестве значения число, например, 40. В результате мы получим строку вида {"name":"John", "data":{"score": 40, "tries": 5}}. Это также работает с массивами. Например, если вы имеете массив array и хотите изменить первый элемент, используйте запрос вида $.array[0].
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json JSON строка или объект для изменения
      JSON строка или объект для изменения значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для изменения значения
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @param {string} value Новое значение для объекта
      Новое значение для объекта, удовлетворяющего запросу.
      * @returns результат изменения (Модифицированный объект или строка).
      */
      function BAS_json_change(json, json_path_query, value) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      const value = _function_argument('value') || value
      try {
      const result = JPath.change(json, json_path_query, value)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Удалить значение
      * Выполнить запрос JPath и удалить значение объекта.
      * Тип возвращаемого объекта будет таким же, как и у оригинальной переменной. Это означает, что если вы укажете строку, будет возвращена строка; если вы вы укажете объект, будет возвращён объект.
      * JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
      * С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
      * Обратите внимание, в данном действии нельзя использовать сложные пути. Например, изменить или удалить значение с помощью запроса вида $.data[?(@.price == 10)] не получится, так как распознать дочерний элемент в таком виде не представляется возможным.
      * Вместо этого, используйте простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида {"name":"John", "data":{"score": 10, "tries": 5}} и мы хотим удалить значение data.score. Чтобы сделать это, в качестве запроса возьмём строку вида $.data.score или data.score. В результате мы получим строку вида {"name":"John", "data":{"tries": 5}}. Это также работает с массивами. Например, если вы имеете массив array и хотите удалить первый элемент, используйте запрос вида $.array[0].
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json JSON строка или объект для удаления
      JSON строка или объект для удаления значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} json_path_query JSONPath запрос для удаления значения
      Любой нужный вам запрос JSONPath.
      Примеры :
      $.dialogs[*].title - Заголовки всех диалогов.
      dialogs[*].title - Заголовки всех диалогов.
      $.user.age - Возраст пользователя.
      user.age - Возраст пользователя.
      $..cart[2] - Третий товар в корзине.
      ..cart[2] - Третий товар в корзине.
      $..cart[-2] - Второй с конца товар в корзине.
      ..cart[-2] - Второй с конца товар в корзине.
      $..* - Все возможные элементы.
      ..* - Все возможные элементы.
      * @returns результат удаления (Модифицированный объект или строка).
      */
      function BAS_json_remove(json, json_path_query) {
      const json = _function_argument('json') || json
      const json_path_query = _function_argument('json_path_query') || json_path_query
      try {
      const result = JPath.remove(json, json_path_query)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Подходит ли строка под парсинг JSON
      * Проверить, что выбранная переменная является допустимой строкой JSON и сохранить результат в переменную.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * С помощью этого действия вы можете убедиться, можно ли использовать строку для парсинга JSON и получения данных, чтобы избежать возможных ошибок.
      * Обратите внимание, если вы укажете в качестве переменной для проверки не строку, а переменную любого другого типа - результатом всегда будет false. В этом плане данное действие отличается от JavaScript функции JSON.parse(), так как происходит дополнительная проверка на подходящие типы.
      * Например, проверка для строки {"name":"John"} вернет true, т.к. она имеет валидный формат JSON. Строка "name":"John" будет имеет неверную структуру, у неё отсутствуют фигурные скобки, поэтому результатом будет false.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string} json_str JSON строка для проверки
      * @returns результат проверки формата (true или false).
      */
      function BAS_json_check_format(json_str) {
      const json_str = _function_argument('json_str') || json_str
      try {
      const result = JPath.checkFormat(json_str)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      /**
      * Изменить формат
      * Изменить формат выбранной JSON строки или объекта и сохранить результат в переменную.
      * JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
      * Если вы укажете объект неподходящего типа, либо неверный формат, результатом будет тот же объект.
      * Используйте действие Подходит ли строка под парсинг JSON, чтобы проверить, что преобразование из строки возможно. Или просто используйте Игнорировать ошибки, чтобы обработать возможные исключения.
      * С помощью этого действия вы можете преобразовать строку в формате JSON в объект JavaScript и наоборот.
      * Например, при изменении формата строки вида {"name":"John"} будет возвращён объект, содеражий одно свойство - name со значением John
      * одобным образом мы можем сделать и обратное преобразование, т.е. сделать из объекта строку в формате JSON. Например, у нас есть объект с двумя параметрами. Один из них - это массив из трёх чисел, другой - это обычная строка. Пусть это будет информация об успеваемости студента за предмет. После преобразования, мы получим JSON строку подобного вида - {"name":"John","grades":[5,5,4]}.
      * Помните, что данная функция используется для простого преобразования. Вы можете использовать другие действия как с объектом, так и со строкой. Но всё же рекомендутся сразу обращаться к функциям Получить значение или Получить все значения, если вы хотите собрать особую информацию об объекте или строке в формате JSON.
      * Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
      * @param {string | Object} json_str JSON строка или объект для изменения
      JSON строка или объект для изменения формата. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
      * @param {string} new_format Новый формат данных
      Новый формат данных для вашей переменной. Вы можете использовать только два варианта: String или JSON.
      * @returns результат изменения формата (объект или строка).
      */
      function BAS_json_change_format(json_str, new_format) {
      const json_str = _function_argument('json_str') || json_str
      const new_format = _function_argument('new_format') || new_format
      try {
      const result = JPath.changeFormat(json_str, new_format)
      _function_return(result)
      return result
      } catch (e) {
      fail(e)
      }
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022array\u0022\u007d", 561572793)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQn9C+0YHQu9C10LTQvdC40Lkg0Y3Qu9C10LzQtdC90YJcclxuICogQHBhcmFtIHtBcnJheX0gYXJyINCc0LDRgdGB0LjQslxyXG4gKiBAcmV0dXJucyDQv9C+0YHQu9C10LTQvdC40Lkg0Y3Qu9C10LzQtdC90YIg0LzQsNGB0YHQuNCy0LBcclxuICovXHJcbmZ1bmN0aW9uIGxhc3RMaXN0RWxlbWVudChhcnIpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IHJlc3VsdCA9IChhcnIubGVuZ3RoID4gMCkgPyBhcnJbYXJyLmxlbmd0aCAtIDFdIDogbnVsbFxyXG4gIF9mdW5jdGlvbl9yZXR1cm4ocmVzdWx0KVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLyoqXHJcbiAqINCh0LvRg9GH0LDQudC90YvQuSDRjdC70LXQvNC10L3RglxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIg0LzQsNGB0YHQuNCyXHJcbiAqIEByZXR1cm5zINGB0LvRg9GH0LDQudC90YvQuSDRjdC70LXQvNC10L3RgiDQuNC3INGD0LrQsNC30LDQvdC90L7Qs9C+INC80LDRgdGB0LjQstCwXHJcbiAqL1xyXG5mdW5jdGlvbiByYW5kb21MaXN0RWxlbWVudChhcnIpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKVxyXG4gIGNvbnN0IHJlc3VsdCA9IGFycltyXVxyXG4gIF9mdW5jdGlvbl9yZXR1cm4ocmVzdWx0KVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLyoqXHJcbiAqINCj0YHRgtCw0L3QvtCy0LjRgtGMINGN0LvQtdC80LXQvdGCXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDQnNC80LDRgdGB0LjQslxyXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXgg0JjQvdC00LXQutGBXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSDQl9C90LDRh9C10L3QuNC1XHJcbiAqIEByZXR1cm5zINCt0LvQtdC80LXQvdGCINC80LDRgdGB0LjQstCwINC/0L4g0YPQutCw0LfQsNC90L3QvtC80YMg0LjQvdC00LXQutGB0YMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMaXN0RWxlbWVudChhcnIsIGluZGV4LCB2YWx1ZSkge1xyXG4gIGNvbnN0IGFyciA9IF9mdW5jdGlvbl9hcmd1bWVudCgnYXJyJykgfHwgYXJyXHJcbiAgY29uc3QgaW5kZXggPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2luZGV4JykgfHwgaW5kZXhcclxuICBjb25zdCB2YWx1ZSA9IF9mdW5jdGlvbl9hcmd1bWVudCgndmFsdWUnKSB8fCB2YWx1ZVxyXG4gIGFycltpbmRleCA8IDAgPyBhcnIubGVuZ3RoICsgaW5kZXggOiBpbmRleF0gPSB2YWx1ZVxyXG4gIF9mdW5jdGlvbl9yZXR1cm4oYXJyKVxyXG4gIHJldHVybiBhcnJcclxufVxyXG5cclxuLyoqXHJcbiAqINCj0LTQsNC70LjRgtGMINCf0L4g0JfQvdCw0YfQtdC90LjRjlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIg0JzQsNGB0YHQuNCyXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSDQl9C90LDRh9C10L3QuNC1XHJcbiAqIEByZXR1cm5zINCc0LDRgdGB0LjQsiDRgdC+INGD0LTQsNC70LXQvdC90YvQvNC4INGN0LvQtdC80LXQvdGC0LDQvNC4LCDQuNC80LXRjtGJ0LjQvNC4INC30LDQtNCw0L3QvdC+0LUg0LfQvdCw0YfQtdC90LjQtVxyXG4gKi9cclxuZnVuY3Rpb24gZGVsZXRlTGlzdFZhbHVlKGFyciwgdmFsdWUpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IHZhbHVlID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCd2YWx1ZScpIHx8IHZhbHVlXHJcbiAgY29uc3QgcmVzdWx0ID0gYXJyLmZpbHRlcihmdW5jdGlvbiAoZSkge1xyXG4gICAgcmV0dXJuIGUgIT09IHZhbHVlXHJcbiAgfSlcclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQodC+0LTQtdGA0LbQuNGCXHJcbiAqINCf0YDQvtCy0LXRgNC40YLRjCDRgdC+0LTQtdGA0LbQuNGCINC70Lgg0LzQsNGB0YHQuNCyINC+0L/RgNC10LTQtdC70LXQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1LlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIg0JzQsNGB0YHQuNCyXHJcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZSDQl9C90LDRh9C10L3QuNC1XHJcbiAqIEByZXR1cm5zIGJvb2xlYW5cclxuICovXHJcbmZ1bmN0aW9uIGxpc3RDb250YWlucyhhcnIsIHZhbHVlKSB7XHJcbiAgY29uc3QgYXJyID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdhcnInKSB8fCBhcnJcclxuICBjb25zdCB2YWx1ZSA9IF9mdW5jdGlvbl9hcmd1bWVudCgndmFsdWUnKSB8fCB2YWx1ZVxyXG4gIGNvbnN0IHJlc3VsdCA9IGFyci5pbmRleE9mKHZhbHVlKSA+PSAwXHJcbiAgX2Z1bmN0aW9uX3JldHVybihyZXN1bHQpXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG4vKipcclxuICog0J/QvtC00YHQv9C40YHQvtC6XHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDQnNCw0YHRgdC40LJcclxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4INCd0LDRh9Cw0LvRjNC90YvQuSDQmNC90LTQtdC60YFcclxuICogQHBhcmFtIHtudW1iZXJ9IGxlbiDQlNC70LjQvdCwXHJcbiAqIEByZXR1cm5zINCS0LvQvtC20LXQvdC90YvQuSDQvNCw0YHRgdC40LIsINGB0L7RgdGC0L7Rj9GJ0LjQuSDQuNC3INC+0L/RgNC10LTQtdC70LXQvdC90L7Qs9C+INC60L7Qu9C40YfQtdGB0YLQstCwINGN0LvQtdC80LXQvdGC0L7QsiDQvtGA0LjQs9C40L3QsNC70YzQvdC+0LPQviDQvNCw0YHRgdC40LLQsFxyXG4gKi9cclxuZnVuY3Rpb24gc3ViTGlzdChhcnIsIGluZGV4LCBsZW4pIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IGluZGV4ID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdpbmRleCcpIHx8IGluZGV4XHJcbiAgY29uc3QgbGVuID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdsZW4nKSB8fCBsZW5cclxuICBjb25zdCByZXN1bHQgPSBhcnIuc2xpY2UoKS5zcGxpY2UoaW5kZXgsIGxlbilcclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQo9C00LDQu9C40YLRjCDQlNGD0LHQu9C40LrQsNGC0YtcclxuICog0KPQtNCw0LvQuNGC0Ywg0L/QvtCy0YLQvtGA0Y/RjtGJ0LjQtdGB0Y8g0Y3Qu9C10LzQtdC90YLRiyDQuNC3INGD0LrQsNC30LDQvdC90L7Qs9C+INC80LDRgdGB0LjQstCwLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIg0JzQsNGB0YHQuNCyXHJcbiAqIEByZXR1cm5zIEFycmF5XHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0UmVtb3ZlRHVwbGljYXRlcyhhcnIpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IHNlZW4gPSB7fVxyXG4gIGNvbnN0IHJlc3VsdCA9IGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIHJldHVybiBzZWVuLmhhc093blByb3BlcnR5KGl0ZW0pID8gZmFsc2UgOiAoc2VlbltpdGVtXSA9IHRydWUpXHJcbiAgfSlcclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQmtC+0L/QuNGA0L7QstCw0YLRjCDQodC/0LjRgdC+0LpcclxuICog0J/QvtC70YPRh9C40YLRjCDQv9C+0LvQvdGD0Y4g0LrQvtC/0LjRjiDQvNCw0YHRgdC40LLQsC5cclxuICogQHBhcmFtIHtBcnJheX0gYXJyINCc0LDRgdGB0LjQslxyXG4gKiBAcmV0dXJucyBBcnJheVxyXG4gKi9cclxuZnVuY3Rpb24gbGlzdENvcHkoYXJyKSB7XHJcbiAgY29uc3QgYXJyID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdhcnInKSB8fCBhcnJcclxuICBjb25zdCByZXN1bHQgPSBhcnIuc2xpY2UoKVxyXG4gIF9mdW5jdGlvbl9yZXR1cm4ocmVzdWx0KVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLyoqXHJcbiAqINCf0LXRgNC10LzQtdGI0LDRgtGMINCh0L/QuNGB0L7QulxyXG4gKiDQn9C10YDQtdC80LXRiNCw0YLRjCDQstGB0LUg0Y3Qu9C10LzQtdC90YLRiyDQvNCw0YHRgdC40LIg0LIg0YHQu9GD0YfQsNC50L3QvtC8INC/0L7RgNGP0LTQutC1LlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhcnIg0JzQsNGB0YHQuNCyXHJcbiAqIEByZXR1cm5zIEFycmF5XHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0U2h1ZmZsZShhcnIpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIHZhciBqLCB4LCBpXHJcbiAgZm9yIChpID0gYXJyLmxlbmd0aDsgaTsgaS0tKSB7XHJcbiAgICBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSlcclxuICAgIHggPSBhcnJbaSAtIDFdXHJcbiAgICBhcnJbaSAtIDFdID0gYXJyW2pdXHJcbiAgICBhcnJbal0gPSB4XHJcbiAgfVxyXG4gIF9mdW5jdGlvbl9yZXR1cm4oYXJyKVxyXG4gIHJldHVybiBhcnJcclxufVxyXG5cclxuLyoqXHJcbiAqINCe0LHRitC10LTQuNC90LjRgtGMINCh0L/QuNGB0LrQuFxyXG4gKiDQlNC+0LHQsNCy0LjRgtGMINCy0YHQtSDRjdC70LXQvNC10L3RgtGLINC40Lcg0L7QtNC90L7Qs9C+INC80LDRgdGB0LjQstCwINCyINC00YDRg9Cz0L7QuS5cclxuICogQHBhcmFtIHtBcnJheX0gc291cmNlINCc0LDRgdGB0LjQslxyXG4gKiBAcGFyYW0ge0FycmF5fSB0YXJnZXQg0JzQsNGB0YHQuNCyINCU0LvRjyDQntCx0YrQtdC00LjQvdC10L3QuNGPXHJcbiAqIEByZXR1cm5zIEFycmF5XHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0TWVyZ2Uoc291cmNlLCB0YXJnZXQpIHtcclxuICBjb25zdCBzb3VyY2UgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ3NvdXJjZScpIHx8IHNvdXJjZVxyXG4gIGNvbnN0IHRhcmdldCA9IF9mdW5jdGlvbl9hcmd1bWVudCgndGFyZ2V0JykgfHwgdGFyZ2V0XHJcbiAgY29uc3QgcmVzdWx0ID0gc291cmNlLmNvbmNhdCh0YXJnZXQuc2xpY2UoKSlcclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQodGA0LDQstC90LjRgtGMINCh0L/QuNGB0LrQuFxyXG4gKiDQodGA0LDQstC90LjRgtGMINC00LLQsCDRg9C60LDQt9Cw0L3QvdGL0YUg0LzQsNGB0YHQuNCy0LAg0L/QvtGN0LvQtdC80LXQvdGC0L3Qvi4g0JTQtdC50YHRgtCy0LjQtSDQstC+0LfQstGA0LDRidCw0LXRgiB0cnVlLCDQtdGB0LvQuCDQvtCx0LAg0LzQsNGB0YHQuNCy0LAg0YHQvtC00LXRgNC20LDRgiDQvtC00LjQvdCw0LrQvtCy0YvQtSDQt9C90LDRh9C10L3QuNGPLCDQtNCw0LbQtSDQtdGB0LvQuCDQvtC90Lgg0YDQsNGB0L/QvtC70L7QttC10L3RiyDQsiDRgNCw0LfQvdC+0Lwg0L/QvtGA0Y/QtNC60LUuXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciDQnNCw0YHRgdC40LJcclxuICogQHBhcmFtIHtBcnJheX0gYXJyQ29tcGFyZSDQnNCw0YHRgdC40LIg0JTQu9GPINCh0YDQsNCy0L3QtdC90LjRj1xyXG4gKiBAcmV0dXJucyBib29sZWFuXHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0Q29tcGFyZShhcnIsIGFyckNvbXBhcmUpIHtcclxuICBjb25zdCBhcnIgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FycicpIHx8IGFyclxyXG4gIGNvbnN0IGFyckNvbXBhcmUgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2FyckNvbXBhcmUnKVxyXG4gIGNvbnN0IHJlc3VsdCA9IChKU09OLnN0cmluZ2lmeShhcnIuc2xpY2UoKS5zb3J0KCkpID09PSBKU09OLnN0cmluZ2lmeShhcnJDb21wYXJlLnNsaWNlKCkuc29ydCgpKSkgXHJcbiAgX2Z1bmN0aW9uX3JldHVybihyZXN1bHQpXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcbiIsImNsYXNzIjoiZXhwcmVzc2lvbiJ9XX0=*/
      /**
      * Последний элемент
      * @param {Array} arr Массив
      * @returns последний элемент массива
      */
      function lastListElement(arr) {
      const arr = _function_argument('arr') || arr
      const result = (arr.length > 0) ? arr[arr.length - 1] : null
      _function_return(result)
      return result
      }
      /**
      * Случайный элемент
      * @param {Array} arr массив
      * @returns случайный элемент из указанного массива
      */
      function randomListElement(arr) {
      const arr = _function_argument('arr') || arr
      const r = Math.floor(Math.random() * arr.length)
      const result = arr[r]
      _function_return(result)
      return result
      }
      /**
      * Установить элемент
      * @param {Array} arr Ммассив
      * @param {number} index Индекс
      * @param {any} value Значение
      * @returns Элемент массива по указанному индексу.
      */
      function setListElement(arr, index, value) {
      const arr = _function_argument('arr') || arr
      const index = _function_argument('index') || index
      const value = _function_argument('value') || value
      arr[index < 0 ? arr.length + index : index] = value
      _function_return(arr)
      return arr
      }
      /**
      * Удалить По Значению
      * @param {Array} arr Массив
      * @param {any} value Значение
      * @returns Массив со удаленными элементами, имеющими заданное значение
      */
      function deleteListValue(arr, value) {
      const arr = _function_argument('arr') || arr
      const value = _function_argument('value') || value
      const result = arr.filter(function (e) {
      return e !== value
      })
      _function_return(result)
      return result
      }
      /**
      * Содержит
      * Проверить содержит ли массив определенное значение.
      * @param {Array} arr Массив
      * @param {any} value Значение
      * @returns boolean
      */
      function listContains(arr, value) {
      const arr = _function_argument('arr') || arr
      const value = _function_argument('value') || value
      const result = arr.indexOf(value) >= 0
      _function_return(result)
      return result
      }
      /**
      * Подсписок
      * @param {Array} arr Массив
      * @param {number} index Начальный Индекс
      * @param {number} len Длина
      * @returns Вложенный массив, состоящий из определенного количества элементов оригинального массива
      */
      function subList(arr, index, len) {
      const arr = _function_argument('arr') || arr
      const index = _function_argument('index') || index
      const len = _function_argument('len') || len
      const result = arr.slice().splice(index, len)
      _function_return(result)
      return result
      }
      /**
      * Удалить Дубликаты
      * Удалить повторяющиеся элементы из указанного массива.
      * @param {Array} arr Массив
      * @returns Array
      */
      function listRemoveDuplicates(arr) {
      const arr = _function_argument('arr') || arr
      const seen = {}
      const result = arr.filter(function (item) {
      return seen.hasOwnProperty(item) ? false : (seen[item] = true)
      })
      _function_return(result)
      return result
      }
      /**
      * Копировать Список
      * Получить полную копию массива.
      * @param {Array} arr Массив
      * @returns Array
      */
      function listCopy(arr) {
      const arr = _function_argument('arr') || arr
      const result = arr.slice()
      _function_return(result)
      return result
      }
      /**
      * Перемешать Список
      * Перемешать все элементы массив в случайном порядке.
      * @param {Array} arr Массив
      * @returns Array
      */
      function listShuffle(arr) {
      const arr = _function_argument('arr') || arr
      var j, x, i
      for (i = arr.length; i; i--) {
      j = Math.floor(Math.random() * i)
      x = arr[i - 1]
      arr[i - 1] = arr[j]
      arr[j] = x
      }
      _function_return(arr)
      return arr
      }
      /**
      * Объединить Списки
      * Добавить все элементы из одного массива в другой.
      * @param {Array} source Массив
      * @param {Array} target Массив Для Объединения
      * @returns Array
      */
      function listMerge(source, target) {
      const source = _function_argument('source') || source
      const target = _function_argument('target') || target
      const result = source.concat(target.slice())
      _function_return(result)
      return result
      }
      /**
      * Сравнить Списки
      * Сравнить два указанных массива поэлементно. Действие возвращает true, если оба массива содержат одинаковые значения, даже если они расположены в разном порядке.
      * @param {Array} arr Массив
      * @param {Array} arrCompare Массив Для Сравнения
      * @returns boolean
      */
      function listCompare(arr, arrCompare) {
      const arr = _function_argument('arr') || arr
      const arrCompare = _function_argument('arrCompare')
      const result = (JSON.stringify(arr.slice().sort()) === JSON.stringify(arrCompare.slice().sort()))
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022path\u0022\u007d", 453762014)!
      /*Dat:*/
      /**
      * Путь к файлу проекта
      * Получить полный путь к файлу проекта.
      * Это действие вернет полный путь к файлу проекта. Если скрипт не скомпилирован, то это действие вернет путь к открытому файлу проекта. А если скрипт скомпилирован, то это действие вернет путь к файлу project.xml находящемуся в корневой папке движка.
      * Например, если скрипт не скомпилирован и открыт проект "Gparser" находящийся в папке "D:/projects", то действие вернет "D:/projects/Gparser.xml".
      * У скомпилированных незащищенных и защищенных скриптов пути немного отличаются, так как незащищенный скрипт сохраняет движок в папку appslocal, а защищенный в папку appsremote.
      * Например, если скрипт скомпилирован без защиты и находится в папке "D:/Gparser", то действие вернет "D:/Gparser/appslocal/ibq8y9qo/SIDbfzc5bdv/engine/project.xml".
      * Например, если скрипт скомпилирован с защитой и находится в папке "D:/Gparser", то действие вернет "D:/Gparser/appsremote/Gparser/SIDic9cmk8n/engine/project.xml".
      * @returns Путь к файлу проекта.
      Примеры :
      D:/projects/Gparser.xml - Не скомпилированный скрипт
      D:/Gparser/appslocal/ibq8y9qo/SID/engine/project.xml - Незащищенный скомпилированный скрипт
      D:/Gparser/appsremote/Gparser/SID/engine/project.xml - Защищенный скомпилированный скрипт
      */
      function BAS_project_path() {
      const result = project_path()
      _function_return(result)
      return result
      }
      /**
      * Путь к директории проекта
      * Получить полный путь к директории проекта.
      * Это действие вернет полный путь к директории проекта. Если скрипт не скомпилирован, то это действие вернет путь к директории в которой находится открытый файл проекта. А если скрипт скомпилирован, то это действие вернет путь к корневой директории скрипта.
      * @returns Путь к директории проекта.
      Примеры :
      D:/projects - Не скомпилированный скрипт
      D:/Gparser - Незащищенный скомпилированный скрипт/Защищенный скомпилированный скрипт
      */
      function BAS_project_directory() {
      const result = project_directory()
      _function_return(result)
      return result
      }
      /**
      * Путь установки
      * Получить полный путь установки.
      * Это действие вернет полный путь к директории, в которой находится исполняемый файл.
      * Например, если скрипт не скомпилирован и запущен BAS версии 24.0.8 установленный в папку "C:/BrowserAutomationStudio", то действие вернет "C:/BrowserAutomationStudio/apps/24.0.8".
      * У скомпилированных незащищенных и защищенных скриптов пути немного отличаются, так как незащищенный скрипт сохраняет движок в папку appslocal, а защищенный в папку appsremote.
      * Например, если скрипт скомпилирован без защиты и находится в папке "D:/Gparser", то действие вернет "D:/Gparser/appslocal/ibq8y9qo/SIDbfzc5bdv/engine".
      * Например, если скрипт скомпилирован с защитой и находится в папке "D:/Gparser", то действие вернет "D:/Gparser/appsremote/Gparser/SIDic9cmk8n/engine".
      * @returns Путь установки
      Примеры :
      C:/BrowserAutomationStudio/apps/24.0.8 - Не скомпилированный скрипт
      D:/Gparser/appslocal/ibq8y9qo/SID/engine - Незащищенный скомпилированный скрипт
      D:/Gparser/appsremote/Gparser/SID/engine - Защищенный скомпилированный скрипт
      */
      function BAS_installation_path() {
      const result = installation_path()
      _function_return(result)
      return result
      }
      /**
      * Получить имя файла из пути
      * Получить последнюю часть указанного пути.
      * Это действие вернет последнюю часть пути, которой может быть название файла с расширением или название папки, завершающие разделители каталогов игнорируются.
      * Например, если указан путь "С:/foo/bar/baz/asdf/quux.html/", то действие вернет "quux.html".
      * Расширение файла можно удалить из итогового результата, указав удаляемое раширение в сответствующий параметр находящийся в дополнительных настройках.
      * Например, если указан путь "/test/archive/engine.js" и удаляемое расширение ".js", то действие вернет "engine".
      * Параметр "Удаляемое расширение файла" чувствителен к регистру.
      * Например, если указан путь "C:/foo.HTML" и удаляемое расширение ".html", то действие вернет "foo.HTML", а не "foo".
      * Можно удалить любое расширение, если в качестве удаляемого расширения указать "*".
      * Например, если указан путь "D:/sqlite/your.db" и удаляемое расширение "*", то действие вернет "your".
      * Получить директорию пути можно с помощью действия "Получить папку из пути".
      * Получить расширение файла можно с помощью действия "Получить расширение файла".
      * Распарсить путь на элементы можно с помощью действия "Парсить путь".
      * Если в параметр "Путь" или "Удаляемое расширение файла" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, из которого нужно получить последнюю часть.
      Примеры :
      /foo/bar/baz/asdf/quux.html
      D:/test/archive/engine.js
      C:/foo.php
      * @param {string} ext Удаляемое расширение файла
      Необязательный параметр. Расширение файла, которое нужно удалять из итогового результата. Этот параметр чувствителен к регистру, если указан путь "C:/foo.HTML" и расширение ".html", то итоговым результатом будет "foo.HTML", а не "foo".
      Примеры :
      .html
      .js
      .php
      * - Удалять любое расширение файла
      Пустая строка - Не удалять расширение файла
      * @returns после успешного выполнения действия, последняя часть пути.
      Примеры :
      quux.html - Путь: /foo/bar/baz/asdf/quux.html
      engine.js - Путь: D:/test/archive/engine.js
      foo.php - Путь: C:/foo.php
      quux - Путь: /foo/bar/baz/asdf/quux.html, Удаляемое расширение файла: .html
      engine - Путь: D:/test/archive/engine.js, Удаляемое расширение файла: .js
      foo - Путь: C:/foo.php, Удаляемое расширение файла: .php
      */
      function BAS_filename_from_path(path, ext) {
      const path = _function_argument('path') || path
      const ext = _function_argument('ext') || ext
      const result = _path.basename(path, ext)
      _function_return(result)
      return result
      }
      /**
      * Получить папку из пути
      * Получить директорию указанного пути.
      * Это действие вернет директорию указанного пути, завершающие разделители каталогов игнорируются.
      * Например, если указан путь "С:/foo/bar/baz/asdf/quux.html/", то действие вернет "C:/foo/bar/baz/asdf".
      * Распарсить путь на элементы можно с помощью действия "Парсить путь".
      * Если в параметр "Путь" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, из которого нужно получить директорию.
      Примеры :
      /foo/bar/baz/asdf/quux
      D:/modules/res/panels/panel3.jpg
      C:/Users/Admin/Desktop/projects/project.xml
      * @returns после успешного выполнения действия, директория.
      Примеры :
      /foo/bar/baz/asdf - Путь: /foo/bar/baz/asdf/quux
      D:/modules/res/panels - Путь: D:/modules/res/panels/panel3.jpg
      C:/Users/Admin/Desktop/projects - Путь: C:/Users/Admin/Desktop/projects/project.xml
      */
      function BAS_dirname_from_path(path) {
      const path = _function_argument('path') || path
      const result = _path.dirname(path)
      _function_return(result)
      return result
      }
      /**
      * Получить расширение файла
      * Получить расширение файла указанного пути.
      * Это действие вернет расширение последней части пути, с пооследней точки до конца строки, завершающие разделители каталогов игнорируются.
      * Например, если указан путь "С:/foo/bar/baz/asdf/quux.html/", то действие вернет ".html".
      * Если в последней части пути нет точки или перед последней точкой нет символов, то действие вернет пустую строку.
      * Например, если указан путь "С:/foo/bar/baz/asdf/quux/" или "С:/foo/bar/baz/asdf/.index", то действие вернет "".
      * Распарсить путь на элементы можно с помощью действия "Парсить путь".
      * Если в параметр "Путь" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, из которого нужно получить расширение.
      Примеры :
      /home/user/dir/file.txt
      D:/dev/sql/sqlite/your.db
      C:/Users/Admin/Desktop/site/index.html
      * @returns после успешного выполнения действия, расширение.
      Примеры :
      .txt - Путь: /home/user/dir/file.txt
      .db - Путь: D:/dev/sql/sqlite/your.db
      .html - Путь: C:/Users/Admin/Desktop/site/index.html
      Пустая строка - Путь: /foo/bar/baz/asdf/quux
      */
      function BAS_extname_from_path(path) {
      const path = _function_argument('path') || path
      const result = _path.extname(path)
      _function_return(result)
      return result
      }
      /**
      * Является ли абсолютным путем
      * Проверить, являются ли указанный путь абсолютным.
      * Это действие вернет true или false в зависимости от того, является ли указанный путь абсолютным. Результат может быть использован вместе с действием "If".
      * Например, если указан путь "/foo/bar", то действие вернет true, а если укзан путь "bar/baz" или "qux/", то действие вернет false.
      * Если в параметр "Путь" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, который нужно проверить на то является ли он абсолютным.
      Примеры :
      /foo/bar - Абсолютный путь
      C:/foo/.. - Абсолютный путь
      bar/baz - Не абсолютный путь
      qux/ - Не абсолютный путь
      * @returns true или false в зависимости от того, является ли указанный путь абсолютным.
      Примеры :
      true - Путь является абсолютным.
      false - Путь не является абсолютным.
      */
      function BAS_path_is_absolute(path) {
      const path = _function_argument('path') || path
      const result = _path.isAbsolute(path)
      _function_return(result)
      return result
      }
      /**
      * Объединить пути
      * Объединить несколько путей в один.
      * Это действие вернет путь, составленную из всех указанных путей.
      * Например, если указаны параметры "Путь 1" и "Путь 2" значения которых сответственно равны "/foo" и "/bar", то действие вернет "/foo/bar".
      * Пути из отдельных полей и списка складываются в общий список путей которые будут объединены.
      * Например, если в поле "Путь 1" указан путь и в поле "Список путей" указан список из 4 путей, то объединено будет 5 путей.
      * Если какие-то из параметров ("Путь 1", "Путь 2", "Путь 3", "Список путей") не указаны, будут использованы все параметры кроме них.
      * Например, если "Список путей" не указан, то список будет сформирован из параметров "Путь 1" и "Путь 2" и "Путь 3". Если параметры "Путь 1", "Путь 2", "Путь 3" пусты, то будет использован "Список путей". Если указаны все параметры, то все они будут использованы.
      * Порядок объединения полей следующий: "Путь 1", "Путь 2", "Путь 3", "Список путей".
      * Список можно создать с помощью действий из модуля "Список".
      * Если в качестве какого либо из путей указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path1 Путь 1. Может быть пустым
      Путь, которую нужно объединить с другими путями.
      Примеры :
      C:/Users/Admin/Desktop
      /foo/bar
      /baz
      Пустая строка - Будут использованы параметры "Путь 2", "Путь 3", "Список путей"
      * @param {string} path2 Путь 2. Может быть пустым
      Путь, которую нужно объединить с другими путями.
      Примеры :
      C:/Users/Admin/Desktop
      /foo/bar
      /baz
      Пустая строка - Будут использованы параметры "Путь 1", "Путь 3", "Список путей"
      * @param {string} path3 Путь 3. Может быть пустым
      Путь, которую нужно объединить с другими путями.
      Примеры :
      C:/Users/Admin/Desktop
      /foo/bar
      /baz
      Пустая строка - Будут использованы параметры "Путь 1", "Путь 2", "Список путей"
      * @param {Array} pathList Список путей. Может быть пустым
      * @returns после успешного выполнения действия, итоговый путь.
      Примеры :
      C:/Users/Admin/Desktop/foo/bar
      D:/test/Archive/manifest.json
      /baz/tost/file.txt
      */
      function BAS_path_join(path1, path2, path3, pathList) {
      const path1 = _function_argument('path1') || path1
      const path2 = _function_argument('path2') || path2
      const path3 = _function_argument('path3') || path3
      const pathList = _function_argument('pathList') || pathList
      const result = _path
      .join([_avoid_nil(path1), _avoid_nil(path2), _avoid_nil(path3)])
      .concat(_to_arr(_avoid_nilb(pathList, [])))
      _function_return(result)
      return result
      }
      /**
      * Нормализовать путь
      * Нормализовать путь.
      * Это действие вернет нормализованный путь, множественные слеши будут заменены на одиночные, обратные слеши "\" будут заменены на обычные "/", сегменты ".." и "." будут решены.
      * Например, если указан путь "C:////temp\\/\/\/foo/bar/..", то действие вернет "C:/temp/foo".
      * Если активирован параметр "Удалите завершающие слэши", то из пути будет удалены завершающие слэши, например, путь "С:\path\" будет нормализирован в "С:/path".
      * Например, если указан путь "C:\path/\", то действие вернет "C:/path".
      * Если вам нужно сравнить пути, то сначала нормализуйте их этим действием.
      * Если в параметр "Путь" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, который нужно нормализовать.
      Примеры :
      C:\temp\\foo\bar\..\
      C:////temp\\/\/\/foo/bar
      /foo/bar//baz/asdf/quux/..
      * @param {boolean} removeTrailingSlash Удалите завершающие слэши
      Если активирован, то из пути будет удалены завершающие слэши.
      Примеры :
      Активирован - Путь "C:\path/\" будет нормализован до "C:/path"
      Деактивирован - Путь "C:\path/\" будет нормализован до "C:/path/"
      Активирован - Путь "\" будет нормализован до ""
      Деактивирован - Путь "\" будет нормализован до "/"
      * @returns после успешного выполнения действия, нормализованный путь.
      Примеры :
      C:/temp/foo - Путь: C:\temp\\foo\bar\..\ и "Удалите завершающие слэши" активирован
      C:/temp/foo/bar - Путь: C:////temp\\/\/\/foo/bar
      /foo/bar/baz/asdf - Путь: /foo/bar//baz/asdf/quux/..
      */
      function BAS_path_normalize(path, removeTrailingSlash) {
      const path = _function_argument('path') || path
      const removeTrailingSlash = _function_argument('removeTrailingSlash') || removeTrailingSlash
      const result = _path.normalize(path, removeTrailingSlash)
      _function_return(result)
      return result
      }
      /**
      * Парсить путь
      * Распарсить путь на элементы.
      * Это действие сохранит каждый элемент пути в свою переменную. Подробнее о путях можно узнать в Wiki.
      * Если в параметр "Путь" будет указана не строка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} path Путь
      Путь, который нужно распарсить.
      Примеры :
      /foo/bar/baz/asdf/quux.html
      D:/test/archive/engine.js
      C:/foo.php
      /foo/bar/baz/asdf/quux
      * @returns Object {
      *  root: string - Корень
      Примеры :
      / - Путь: /foo/bar/baz/asdf/quux.html
      D:/ - Путь: D:/test/archive/engine.js
      C:/ - Путь: C:/foo.php
      / - Путь: /foo/bar/baz/asdf/quux
      *  directory: string - Директория
      Примеры :
      /foo/bar/baz/asdf - Путь: /foo/bar/baz/asdf/quux.html
      D:/test/archive - Путь: D:/test/archive/engine.js
      C:/ - Путь: C:/foo.php
      /foo/bar/baz/asdf - Путь: /foo/bar/baz/asdf/quux
      *  base_name: string - Последняя часть
      Примеры :
      quux.html - Путь: /foo/bar/baz/asdf/quux.html
      engine.js - Путь: D:/test/archive/engine.js
      foo.php - Путь: C:/foo.php
      quux - Путь: /foo/bar/baz/asdf/quux
      *  file_extension: string - Расширение файла
      Эта переменная будет содержать расширение файла указанного пути. Если путь не содержит расширения файла, то переменная будет содержать пустую строку.
      Примеры :
      .html - Путь: /foo/bar/baz/asdf/quux.html
      .js - Путь: D:/test/archive/engine.js
      .php - Путь: C:/foo.php
      Пустая строка - Путь: /foo/bar/baz/asdf/quux
      *  file_name: string - Имя файла
      Эта переменная будет содержать имя файла или директории указанного пути, имя файла будет сохранено без расширения.
      Примеры :
      quux - Путь: /foo/bar/baz/asdf/quux.html
      engine - Путь: D:/test/archive/engine.js
      foo - Путь: C:/foo.php
      quux - Путь: /foo/bar/baz/asdf/quux
      *  items_list: Array - Список элементов пути
      Эта переменная будет содержать список всех элементов указанного пути. Полученный список можно обработать с помощью действий из модуля "Список".
      Примеры :
      ["foo","bar","baz","asdf","quux.html"] - Путь: /foo/bar/baz/asdf/quux.html
      ["D:","test","archive","engine.js"] - Путь: D:/test/archive/engine.js
      ["C:","foo.php"] - Путь: C:/foo.php
      ["foo","bar","baz","asdf","quux"] - Путь: /foo/bar/baz/asdf/quux
      * }
      */
      function BAS_path_parse(path) {
      const path = _function_argument('path') || path
      const parse_res = _path.parse(path)
      const result = {
      root: parse_res.root,
      directory: parse_res.dir,
      base_name: parse_res.base,
      file_extension: parse_res.ext,
      file_name: parse_res.name,
      items_list: parse_res.items
      }
      _function_return(result)
      return result
      }
      /**
      * Получить системный путь (BAS-функция)
      * Получить системный путь с указанным именем.
      * Program Files - Путь к директории "Program Files". Пример: "C:/Program Files".
      * Program Files (x86) - Путь к директории "Program Files (x86)" в 64-разрядных системах для приложений архитектуры x86. Пример: "C:/Program Files (x86)".
      * Desktop - Путь к директории "Рабочий стол". Пример: "C:/Users/Admin/Desktop".
      * Downloads - Путь к директории "Загрузки". Пример: "C:/Users/Admin/Downloads".
      * Documents - Путь к директории "Документы". Пример: "C:/Users/Admin/Documents".
      * Pictures - Путь к директории "Изображения". Пример: "C:/Users/Admin/Pictures".
      * Videos - Путь к директории "Видео". Пример: "C:/Users/Admin/Videos".
      * Music - Путь к директории "Музыка". Пример: "C:/Users/Admin/Music".
      * Favorites - Путь к директории "Избранное". Пример: "C:/Users/Admin/Favorites".
      * App Data - Используемое по умолчанию размещение данных приложений. Пример: "C:/Users/Admin/AppData/Roaming".
      * Local App Data - Используемое по умолчанию локальное размещение данных приложений. Пример: "C:/Users/Admin/AppData/Local".
      * User Profile - Путь к профилю текущего пользователя. Пример: "C:/Users/Admin".
      * System Drive - Диск, на котором расположен корневая директория Windows. Пример: "C:".
      * System Root - Путь к корневой директории Windows. Пример: "C:/Windows".
      * Windows Directory - Директория, в которую установлена Windows. Пример: "C:/Windows".
      * Temp - Путь к временной директории. Пример: "C:/Users/Admin/AppData/Local/Temp".
      * User Name - Имя текущего пользователя. Пример: "Admin".
      * Computer Name - Имя компьютера. Пример: "ADMIN".
      * @param {string} name Имя пути
      Имя пути, который вы хотите получить.
      Примеры :
      Program Files
      AppData
      Desktop
      * @returns полученный путь
      Примеры :
      C:/Program Files - Имя пути: Program Files
      C:/Users/Admin/AppData/Roaming - Имя пути: AppData
      C:/Users/Admin/Desktop - Имя пути: Desktop
      */
      function BAS_get_system_path() {
      const name = _function_argument('name')
      _call_function(_get_system_path, {
      name: name
      })!
      _function_return(_result_function())
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022phone_confirm\u0022\u007d", 744320094)!
      /*Dat:*/
      /**
      * Получить номер телефона (BAS-функция)
      * Получить номер телефона от сервиса приема SMS.
      * Это действие вернет строку, содержащую полученный номер телефона.
      * Пример: "79001112323"
      * Полученный номер нужно использовать в действии "Получить код активации" чтобы получить код из SMS, или в действии "Изменение статуса активации" чтобы изменить статус номера.
      * Вы можете указать свое значение для оператора, сайта и страны в соответствующие параметры находящиеся в дополнительных настройках. Учтите, что эти значения должны быть указаны в том виде в котором их воспринимает сервис, они будут отправлены так как вы их указали.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, то вы можете указать его url сервера в соответствующий параметр находящийся в дополнительных настройках.
      * Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} service Сервис
      Сервис приема SMS, от которого нужно получить номер телефона.
      Примеры :
      sms-activate.ru - https://sms-activate.ru
      smshub.org - https://smshub.org
      sms-reg.com - https://sms-reg.com
      @param {string} apiKey API ключ
      API ключ сервиса приема SMS. Ключ для сервиса выбранного в параметре "Сервис". В зависимости от сервиса, вы можете получить его в личном кабинете или настройках сервиса.
      Примеры :
      8b1a9953c4611296a827abf8c47804d7
      79916U5718g2266a7bff7fad356c6cb280b3ea
      f4d559ba78aa6c4701c1995ae9977c03
      @param {string} site Сайт (VK, WhatsApp, Viber, Telegram и мн. др.)
      @param {string} country Страна
      Необязательный параметр. Страна номера.
      Примеры :
      RU - Российская Федерация
      UA - Украина
      US - США
      Пустая строка - Зависит от используемого сервиса, может быть последняя используемая страна или какая-то определенная страна, подробнее вы можете узнать в описании API сервиса.
      @param {string} operator Оператор
      Необязательный параметр. Сотовый оператор номера, в том виде в котором его воспринимает сервис приема SMS.
      Примеры :
      megafon - МегаФон
      kyivstar - Киевстар
      tele2 - Tele2
      Пустая строка - Использовать любого оператора.
      @param {string} customSite Пользовательский сайт
      Необязательный параметр. Пользовательское значение сайта, в том виде в котором его воспринимает сервис приема SMS. Если этот параметр указан, то он будет использован вместо параметра "Сайт" и отправлен на сервис без предварительной обработки.
      Примеры :
      wa - WhatsApp
      tg - Telegram
      go - Google
      Пустая строка - Использовать значение из параметра "Сайт".
      @param {string} customCountry Пользовательская страна
      Необязательный параметр. Пользовательское значение страны, в том виде в котором его воспринимает сервис приема SMS. Если этот параметр указан, то он будет использован вместо параметра "Страна" и отправлен на сервис без предварительной обработки.
      Примеры :
      0 - Российская Федерация
      1 - Украина
      187 - США
      Пустая строка - Использовать значение из параметра "Страна".
      @param {string} serverUrl Url сервера
      Необязательный параметр. Url сервера сервиса приема SMS. Используйте данный параметр для указания url сервера, если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису.
      Примеры :
      https://sms.org
      http://receive-sms.com
      http://127.0.0.1:8888
      Пустая строка - Использовать url по умолчанию, например, https://sms-activate.ru для sms-activate.ru.
      @param {number} timeout Максимальное время выполнения задания
      @returns номер телефона
      Примеры :
      79001112323
      17039688838
      380048698566
      */
      function BAS_phone_get_number() {
      const args = _arguments()
      _call_function(_SMS.getNumber, {
      service: args.service,
      apiKey: args.apiKey,
      site: args.site,
      country: args.country,
      operator: args.operator,
      customSite: args.customSite,
      customCounty: args.customCountry,
      serverUrl: args.serverUrl,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Получить код активации (BAS-функция)
      * Получить код активации с указанного номера.
      * Перед выполнением этого действия сначала нужно получить номер действием "Получить номер телефона" и без изменений использовать его в параметре "Номер".
      * Это действие вернет строку, содержащую код из SMS сообщения или полное сообщение, если сервису не удалось получить из него код.
      * Например, если сервису удалось получить код из SMS, то действие вернет "75588", а если сервису не удалось получить код из SMS, то действие вернет "Код активации: 75588".
      * Чтобы получить ещё один код на тот же номер, установите статус 3 действием "Изменение статуса активации" и повторно вызовете это действие. Устанавливать статус 3 нужно перед каждым новым получением кода на тот же номер.
      * <Внимание!>В зависимости от сервиса получение повторного SMS кода может быть платным, недоступным или ограниченным по количеству, информацию об этом нужно узнавать в описании сервиса или его API.<Внимание!>
      * Если во время выполнения действия произойдет ошибка или код не будет получен в течение таймаута, указанного в дополнительных настройках, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} number Номер
      Номер полученный из действия "Получить номер телефона", для которого нужно получить SMS код.
      Примеры :
      79001112323
      17039688838
      380048698566
      @param {number} interval Интервал (секунд)
      Интервал проверки готовности кода в секундах.
      Примеры :
      2 - Проверять каждые 2 секунды
      5 - Проверять каждые 5 секунд
      10 - Проверять каждые 10 секунд
      @param {number} timeout Таймаут (минут)
      Максимальное время ожидания SMS кода в минутах. Если указанное время выйдет и SMS не будет получено, то действие завершится ошибкой.
      Примеры :
      10 - Ждать 10 минут
      15 - Ждать 15 минут
      20 - Ждать 20 минут
      @returns SMS-код
      Примеры :
      75588
      98292
      558925
      Код активации: 75588 - Сервису не удалось получить код из SMS, возвращено полное сообщение
      */
      function BAS_phnoe_get_activation_code() {
      const args = _arguments()
      _call_function(_SMS.waitCode, {
      number: args.number,
      interval: args.interval,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Изменение статуса активации (BAS-функция)
      * Изменение статуса активации для указанного номера.
      * Перед выполнением этого действия сначала нужно получить номер действием "Получить номер телефона" и без изменений использовать его в параметре "Номер".
      * Это действие изменяет статус активации для указанного номера на сервисе приема SMS.
      * Возможные статусы:
      * -1 - отменить активацию, если номер вам не подошел или был получен случайно.
      * 1 - сообщить о готовности номера, если SMS уже отправлено, действие "Получить код активации" устанавливает этот статус автоматически поэтому устанавливать этот статус не обязательно.
      * 3 - запросить еще один код, если нужно получить ещё один SMS код на тот же номер. Этот статус нужно устанавливать перед каждым повторным использованием действия "Получить код активации".
      * <Внимание!>В зависимости от сервиса получение повторного SMS кода может быть платным, недоступным или ограниченным по количеству, информацию об этом нужно узнавать в описании сервиса или его API.<Внимание!>
      * 6 - завершить активацию, если получен верный SMS код и вы хотите завершить работу с указанным номером.
      * 8 - сообщить о том, что номер использован и отменить активацию, если указанный номер занят или заблокирован на нужном сайте.
      * По умолчанию информация о номере удаляется при удачной установке статусов -1, 6 и 8, но это можно отключить в дополнительных настройках.
      * Если сервис не поддерживает указанный статус, то действие ничего не сделает.
      * Если не удастся изменить статус или во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} number Номер
      Номер полученный из действия "Получить номер телефона", для которого нужно изменить статус активации.
      Примеры :
      79001112323
      17039688838
      380048698566
      @param {number} status Статус
      Статус который нужно установить для указанного номера.
      Примеры :
      -1 - Отменить активацию.
      1 - Сообщить о готовности номера.
      3 - Запросить еще один код.
      6 - Завершить активацию.
      8 - Сообщить о том, что номер использован и отменить активацию.
      @param {boolean} deleteInfo Удалять информацию о номере при статусе -1, 6 или 8.
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_phone_change_activation_status() {
      const args = _arguments()
      _call_function(_SMS.setStatus, {
      number: args.number,
      status: args.status,
      deleteInfo: args.deleteInfo,
      timeout: args.timeout
      })!
      }
      /**
      * Получить баланс (BAS-функция)
      * Получить баланс сервиса приема SMS.
      * Это действие вернет число, равное балансу указанного сервиса приема SMS. Если не удалось получить баланс, то действие вернет null.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, то вы можете указать его url сервера в соответствующий параметр находящийся в дополнительных настройках.
      * Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} service Сервис
      Сервис приема SMS, для которого нужно получить баланс.
      Примеры :
      sms-activate.ru - https://sms-activate.ru
      smshub.org - https://smshub.org
      sms-reg.com - https://sms-reg.com
      @param {string} apiKey API ключ
      API ключ сервиса приема SMS. Ключ для сервиса выбранного в параметре "Сервис". В зависимости от сервиса, вы можете получить его в личном кабинете или настройках сервиса.
      Примеры :
      8b1a9953c4611296a827abf8c47804d7
      79916U5718g2266a7bff7fad356c6cb280b3ea
      f4d559ba78aa6c4701c1995ae9977c03
      @param {string} serverUrl Url сервера
      Необязательный параметр. Url сервера сервиса приема SMS. Используйте данный параметр для указания url сервера, если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису.
      Примеры :
      https://sms.org
      http://receive-sms.com
      http://127.0.0.1:8888
      Пустая строка - Использовать url по умолчанию, например, https://sms-activate.ru для sms-activate.ru.
      @param {number} timeout Максимальное время выполнения задания (мс)
      @return баланс
      Примеры :
      1.32
      120
      1596
      null - Не удалось получить баланс
      */
      function BAS_phone_get_balance() {
      const args = _arguments()
      _call_function(_SMS.getBalance, {
      service: args.service,
      apiKey: args.apiKey,
      serverUrl: args.serverUrl,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Получить количество доступных номеров (BAS-функция)
      * Получить количество доступных номеров на сервисе приема SMS.
      * Это действие вернет число, равное количеству доступных номеров, соответствующих указанным параметрам, на сервисе приема SMS.
      * Вы можете указать свое значение для оператора, сайта и страны в соответствующие параметры находящиеся в дополнительных настройках. Учтите, что эти значения должны быть указаны в том виде в котором их воспринимает сервис, они будут отправлены так как вы их указали.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, то вы можете указать его url сервера в соответствующий параметр находящийся в дополнительных настройках.
      * Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} service Сервис
      Сервис приема SMS, для которого нужно получить количество доступных номеров.
      Примеры :
      sms-activate.ru - https://sms-activate.ru
      smshub.org - https://smshub.org
      5sim.net - https://5sim.net
      @param {string} apiKey API ключ
      API ключ сервиса приема SMS. Ключ для сервиса выбранного в параметре "Сервис". В зависимости от сервиса, вы можете получить его в личном кабинете или настройках сервиса.
      Примеры :
      8b1a9953c4611296a827abf8c47804d7
      79916U5718g2266a7bff7fad356c6cb280b3ea
      f4d559ba78aa6c4701c1995ae9977c03
      @param {string} site Сайт (VK, WhatsApp, Viber, Telegram и мн. др.)
      @param {string} country Страна
      Необязательный параметр. Страна номера.
      Примеры :
      RU - Российская Федерация
      UA - Украина
      US - США
      Пустая строка - Зависит от используемого сервиса, может быть последняя используемая страна или какая-то определенная страна, подробнее вы можете узнать в описании API сервиса.
      @param {string} customSite Пользовательский сайт
      Необязательный параметр. Пользовательское значение сайта, в том виде в котором его воспринимает сервис приема SMS. Если этот параметр указан, то он будет использован вместо параметра "Сайт" и отправлен на сервис без предварительной обработки.
      Примеры :
      wa - WhatsApp
      tg - Telegram
      go - Google
      Пустая строка - Использовать значение из параметра "Сайт".
      @param {string} customCountry Пользовательская страна
      Необязательный параметр. Пользовательское значение страны, в том виде в котором его воспринимает сервис приема SMS. Если этот параметр указан, то он будет использован вместо параметра "Страна" и отправлен на сервис без предварительной обработки.
      Примеры :
      0 - Российская Федерация
      1 - Украина
      187 - США
      Пустая строка - Использовать значение из параметра "Страна".
      @param {string} serverUrl Url сервера
      Необязательный параметр. Url сервера сервиса приема SMS. Используйте данный параметр для указания url сервера, если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису.
      Примеры :
      https://sms.org
      http://receive-sms.com
      http://127.0.0.1:8888
      Пустая строка - Использовать url по умолчанию, например, https://sms-activate.ru для sms-activate.ru.
      @param {number} timeout Максимальное время выполнения задания (мс)
      @returns количество доступных номеров
      Примеры :
      137
      549
      1596
      0 - Указанный сервисе на данный момент не имеет номеров с указанными параметрами
      */
      function BAS_phone_get_numbers_count() {
      const args = _arguments()
      _call_function(_SMS.getNumbersCount, {
      service: args.service,
      apiKey: args.apiKey,
      site: args.site,
      country: args.country,
      customSite: args.customSite,
      customCountry: args.customCountry,
      serverUrl: args.serverUrl,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Получить список сайтов (BAS-функция)
      * Получить список сайтов сервиса приема SMS.
      * Это действие вернет список, состоящий из объектов, содержащих идентификаторы и имена сайтов поддерживаемых указанным сервисом приема SMS. Идентификатор сайта содержится в id свойстве объекта, а име в свойстве name.
      * Пример: [{"id":"aol","name":"Aol.com"},{"id":"gmail","name":"Google"}]
      * Полученный список можно обработать с помощью действий из модуля "JSON".
      * Чтобы получить имя первого сайта, используйте JPath запрос $.[0].name в действии "Получить значение" из модуля "JSON".
      * Чтобы получить список имен всех сайтов, используйте JPath запрос $.[*].name в действии "Получить все значения" из модуля "JSON".
      * Чтобы получить идентификатор первого сайта, используйте JPath запрос $.[0].id в действии "Получить значение" из модуля "JSON".
      * Чтобы получить идентификатор сайта с именем из переменной VAR_NAME, используйте JPath запрос $.[?(@.name=="VAR_NAME")].id в действии "Получить значение" из модуля "JSON".
      * Полученный идентификатор сайта можно использовать в параметре "Пользовательский сайт" действия "Получить количество доступных номеров" и "Получить номер телефона".
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, то вы можете указать его url сервера в соответствующий параметр находящийся в дополнительных настройках.
      * Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} service Сервис
      Сервис приема SMS, для которого нужно получить список сайтов.
      Примеры :
      sms-reg.com - https://sms-reg.com
      sms-acktiwator.ru - https://sms-acktiwator.ru
      sms-man.ru - https://sms-man.ru
      @param {string} apiKey API ключ
      API ключ сервиса приема SMS. Ключ для сервиса выбранного в параметре "Сервис". В зависимости от сервиса, вы можете получить его в личном кабинете или настройках сервиса.
      Примеры :
      8b1a9953c4611296a827abf8c47804d7
      79916U5718g2266a7bff7fad356c6cb280b3ea
      f4d559ba78aa6c4701c1995ae9977c03
      @param {string} serverUrl Url сервера
      Необязательный параметр. Url сервера сервиса приема SMS. Используйте данный параметр для указания url сервера, если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису.
      Примеры :
      https://sms.org
      http://receive-sms.com
      http://127.0.0.1:8888
      Пустая строка - Использовать url по умолчанию, например, https://sms-activate.ru для sms-activate.ru.
      @param {number} timeout Максимальное время выполнения задания (мс)
      @returns список сайтов
      Примеры :
      [{"id":"aol","name":"Aol.com"},{"id":"gmail","name":"Google"}]
      */
      function BAS_phone_get_sites() {
      const args = _arguments()
      _call_function(_SMS.getSites, {
      service: args.service,
      apiKey: args.apiKey,
      serverUrl: args.serverUrl,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Получить список стран (BAS-функция)
      * Получить список стран сервиса приема SMS.
      * Это действие вернет список, состоящий из объектов, содержащих идентификаторы и названия стран поддерживаемых указанным сервисом приема SMS. Идентификатор страны содержится в id свойстве объекта, название страны на Русском в свойстве name, а название страны на Английском в свойстве name_en.
      * Пример: [{"id":"0","name":"Россия","name_en":"Russia"},{"id":"1","name":"Украина","name_en":"Ukraine"}]
      * Некоторые сервисы могут не иметь названия страны на Английском или в свойстве name иметь название на Английском и вообще не иметь названия на Русском.
      * Полученный список можно обработать с помощью действий из модуля "JSON".
      * Чтобы получить Русское название первой страны, используйте JPath запрос $.[0].name в действии "Получить значение" из модуля "JSON".
      * Чтобы получить Английское название первой страны, используйте JPath запрос $.[0].name_en в действии "Получить значение" из модуля "JSON".
      * Чтобы получить список Русских названий всех стран, используйте JPath запрос $.[*].name в действии "Получить все значения" из модуля "JSON".
      * Чтобы получить список Английское названий всех стран, используйте JPath запрос $.[*].name_en в действии "Получить все значения" из модуля "JSON".
      * Чтобы получить идентификатор первой страны, используйте JPath запрос $.[0].id в действии "Получить значение" из модуля "JSON".
      * Чтобы получить идентификатор страны с Русским названием из переменной VAR_NAME, используйте JPath запрос $.[?(@.name=="VAR_NAME")].id в действии "Получить значение" из модуля "JSON".
      * Чтобы получить идентификатор страны с Английским названием из переменной VAR_NAME, используйте JPath запрос $.[?(@.name_en=="VAR_NAME")].id в действии "Получить значение" из модуля "JSON".
      * Полученный идентификатор страны можно использовать в параметре "Пользовательская страна" действия "Получить количество доступных номеров" и "Получить номер телефона".
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, то вы можете указать его url сервера в соответствующий параметр находящийся в дополнительных настройках.
      * Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки".
      * @param {string} service Сервис
      Сервис приема SMS, для которого нужно получить список стран.
      Примеры :
      sms-activate.ru - https://sms-activate.ru
      sms-acktiwator.ru - https://sms-acktiwator.ru
      sms-man.ru - https://sms-man.ru
      @param {string} apiKey API ключ
      API ключ сервиса приема SMS. Ключ для сервиса выбранного в параметре "Сервис". В зависимости от сервиса, вы можете получить его в личном кабинете или настройках сервиса.
      Примеры :
      8b1a9953c4611296a827abf8c47804d7
      79916U5718g2266a7bff7fad356c6cb280b3ea
      f4d559ba78aa6c4701c1995ae9977c03
      @param {string} serverUrl Url сервера
      Необязательный параметр. Url сервера сервиса приема SMS. Используйте данный параметр для указания url сервера, если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису.
      Примеры :
      https://sms.org
      http://receive-sms.com
      http://127.0.0.1:8888
      Пустая строка - Использовать url по умолчанию, например, https://sms-activate.ru для sms-activate.ru.
      @param {number} timeout Максимальное время выполнения задания (мс)
      @returns список стран
      Примеры :
      [{"id":"0","name":"Россия","name_en":"Russia"},{"id":"1","name":"Украина","name_en":"Ukraine"}]
      */
      function BAS_phone_get_countries() {
      const args = _arguments()
      _call_function(_SMS.getCountries, {
      service: args.service,
      apiKey: args.apiKey,
      serverUrl: args.serverUrl,
      timeout: args.timeout
      })!
      _function_return(_result_function())
      }
      /**
      * Отладка
      * Включить или отключить отладку модуля подтверждения телефона.
      * Если отладка включена, все запросы и их результаты будут выводится в лог.
      * @param {boolean} enable Включить отладку
      Включить отладку модуля подтверждения телефона.
      Примеры :
      true - Включить отладку
      false - Отключить отладку
      */
      function BAS_phone_set_debug(enable) {
      const enable = _function_argument('enable') || enable
      _SMS.setDebug(enable)
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022process_manage\u0022\u007d", 702251188)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQl9Cw0L/Rg9GB0YLQuNGC0Ywg0J/RgNC+0YbQtdGB0YEgKEJBUy3RhNGD0L3QutGG0LjRjylcclxuICog0JLRi9C/0L7Qu9C90LjRgtGMINC40YHQv9C+0LvQvdGP0LXQvNGL0Lkg0YTQsNC50Lsg0LjQu9C4IGJhdGNoINGB0LrRgNC40L/Rgi5cclxuICog0J/QsNGA0LDQvNC10YLRgCAnQmF0Y2gg0YHQutGA0LjQv9GCINC40LvQuCDQv9GD0YLRjCDQuiDQuNGB0L/QvtC70L3Rj9C10LzQvtC80YMg0YTQsNC50LvRgycg0LzQvtC20LXRgiDRgdC+0LTQtdGA0LbQsNGC0Ywg0L/Rg9GC0Ywg0Log0LjRgdC/0L7Qu9C90Y/QtdC80L7QvNGDINGE0LDQudC70YMsINC60L7RgtC+0YDRi9C5INCy0Ysg0YXQvtGC0LjRgtC1INC30LDQv9GD0YHRgtC40YLRjCwg0LjQu9C4IGJhdGNoINGB0LrRgNC40L/Rgi5cclxuICogQmF0Y2gg0YHQutGA0LjQv9GCINC80L7QttC10YIg0LjQvNC10YLRjCDQvdC10YHQutC+0LvRjNC60L4g0YHRgtGA0L7Quiwg0LzQvtCz0YPRgiDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0YzRgdGPINGD0YLQuNC70LjRgtGLIHdpbmRvd3Mg0Lgg0LfQsNC/0YPRgdC60LDRgtGM0YHRjyDQtNGA0YPQs9C40LUg0LjRgdC/0L7Qu9C90Y/QtdC80YvQtSDRhNCw0LnQu9GLLlxyXG4gKiDQoNCw0LHQvtGH0LDRjyDQv9Cw0L/QutCwINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIC0g0Y3RgtC+INC/0YPRgtGMLCDQs9C00LUg0YPRgdGC0LDQvdC+0LLQu9C10L0gQkFTLCDQstGLINC80L7QttC10YLQtSDQuNC30LzQtdC90LjRgtGMINC10LPQviDRgSDQv9C+0LzQvtGJ0YzRjiDQv9Cw0YDQsNC80LXRgtGA0LAgJ9Cg0LDQsdC+0YfQsNGPINC/0LDQv9C60LAnINC40LvQuCDQt9Cw0L/Rg9GB0YLQuNGC0Ywg0LrQvtC80LDQvdC00YMgJ2NkJyDQstC90YPRgtGA0LggYmF0Y2gg0YHQutGA0LjQv9GC0LAuXHJcbiAqINCg0LXQt9GD0LvRjNGC0LDRgiDQsdGD0LTQtdGCINC30LDQv9C40YHQsNC9INCyINC/0LXRgNC10LzQtdC90L3Ri9C1IFBST0NFU1NfU1RBTkRBUlRfT1VUUFVUINC4IFBST0NFU1NfRVJST1JfT1VUUFVULCDQvNC+0LbQvdC+INC40YHQv9C+0LvRjNC30L7QstCw0YLRjCDRgNC10LPRg9C70Y/RgNC90YvQtSDQstGL0YDQsNC20LXQvdC40Y8g0LTQu9GPINC40LfQstC70LXRh9C10L3QuNGPINC30L3QsNGH0LXQvdC40Lkg0LjQtyDRjdGC0LjRhSDQv9C10YDQtdC80LXQvdC90YvRhS5cclxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCBCYXRjaCDRgdC60YDQuNC/0YIg0LjQu9C4INC/0YPRgtGMINC6INC40YHQv9C+0LvQvdGP0LXQvNC+0LzRgyDRhNCw0LnQu9GDXHJcbiAg0K3RgtC+INC/0L7Qu9C1INC00L7Qu9C20L3QviDRgdC+0LTQtdGA0LbQsNGC0Ywg0LvQuNCx0L4g0L/Rg9GC0Ywg0Log0LjRgdC/0L7Qu9C90Y/QtdC80L7QvNGDINGE0LDQudC70YMsINC60L7RgtC+0YDRi9C5INCy0Ysg0YXQvtGC0LjRgtC1INC30LDQv9GD0YHRgtC40YLRjCwg0LvQuNCx0L4gYmF0Y2gg0YHQutGA0LjQv9GCLiBCYXRjaCDQvNC+0LbQtdGCINGB0L7QtNC10YDQttCw0YLRjCDQu9GO0LHRi9C1INGB0LvRg9C20LXQsdC90YvQtSDQv9GA0L7Qs9GA0LDQvNC80YsgV2luZG93cywg0YLQsNC60LjQtSDQutCw0LogY2QsIGRpciwgZWNobyDQuCDRgi4g0LQuINC4INC80L7QttC10YIg0LjQvNC10YLRjCDQvdC10YHQutC+0LvRjNC60L4g0YHRgtGA0L7QulxyXG4gINCf0YDQuNC80LXRgNGLIDpcclxuICBjOlxccGF0aFxcdG9cXGV4ZWN1dGFibGUuZXhlIC0g0JfQsNC/0YPRgdGC0LjRgtGMINC40YHQv9C+0LvQvdGP0LXQvNGL0Lkg0YTQsNC50LtcclxuICBjOlxccGF0aFxcdG9cXGV4ZWN1dGFibGUgMS5leGVcclxuICBjOlxccGF0aFxcdG9cXGV4ZWN1dGFibGUgMi5leGVcclxuICAtINCX0LDQv9GD0YHQuiDQvdC10YHQutC+0LvRjNC60LjRhSDQuNGB0L/QvtC70L3Rj9C10LzRi9GFINGE0LDQudC70L7QsiDQvtC00LjQvSDQt9CwINC00YDRg9Cz0LjQvFxyXG4gIGM6XFxwYXRoXFx0b1xcZXhlY3V0YWJsZS5leGUgLS1hcmd1bWVudDEgLS1hcmd1bWVudDIgLSDQl9Cw0L/Rg9GB0Log0LjRgdC/0L7Qu9C90Y/QtdC80L7Qs9C+INGE0LDQudC70LAg0YEg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCDQutC+0LzQsNC90LTQvdC+0Lkg0YHRgtGA0L7QutC4XHJcbiAgd2hlcmUgY21kIC0g0J3QsNC50YLQuCDQv9GD0YLRjCDQuiBjbWQuZXhlXHJcbiAgZWNobyBcIk1lc3NhZ2VcIiAtINCe0YLQvtCx0YDQsNC30LjRgtC1INGB0L7QvtCx0YnQtdC90LjQtSwg0L7QvdC+INCx0YPQtNC10YIg0LTQvtGB0YLRg9C/0L3QviDQsiDQv9C10YDQtdC80LXQvdC90L7QuSBQUk9DRVNTX1NUQU5EQVJUX09VVFBVVC5cclxuICBjZCBjOlxcZG93bmxvYWRcclxuICBkaXJcclxuICAtINCf0L7QutCw0LfQsNGC0Ywg0YHQvtC00LXRgNC20LjQvNC+0LUg0L/QsNC/0LrQuCDQt9Cw0LPRgNGD0LfQutC4XHJcbiAgRk9SICUlRyBJTiAoYSxiLGMsZCxlLGYsZyxoLGksaixrLGwsbSxuLG8scCxxLHIscyx0LHUsdix3LHgseSx6KSBETyAoZWNobyAlJUcpIC0g0JLRi9Cy0L7QtCDQstGB0LXRhSDQsdGD0LrQsiDQsiDQu9C+0LNcclxuXHJcbiAgQHBhcmFtIHtzdHJpbmd9IGRpciDQoNCw0LHQvtGH0LDRjyDQv9Cw0L/QutCwXHJcbiAg0KDQsNCx0L7Rh9Cw0Y8g0L/QsNC/0LrQsCwg0LIg0LrQvtGC0L7RgNC+0Lkg0LHRg9C00LXRgiDQstGL0L/QvtC70L3QtdC9IGJhdGNoLiDQntGB0YLQsNCy0YzRgtC1INC/0YPRgdGC0YvQvCDQtNC70Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LIg0L/QsNC/0LrQtSwg0LPQtNC1INC90LDRhdC+0LTQuNGC0YHRjyDRhNCw0LnQuyBCcm93c2VyQXV0b21hdGlvblN0dWRpby5leGUuXHJcbiAg0J/RgNC40LzQtdGA0YsgOlxyXG4gIGM6L2RldlxyXG4gIGM6XFxkZXZcclxuICDQn9GD0YHRgtCw0Y8g0YHRgtGA0L7QutCwIC0g0JfQsNC/0YPRgdGC0LjRgtGMINCyINC/0LDQv9C60LUgQkFTXHJcblxyXG4gIEByZXR1cm5zIE9iamVjdCB7XHJcbiAgICBwcm9jZXNzX3N0YW5kYXJ0X291dHB1dDogc3RyaW5nIC0g0KHRgtCw0L3QtNCw0YDRgtC90YvQuSDQstGL0LLQvtC0INC/0YDQvtGG0LXRgdGB0LBcclxuICAgIHByb2Nlc3NfZXJyb3Jfb3V0cHV0OiBzdHJpbmcgLSDQktGL0LLQvtC0INC/0YDQvtGG0LXRgdGB0LAg0YEg0L7RiNC40LHQutCw0LzQuFxyXG4gIH1cclxuICovXHJcbmZ1bmN0aW9uIEJBU19wcm9jZXNzX3J1bigpIHtcclxuICBjb25zdCBhcmdzID0gX2FyZ3VtZW50cygpXHJcbiAgY29uc3Qgc2NyaXB0ID0gYXJncy5zY3JpcHRcclxuICBjb25zdCBkaXIgPSBhcmdzLmRpclxyXG4gIFJBTkRPTV9GSUxFID0gXCJ0ZW1wX1wiICsgcmFuZCgpICsgXCIuYmF0XCJcclxuICBuYXRpdmUoXCJmaWxlc3lzdGVtXCIsIFwid3JpdGVmaWxlXCIsIEpTT04uc3RyaW5naWZ5KHtwYXRoOiBSQU5ET01fRklMRSx2YWx1ZTogXCJjaGNwIDY1MDAxXFxyXFxuXCIgKyAoKGRpci5sZW5ndGg+MCkgPyAoXCJjZCBcIiArIGRpciArIFwiXFxyXFxuXCIpIDogXCJcIiApICsgKChzY3JpcHQpLnJlcGxhY2UoL1xccj9cXG4vZywgXCJcXHJcXG5cIikpLGJhc2U2NDpmYWxzZSxhcHBlbmQ6ZmFsc2V9KSlcclxuICBuYXRpdmVfYXN5bmMoXCJwcm9jZXNzbWFuYWdlclwiLCBcInN0YXJ0XCIsIEpTT04uc3RyaW5naWZ5KHtsb2NhdGlvbjogUkFORE9NX0ZJTEUsIHdvcmtpbmdfZm9sZGVyOiBcIlwiLCB3YWl0ZmluaXNoOiB0cnVlLCBhcmd1bWVudHM6IFwiXCIsIHZlcnNpb246IDJ9KSkhXHJcbiAgdHJ5XHJcbiAge1xyXG4gIHZhciBzcGxpdCA9IF9yZXN1bHQoKS5zcGxpdChcIixcIilcclxuICBWQVJfUFJPQ0VTU19TVEFOREFSVF9PVVRQVVQgPSBiYXNlNjRfZGVjb2RlKHNwbGl0WzBdKVxyXG4gIFZBUl9QUk9DRVNTX0VSUk9SX09VVFBVVCA9IGJhc2U2NF9kZWNvZGUoc3BsaXRbMV0pXHJcbiAgfWNhdGNoKGUpXHJcbiAge1xyXG4gIFZBUl9QUk9DRVNTX1NUQU5EQVJUX09VVFBVVCA9IF9yZXN1bHQoKVxyXG4gIH1cclxuICBzbGVlcCgxMDAwKSFcclxuICBuYXRpdmUoXCJmaWxlc3lzdGVtXCIsIFwicmVtb3ZlZmlsZVwiLCBSQU5ET01fRklMRSlcclxuICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICBwcm9jZXNzX3N0YW5kYXJ0X291dHB1dDogVkFSX1BST0NFU1NfU1RBTkRBUlRfT1VUUFVULFxyXG4gICAgcHJvY2Vzc19lcnJvcl9vdXRwdXQ6IFZBUl9QUk9DRVNTX0VSUk9SX09VVFBVVFxyXG4gIH1cclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn0iLCJjbGFzcyI6ImV4cHJlc3Npb24ifV19*/
      /**
      * Запустить Процесс (BAS-функция)
      * Выполнить исполняемый файл или batch скрипт.
      * Параметр 'Batch скрипт или путь к исполняемому файлу' может содержать путь к исполняемому файлу, который вы хотите запустить, или batch скрипт.
      * Batch скрипт может иметь несколько строк, могут использоваться утилиты windows и запускаться другие исполняемые файлы.
      * Рабочая папка по умолчанию - это путь, где установлен BAS, вы можете изменить его с помощью параметра 'Рабочая папка' или запустить команду 'cd' внутри batch скрипта.
      * Результат будет записан в переменные PROCESS_STANDART_OUTPUT и PROCESS_ERROR_OUTPUT, можно использовать регулярные выражения для извлечения значений из этих переменных.
      * @param {string} script Batch скрипт или путь к исполняемому файлу
      Это поле должно содержать либо путь к исполняемому файлу, который вы хотите запустить, либо batch скрипт. Batch может содержать любые служебные программы Windows, такие как cd, dir, echo и т. д. и может иметь несколько строк
      Примеры :
      c:\path\to\executable.exe - Запустить исполняемый файл
      c:\path\to\executable 1.exe
      c:\path\to\executable 2.exe
      - Запуск нескольких исполняемых файлов один за другим
      c:\path\to\executable.exe --argument1 --argument2 - Запуск исполняемого файла с параметрами командной строки
      where cmd - Найти путь к cmd.exe
      echo "Message" - Отобразите сообщение, оно будет доступно в переменной PROCESS_STANDART_OUTPUT.
      cd c:\download
      dir
      - Показать содержимое папки загрузки
      FOR %%G IN (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) DO (echo %%G) - Вывод всех букв в лог
      @param {string} dir Рабочая папка
      Рабочая папка, в которой будет выполнен batch. Оставьте пустым для выполнения в папке, где находится файл BrowserAutomationStudio.exe.
      Примеры :
      c:/dev
      c:\dev
      Пустая строка - Запустить в папке BAS
      @returns Object {
      process_standart_output: string - Стандартный вывод процесса
      process_error_output: string - Вывод процесса с ошибками
      }
      */
      function BAS_process_run() {
      const args = _arguments()
      const script = args.script
      const dir = args.dir
      RANDOM_FILE = "temp_" + rand() + ".bat"
      native("filesystem", "writefile", JSON.stringify({path: RANDOM_FILE,value: "chcp 65001\r\n" + ((dir.length>0) ? ("cd " + dir + "\r\n") : "" ) + ((script).replace(/\r?\n/g, "\r\n")),base64:false,append:false}))
      native_async("processmanager", "start", JSON.stringify({location: RANDOM_FILE, working_folder: "", waitfinish: true, arguments: "", version: 2}))!
      try
      {
      var split = _result().split(",")
      VAR_PROCESS_STANDART_OUTPUT = base64_decode(split[0])
      VAR_PROCESS_ERROR_OUTPUT = base64_decode(split[1])
      }catch(e)
      {
      VAR_PROCESS_STANDART_OUTPUT = _result()
      }
      sleep(1000)!
      native("filesystem", "removefile", RANDOM_FILE)
      const result = {
      process_standart_output: VAR_PROCESS_STANDART_OUTPUT,
      process_error_output: VAR_PROCESS_ERROR_OUTPUT
      }
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022profile\u0022\u007d", 109573388)!
      /*Dat:*/
      /**
      * Создать или переключиться на постоянный профиль (BAS-функция)
      * Использовать указанную папку в качестве места для хранения файлов cookie, кеша, localstorage и т. д.
      * Если заданная папка не существует, она будет создана.
      * Если указанная папка уже существует, браузер будет загружать из нее данные профиля.
      * Для переключения профиля требуется перезапуск браузера, поэтому это действие может перезапустить браузер, если он уже открыт. Перезапуск браузера также сбросит все настройки.
      * Вы можете реализовать автологин с помощью этого действием, сначала вам нужно задать папку профиля, затем залогиниться на сайте, после чего вы можете перезапустить БАС и снова указать ту же папку. Браузер загрузит все данные из предыдущего сеанса, и вам не нужно будет логиниться второй раз.
      * @param {string} path Путь к папке профиля
      Строка с путем к папке профиля. Тип разделителя не имеет значения. Если папка не существует, она будет создана. Если папка уже существует, BAS будет использовать ее в качестве профиля и восстановит все данные из нее, такие как cookie, localstorage и т. д.
      Примеры :
      c:/path/to/profile
      c:\path\to\profile
      @param {boolean} always_upload_fingerprint Всегда загружать отпечаток из папки с профилем
      В случае, если папка профиля уже существует и имеет данные отпечатка, эта настройка говорит BAS применять отпечаток использованный для данного профиля последним.
      @param {boolean} always_upload_proxy Всегда загружать прокси из папки с профилем
      В случае, если папка профиля уже существует и имеет данные прокси, эта настройка говорит BAS применять прокси использованный для данного профиля последним.
      */
      function BAS_create_or_switch_permanent_profile() {
      const args = _arguments()
      ProfilePath = args.path;
      _do(function(){
      if(ProfilePath == _get_profile())
      _break();
      if(_iterator() > 30)
      fail(tr("Timeout during switching to profile ") + ProfilePath);
      native("filesystem", "removefile", ProfilePath + "/lockfile");
      if(!JSON.parse(native("filesystem", "fileinfo", ProfilePath + "/lockfile"))["exists"])
      _break();
      sleep(1000)!
      })!
      var Params = {};
      Params["ProfilePath"] = ProfilePath
      Params["LoadFingerprintFromProfileFolder"] = args.always_upload_fingerprint
      _settings(Params)!
      _if(args.always_upload_fingerprint, function(){
      FINGERPRINT_JSON = native("filesystem", "readfile", JSON.stringify({value: args.path + "/fingerprint.json",base64:false,from:0,to:0}))
      _if(FINGERPRINT_JSON.length > 0, function(){
      FINGERPRINT_JSON = JSON.parse(FINGERPRINT_JSON)
      _call(BrowserAutomationStudio_ApplyFingerprint,[FINGERPRINT_JSON["fingerprint"],FINGERPRINT_JSON["canvas"],FINGERPRINT_JSON["webgl"],FINGERPRINT_JSON["audio"],FINGERPRINT_JSON["battery"],FINGERPRINT_JSON["rectangles"],FINGERPRINT_JSON["perfectcanvas"],FINGERPRINT_JSON["sensor"]])!
      sleep(1000)!
      })!
      FINGERPRINT_JSON = native("filesystem", "readfile", JSON.stringify({value: args.path + "/performance.json",base64:false,from:0,to:0}))
      _if(FINGERPRINT_JSON.length > 0, function(){
      FINGERPRINT_JSON = JSON.parse(FINGERPRINT_JSON)
      _call(BrowserAutomationStudio_PerformanceFingerprint,FINGERPRINT_JSON)!
      })!
      })!
      _if(args.always_upload_proxy, function(){
      var is_error = false;
      try
      {
      _ARG = JSON.parse(native("filesystem", "readfile", JSON.stringify({value: args.path + "/proxy.txt",base64:false,from:0,to:0})))
      _ARG["Port"] = parseInt(_ARG["Port"])
      }catch(e)
      {
      is_error = true
      }
      _if(!is_error, function(){
      set_proxy(_ARG["server"], _ARG["Port"], _ARG["IsHttp"], _ARG["name"], _ARG["password"])!
      sleep(1000)!
      set_proxy_extended(true, true, true, true, true)!
      sleep(1000)!
      })!
      })!
      }
      /**
      * Переключиться на временный профиль (BAS-функция)
      * По умолчанию браузер BAS сохраняет все данные профиля во временной папке. Это действие переключится на новый временный профиль.
      * Для переключения профиля требуется перезапуск браузера, поэтому это действие может перезапустить браузер, если он уже открыт. Перезапуск браузера также сбросит все настройки.
      * В случае использования временного профиля будет создан новый временный профиль.
      */
      function BAS_switch_to_temporary_profile() {
      const Params = {};
      Params["ProfilePath"] = "<Incognito>"
      _settings(Params)!
      }
      /**
      * Копировать профиль в другую папку
      * Копировать текущий профиль в другую папку.
      * Это действие не закрывает браузер и не изменять путь к текущему профилю.
      * Лучшее место для использования этого действия - конец работы потока, если вы хотите сохранить свои cookie и не заходить на сайт второй раз когда позже запускаете BAS.
      * @param {string} path Путь к папке профиля
      Строка с путем к профилю. Тип разделителя не имеет значения. Здесь лучше использовать пустую папку или путь к несуществующей папке(она будет создана).
      Примеры :
      c:/path/to/profile
      c:\path\to\profile
      */
      function BAS_profile_copy(path) {
      const path = _function_argument('path') || path
      const ProfilePath = _get_profile()
      native("filesystem", "copyfile", JSON.stringify({
      path: ProfilePath,
      dest: path
      }))
      }
      /**
      * Удалить профиль (BAS-функция)
      * Удалить профиль
      * Вы можете удалить текущий профиль, если запустить это действие с пустой строкой. В этом случае браузер будет остановлен. После удаления текущего профиля, будет использован новый временный профиль.
      * Это действие остановит браузер, только если вы будете удалять текущий профиль.
      * @param {string} path Путь к папке профиля
      Тип разделителя значения не имеет.
      Примеры :
      c:/path/to/profile
      c:\path\to\profile
      Пустая строка - Удалить текущий профиль
      */
      function BAS_delete_profile() {
      const args = _arguments()
      ProfilePath = args.path
      if(ProfilePath == "")
      ProfilePath = _get_profile()
      _if(ProfilePath == _get_profile(), function(){
      var Params = {};
      Params["ProfilePath"] = "<Incognito>"
      _settings(Params)!
      })!
      _do(function(){
      if(_iterator() > 30)
      fail(tr("Timeout during deleting profile ") + ProfilePath);
      native("filesystem", "removefile", ProfilePath + "/lockfile");
      if(!JSON.parse(native("filesystem", "fileinfo", ProfilePath + "/lockfile"))["exists"])
      _break();
      sleep(1000)!
      })!
      native("filesystem", "removefile", ProfilePath)
      }
      /**
      * Получить информацию о текущем профиле
      * Получить информацию о текущем профиле.
      * Это действие не создает браузер, завершается мгновенно и может быть использовано из любого места скрипта.
      * @returns Object {
      *  profile_id: string - Путь к профилю
      *  Абсолютный путь к папке профиля
      *
      *  has_proxy: boolean - Содержит прокси
      Булевое значение(true или false), содежит ли текущий профиль прокси. Его можно применить автоматически с помощью действия 'Создать или переключиться на постоянный профиль'.
      has_fingerprint: boolean - Содержит отпечаток
      Булевое значение(true или false), содежит ли текущий профиль отпечаток. Его можно применить автоматически с помощью действия 'Создать или переключиться на постоянный профиль'.
      * }
      */
      function BAS_current_profile_info() {
      const profile_id = _get_profile()
      const has_proxy = _get_profile().length > 0 && JSON.parse(native("filesystem", "fileinfo", _get_profile() + "/proxy.txt"))["exists"]
      const has_fingerprint = _get_profile().length > 0 && JSON.parse(native("filesystem", "fileinfo", _get_profile() + "/fingerprint.json"))["exists"]
      const result = {
      profile_id: profile_id,
      has_proxy: has_proxy,
      has_fingerprint: has_fingerprint
      }
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022regular_expressions\u0022\u007d", 605114662)!
      /*Dat:*/
      /**
      * Первое вхождение
      * Применить регулярное выражение, получить первый соответствующий ему фрагмент текста, извлечь группы.
      * Регулярное выражение - удобный механизм для обработки строк. Он помогает искать строки, разделять строку на части и т. д. ( руководство, справка https://www.rexegg.com/regex-quickstart.html).
      * Вы можете представить регулярное выражение как какую-либо маску или шаблон, которой заданная строка должна соответствовать. Пример работы регулярного выражения можно описать таким образом: 'Найти в тексте последовательность букв, за которой следует символ @, за которым следует любая последовательность букв, либо точка'. Преобразуя это описание в регулярное выражени получим \w+@[a-zA-Z\.]+ это простое выражение для поиска почты в заданном тексте.
      * Переменная, указанная в параметре 'Найденный текст целиком', будет заполнена текстом найденным с помощью регулярного выражения.
      * Если вы хотите извлечь только часть всего найденного текста, вам следует использовать группы. Группы создаются путем добавления скобок в регулярное выражение. Например, если вы хотите обработать следующую строку Your user name is: test и получить строку test, вы можете использовать следующее регулярное выражение Your user name is: ([^\s]+)
      * Можно извлечь сразу несколько групп. Если строка -John 100- и регулярное выражение (\w+) (\w+), тогда переменная ALL_MATCH будет равна John 100, GROUP1 будет равна John и GROUP2 будет равна 100.
      * Обработка html намного проще и быстрее с помощью модуля 'Xpath'.
      * Это действие ищет только первую строку, которая соответствует регулярному выражению, например, оно может искать первое число в тексте. Если вы хотите найти несколько строк, которые соответствуют регулярному выражению, то есть всем числа в тексте, вам лучше использовать действие 'Извлечь все данные'.
      * Конструктор Регулярных Выражений https://bablosoft.github.io/RegexpConstructor/ может помочь вам создать регулярное выражение.
      * @param {string} text Строка Для Применения Регулярного Выражения
      Это строка, к которой применяется регулярное выражение.
      * @param {string} regexp Регулярное Выражение
      Регулярное выражение. Может содержать группы, все извлеченные группы будут помещены в переменные. Регулярные выражения применяются в многострочном режиме, если вы хотите, извлечь любой символ, включая перенос строки, используйте следующее выражение [\S\s]+. Точка .+ извлекает любой символ, кроме переноса строки.
      Примеры :
      \d+ - Любая последовательность цифр
      \w+ - Любая последовательность букв
      \s+ - Любое количество пробелов, символов табуляции или переносов строк
      .+ - Любое количество любых символов, кроме переноса строки
      [\S\s]+ - Любое количество любых символов, включая перенос строки
      [a-z]+ - Любая последовательность символов в нижнем регистре
      [0-9]+ - Любая последовательность цифр
      [^0-9]+ - Любая последовательность любых символов исключая цифры
      Your user name is: [^\s]+ - Строка 'Your user name is: ', за которой следует любая последовательность символов, которые не являются пробелом.
      Your user name is: ([^\s]+) - Сохранить имя в переменной GROUP1 используя группы
      href="([^"]+)" - Извлечь ссылку из html тега a
      * @returns Object {
      *  group1: string, group2: string, group3: string - Извлеченные группы
      Список имен переменных, разделенных запятой. Каждая переменная будет содержать одну извлеченную группу. Чтобы задать группу в регулярном выражении, используйте скобки. По умолчанию первая группа будет помещена в переменную GROUP1, вторая - в GROUP2 и третья в GROUP3
      all_match: string - Найденный текст целиком
      Весь текст извлеченный с помощью регулярного выражения.
      * }
      */
      function BAS_regexp_first(text, regexp) {
      const text = _function_argument('text') || text
      const regexp = _function_argument('regexp') || regexp
      const regexp_result = native(
      "regexp",
      "first",
      JSON.stringify({ text: text, regexp: regexp })
      )
      if (regexp_result.length == 0) regexp_result = []
      else regexp_result = JSON.parse(regexp_result)
      VAR_ALL_MATCH = regexp_result.pop()
      if (typeof VAR_ALL_MATCH == "undefined" || !VAR_ALL_MATCH) VAR_ALL_MATCH = ""
      VAR_GROUP1 = regexp_result[0]
      if (typeof VAR_GROUP1 == "undefined" || !VAR_GROUP1) VAR_GROUP1 = ""
      VAR_GROUP2 = regexp_result[1]
      if (typeof VAR_GROUP2 == "undefined" || !VAR_GROUP2) VAR_GROUP2 = ""
      VAR_GROUP3 = regexp_result[2]
      if (typeof VAR_GROUP3 == "undefined" || !VAR_GROUP3) VAR_GROUP3 = ""
      if (regexp_result.length == 0) {
      VAR_GROUP1 = VAR_ALL_MATCH
      }
      const result = {
      all_match: VAR_ALL_MATCH,
      group1: VAR_GROUP1,
      group2: VAR_GROUP2,
      group3: VAR_GROUP3,
      }
      _function_return(result)
      return result
      }
      /**
      * Извлечь все данные
      * Выполнить регулярное выражение, сохранить все извлеченные строки в список.
      * Регулярное выражение - удобный механизм для обработки строк. Он помогает искать строки, разделять строку на части и т. д. ( руководство, справка https://www.rexegg.com/regex-quickstart.html).
      * Вы можете представить регулярное выражение как какую-либо маску или шаблон, которой заданная строка должна соответствовать. Пример работы регулярного выражения можно описать таким образом: 'Найти в тексте последовательность букв, за которой следует символ @, за которым следует любая последовательность букв, либо точка'. Преобразуя это описание в регулярное выражени получим \w+@[a-zA-Z\.]+ это простое выражение для поиска почты в заданном тексте.
      * Переменная, указанная в параметре 'Список извлеченных строк', будет заполнена списком, который содержит каждую найденную строку.
      * Например, если строка abc 123 xyz 456 и регулярное выражение \d+ то регулярное выражение будет извлекать все числа, найденные в тексте, и в результате список будет ["123", "456"]
      * Каждый элемент списка, который возвращает это действие, содержит совпадение целиком, если вы хотите получить только часть, поместите его внутрь группы result Например, (?P<result>\d+).
      * Если строка -John 100-, -Jack 200- и регулярное выражение (\w+) (?P<result>\d+), тогда результат будет содержать 2 числа. Если регулярное выражение (?P<result>\w+) (\d+), тогда результат будет содержать 2 имени.
      * Обработка html намного проще и быстрее с помощью модуля 'Xpath'.
      * Это действие выполняет поиск всех результатов, соответствующих регулярному выражению, например, поиск всех чисел в тексте. Если вы хотите найти только первое совпадение, которое соответствует регулярному выражению, например, найти первое число, вы должны использовать действие 'Первое вхождение'.
      * Конструктор Регулярных Выражений https://bablosoft.github.io/RegexpConstructor/ может помочь вам создать регулярное выражение.
      *
      * @param {string} text Строка Для Применения Регулярного Выражения
      Это строка, к которой применяется регулярное выражение.
      * @param {string} regexp Регулярное Выражение
      Регулярное выражение. Регулярные выражения применяются в многострочном режиме, если вы хотите, извлечь любой символ, включая перенос строки, используйте следующее выражение [\S\s]+. Точка .+ извлекает любой символ, кроме переноса строки.
      Примеры :
      \d+ - Любая последовательность цифр
      \w+ - Любая последовательность букв
      \s+ - Любое количество пробелов, символов табуляции или переносов строк
      .+ - Любое количество любых символов, кроме переноса строки
      [\S\s]+ - Любое количество любых символов, включая перенос строки
      [a-z]+ - Любая последовательность символов в нижнем регистре
      [0-9]+ - Любая последовательность цифр
      [^0-9]+ - Любая последовательность любых символов исключая цифры
      Your user name is: [^\s]+ - Строка 'Your user name is: ', за которой следует любая последовательность символов, которые не являются пробелом.
      Your user name is: ([^\s]+) - Сохранить имя в переменной GROUP1 используя группы
      href="([^"]+)" - Извлечь ссылку из html тега a
      * @returns Список извлеченных строк
      Эта переменная будет содержать список со всеми строками подходящими под регулярное выражение. Если группа с именем 'result' присутствует в регулярном выражении, тогда список будет содержать содержимое групп 'result', а не совпадения целиком. Смотрите описание текущего действия чтобы увидеть примеры.
      */
      function BAS_regexp_scan(text, regexp) {
      const text = _function_argument('text') || text
      const regexp = _function_argument('regexp') || regexp
      VAR_SCAN_RESULT_LIST = native(
      "regexp",
      "scan",
      JSON.stringify({ text: "str", regexp: "regexp" })
      )
      if (VAR_SCAN_RESULT_LIST.length == 0) VAR_SCAN_RESULT_LIST = []
      else VAR_SCAN_RESULT_LIST = JSON.parse(VAR_SCAN_RESULT_LIST)
      const result = VAR_SCAN_RESULT_LIST
      _function_return(result)
      return result
      }
      /**
      * Подходит ли строка под регулярное выражение
      * Проверить, соответствует ли строка регулярному выражению, вернуть результат в переменную.
      * Регулярное выражение - удобный механизм для обработки строк. Он помогает искать строки, разделять строку на части и т. д. ( руководство, справка https://www.rexegg.com/regex-quickstart.html).
      * Вы можете представить регулярное выражение как какую-либо маску или шаблон, которой заданная строка должна соответствовать. Пример работы регулярного выражения можно описать таким образом: 'Найти в тексте последовательность букв, за которой следует символ @, за которым следует любая последовательность букв, либо точка'. Преобразуя это описание в регулярное выражени получим \w+@[a-zA-Z\.]+ это простое выражение для поиска почты в заданном тексте.
      * Переменная, указанная в параметре 'Подходит ли строка по рег выражение', будет равна true или false в зависимости от того, соответствует ли строка регулярному выражению.
      * Например, если строка test string и регулярное выражение [a-z] то это действие вернет true, потому что строка содержит буквы в нижнем регистре, но регулярное выражение [A-Z] вернет false, потому что строка не содержит символов в верхнем регистре.
      * Обработка html намного проще и быстрее с помощью модуля 'Xpath'.
      * Конструктор Регулярных Выражений https://bablosoft.github.io/RegexpConstructor/ может помочь вам создать регулярное выражение.
      *
      * @param {string} text Строка Для Применения Регулярного Выражения
      Это строка, к которой применяется регулярное выражение.
      * @param {string} regexp Регулярное Выражение
      Регулярное выражение. Регулярные выражения применяются в многострочном режиме, если вы хотите, извлечь любой символ, включая перенос строки, используйте следующее выражение [\S\s]+. Точка .+ извлекает любой символ, кроме переноса строки.
      Примеры :
      \d+ - Любая последовательность цифр
      \w+ - Любая последовательность букв
      \s+ - Любое количество пробелов, символов табуляции или переносов строк
      .+ - Любое количество любых символов, кроме переноса строки
      [\S\s]+ - Любое количество любых символов, включая перенос строки
      [a-z]+ - Любая последовательность символов в нижнем регистре
      [0-9]+ - Любая последовательность цифр
      [^0-9]+ - Любая последовательность любых символов исключая цифры
      Your user name is: [^\s]+ - Строка 'Your user name is: ', за которой следует любая последовательность символов, которые не являются пробелом.
      Your user name is: ([^\s]+) - Сохранить имя в переменной GROUP1 используя группы
      href="([^"]+)" - Извлечь ссылку из html тега a
      * @returns boolean
      Подходит ли строка по рег выражение
      Эта переменная будет равна true или false в зависимости от того, соответствует ли строка регулярному выражению.
      */
      function BAS_regexp_is_match(text, regexp) {
      const text = _function_argument('text') || text
      const regexp = _function_argument('regexp') || regexp
      const result = Boolean(
      native(
      "regexp",
      "ismatch",
      JSON.stringify({
      text: text,
      regexp: regexp,
      })
      ) === "true"
      )
      _function_return(result)
      return result
      }
      /**
      * Разделить строку
      * Разделить текст регулярным выражением.
      * Регулярное выражение - удобный механизм для обработки строк. Он помогает искать строки, разделять строку на части и т. д. ( руководство, справка https://www.rexegg.com/regex-quickstart.html).
      * Вы можете представить регулярное выражение как какую-либо маску или шаблон, которой заданная строка должна соответствовать. Пример работы регулярного выражения можно описать таким образом: 'Найти в тексте последовательность букв, за которой следует символ @, за которым следует любая последовательность букв, либо точка'. Преобразуя это описание в регулярное выражени получим \w+@[a-zA-Z\.]+ это простое выражение для поиска почты в заданном тексте.
      * Это действие использует регулярное выражение чтобы разделить строку. Например, если строка word1,word2;word3|word4 и регулярное выражение [,;|] тогда результат будет содержать список со всеми словами ["word1", "word2", "word3", "word4"].
      * Предыдущий пример разбивает строку с помощью одного из следующих символов: , или ; или |
      * Регулярное выражение для разделения строки может быть более сложным и содержать больше символов. Этот механизм более мощный, чем разделение на части простой строкой.
      * Переменная, указанная в параметре 'Части строки после разделения', будет заполнена списком, который содержит все части строки после разделения.
      * Обработка html намного проще и быстрее с помощью модуля 'Xpath'.
      * Конструктор Регулярных Выражений https://bablosoft.github.io/RegexpConstructor/ может помочь вам создать регулярное выражение.
      *
      * @param {string} text Строка Для Применения Регулярного Выражения
      Это строка, к которой применяется регулярное выражение.
      * @param {string} regexp Регулярное Выражение Разделитель
      Регулярное выражение. Регулярные выражения применяются в многострочном режиме, если вы хотите, извлечь любой символ, включая перенос строки, используйте следующее выражение [\S\s]+. Точка .+ извлекает любой символ, кроме переноса строки.
      Примеры :
      \d+ - Любая последовательность цифр
      \w+ - Любая последовательность букв
      \s+ - Любое количество пробелов, символов табуляции или переносов строк
      .+ - Любое количество любых символов, кроме переноса строки
      [\S\s]+ - Любое количество любых символов, включая перенос строки
      [a-z]+ - Любая последовательность символов в нижнем регистре
      [0-9]+ - Любая последовательность цифр
      [^0-9]+ - Любая последовательность любых символов исключая цифры
      Your user name is: [^\s]+ - Строка 'Your user name is: ', за которой следует любая последовательность символов, которые не являются пробелом.
      Your user name is: ([^\s]+) - Сохранить имя в переменной GROUP1 используя группы
      href="([^"]+)" - Извлечь ссылку из html тега a
      * @returns Части строки после разделения
      Эта переменная будет содержать список со всеми частями строки. Смотрите описание текущего действия чтобы увидеть примеры.
      */
      function BAS_regexp_split(text, regexp) {
      const text = _function_argument('text') || text
      const regexp = _function_argument('regexp') || regexp
      VAR_LIST_FROM_STRING = native("regexp", "split", JSON.stringify({text: text,regexp: regexp}))
      if(VAR_LIST_FROM_STRING.length == 0)
      VAR_LIST_FROM_STRING = []
      else
      VAR_LIST_FROM_STRING = JSON.parse(VAR_LIST_FROM_STRING)
      const result = VAR_LIST_FROM_STRING
      _function_return(result)
      return result
      }
      /**
      * Заменить строку
      * Применить регулярное выражение, заменить все соответствия на целевую строку.
      * Регулярное выражение - удобный механизм для обработки строк. Он помогает искать строки, разделять строку на части и т. д. ( руководство, справка https://www.rexegg.com/regex-quickstart.html).
      * Вы можете представить регулярное выражение как какую-либо маску или шаблон, которой заданная строка должна соответствовать. Пример работы регулярного выражения можно описать таким образом: 'Найти в тексте последовательность букв, за которой следует символ @, за которым следует любая последовательность букв, либо точка'. Преобразуя это описание в регулярное выражени получим \w+@[a-zA-Z\.]+ это простое выражение для поиска почты в заданном тексте.
      * Это действие работает так: регулярное выражение применяется к целевой строке, все соответствия заменяются строкой из параметра 'Заменить на'.
      * Например, если строка Random text login1@yahoo.com login2@outlook.com и регулярное выражение @[^\.]*\.[\s]* (данное регулярное выражение будет соответствовать символу @ вместе с почтовым доменом) , а параметр 'Заменить на' равен @gmail.com, то результат будет Random text login1@gmail.com login2@gmail.com
      * В переменную, указанную в параметре 'Результат', будет записана строка с результатом.
      * Параметр 'Заменить на' также может содержать специальные строки: \1, \2, \3 и т. д. \1 будет заменено значением первой группы, \2 будет заменено второй группой и так далее.
      * Второй пример, если строка word1 test:111 word2 word3 test:222 и регулярное выражение test:(\d+) (обратите внимание что регулярное выражение содержит одну группу) , а параметр 'Заменить на' равен \1, то результат будет word1 111 word2 word3 222 (\1 будет заменено значением первой группы).
      * Обработка html намного проще и быстрее с помощью модуля 'Xpath'.
      * Конструктор Регулярных Выражений https://bablosoft.github.io/RegexpConstructor/ может помочь вам создать регулярное выражение.
      *
      * @param {string} text Строка Для Применения Регулярного Выражения
      Это строка, к которой применяется регулярное выражение.
      * @param {string} regexp Регулярное Выражение
      Регулярное выражение. Оно может содержать группы. Регулярные выражения применяются в многострочном режиме, если вы хотите, извлечь любой символ, включая перенос строки, используйте следующее выражение [\S\s]+. Точка .+ извлекает любой символ, кроме переноса строки.
      Примеры :
      \d+ - Любая последовательность цифр
      \w+ - Любая последовательность букв
      \s+ - Любое количество пробелов, символов табуляции или переносов строк
      .+ - Любое количество любых символов, кроме переноса строки
      [\S\s]+ - Любое количество любых символов, включая перенос строки
      [a-z]+ - Любая последовательность символов в нижнем регистре
      [0-9]+ - Любая последовательность цифр
      [^0-9]+ - Любая последовательность любых символов исключая цифры
      Your user name is: [^\s]+ - Строка 'Your user name is: ', за которой следует любая последовательность символов, которые не являются пробелом.
      Your user name is: ([^\s]+) - Сохранить имя в переменной GROUP1 используя группы
      href="([^"]+)" - Извлечь ссылку из html тега a
      * @param {string} replace Заменить на
      Этот параметр является строкой. Это работает следующим образом: регулярное выражение применяется к целевой строке, все найденные вхождение заменяются этой строкой. Она также может содержать строки: \1, \2, \3 и т. д. \1 будет заменено значением первой группы, \2 будет заменено второй группой и так далее. Смотрите описание текущего действия чтобы увидеть примеры.
      * @returns строка после замены
      */
      function BAS_regexp_replace(text, regexp, replace) {
      const text = _function_argument('text') || text
      const regexp = _function_argument('regexp') || regexp
      const replace = _function_argument('replace') || replace
      const result = native('regexp', 'replace', JSON.stringify({
      text: text,
      regexp: regexp,
      replace: replace
      }))
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022resources\u0022\u007d", 140705433)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQodC+0LfQtNCw0YLRjCDQoNC10YHRg9GA0YFcclxuICog0KHQvtC30LTQsNGC0Ywg0L3QvtCy0YvQuSDRgNC10YHRg9GA0YEuXHJcbiAqINCa0LDQttC00YvQuSDRgNC10YHRg9GA0YEg0YHQvtC00LXRgNC20LjRgiDQutC+0L3RgtC10LnQvdC10YAg0YEg0LTQsNC90L3Ri9C80LgsINC90LDQv9GA0LjQvNC10YAsINGB0YLRgNC+0LrQuCDQuNC3INGE0LDQudC70LAuINCSINC+0YLQu9C40YfQuNC1INC+0YIg0YHQv9C40YHQutC+0LIsINGB0LjRgdGC0LXQvNCwINGA0LXRgdGD0YDRgdC+0LIg0L/QvtC80L7Qs9Cw0LXRgiDRgNCw0YHQv9GA0LXQtNC10LvRj9GC0Ywg0LTQsNC90L3Ri9C1INC/0L4g0L/QvtGC0L7QutCw0LwsINCwINGC0LDQutC20LUg0L7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINGA0LDQt9C70LjRh9C90YvQtSDRgdC40YLRg9Cw0YbQuNC4LCDQutC+0YLQvtGA0YvQtSDQstC+0LfQvdC40LrQsNGO0YIg0L/RgNC4INC+0LTQvdC+0LLRgNC10LzQtdC90L3QvtC8INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC4INC00LDQvdC90YvRhSDQsiDQvNC90L7Qs9C+0L/QvtGC0L7Rh9C90L7QvCDRgNC10LbQuNC80LUuXHJcbiAqINCe0LHRi9GH0L3QviDRgNC10YHRg9GA0YHRiyDRgdC+0LfQtNCw0Y7RgtGB0Y8g0LjQtyDQv9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60L7Qs9C+INC40L3RgtC10YDRhNC10LnRgdCwICjQutC90L7Qv9C60L7QuSAnKyDQodC+0LfQtNCw0YLRjCDQvdC+0LLRi9C5INGA0LXRgdGD0YDRgScpLCDQvdC+INGC0LDQutC20LUg0LzQvtCz0YPRgiDQsdGL0YLRjCDRgdC+0LfQtNCw0L3RiyDRgSDQv9C+0LzQvtGJ0YzRjiDRjdGC0L7Qs9C+INC00LXQudGB0YLQstC40Y8uXHJcbiAqINCd0LDRgdGC0L7Rj9GC0LXQu9GM0L3QviDRgNC10LrQvtC80LXQvdC00YPQtdGC0YHRjyDQvdC1INC40YHQv9C+0LvRjNC30L7QstCw0YLRjCDRjdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQsiDQutC+0LTQtSwg0LrQvtGC0L7RgNGL0Lkg0YDQsNCx0L7RgtCw0LXRgiDQsiDQvdC10YHQutC+0LvRjNC60LjRhSDQv9C+0YLQvtC60LDRhSwg0L/QvtGC0L7QvNGDINGH0YLQviDQutCw0LbQtNGL0Lkg0L/QvtGC0L7QuiDRgdC+0LfQtNCw0YHRgiDRgdCy0L7QuSDQvdC+0LLRi9C5INGA0LXRgdGD0YDRgSwg0Lgg0Y3RgtC+LCDQstC10YDQvtGP0YLQvdC+LCDQvdC1INGC0L4sINGH0YLQviDQstCw0Lwg0L3Rg9C20L3Qvi4g0JLQvNC10YHRgtC+INGN0YLQvtCz0L4g0LjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQtNCw0L3QvdC+0LUg0LTQtdC50YHRgtCy0LjQtSDQsiDRhNGD0L3QutGG0LjQuCBPbkFwcGxpY2F0aW9uU3RhcnQuINCt0YLQsCDRhNGD0L3QutGG0LjRjyDQstGL0L/QvtC70L3Rj9C10YLRgdGPINGC0L7Qu9GM0LrQviDQvtC00LjQvSDRgNCw0Lcg0LTQu9GPINCy0YHQtdCz0L4g0YHQutGA0LjQv9GC0LAg0LTQviDQu9GO0LHQvtC5INC00YDRg9Cz0L7QuSDRhNGD0L3QutGG0LjQuCDQuCwg0YHQu9C10LTQvtCy0LDRgtC10LvRjNC90L4sINGP0LLQu9GP0LXRgtGB0Y8g0LvRg9GH0YjQuNC8INC80LXRgdGC0L7QvCDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDRgNC10YHRg9GA0YHQsCAoIHNjcmVlbiBodHRwczovL3dpa2kuYmFibG9zb2Z0LmNvbS9saWIvZXhlL2ZldGNoLnBocD9jYWNoZT0mbWVkaWE9b25hcHBsaWNhdGlvbnN0YXJ0Y3JlYXRlcmVzb3VyY2UucG5nKS5cclxuICog0J/QvtGB0LvQtSDRgdC+0LfQtNCw0L3QuNGPINGA0LXRgdGD0YDRgdCwINCy0YssINCy0LXRgNC+0Y/RgtC90L4sINC30LDRhdC+0YLQuNGC0LUg0LfQsNC/0L7Qu9C90LjRgtGMINC10LPQviDQtNCw0L3QvdGL0LzQuCwg0YHQtNC10LvQsNC50YLQtSDRjdGC0L4g0YEg0L/QvtC80L7RidGM0Y4g0LTQtdC50YHRgtCy0LjRjyAn0JTQvtCx0LDQstC40YLRjCDRjdC70LXQvNC10L3RgicuXHJcbiAqINCf0L7RgdC70LUg0YHQvtC30LTQsNC90LjRjyDQuCDQvdCw0L/QvtC70L3QtdC90LjRjyDRgNC10YHRg9GA0YHQsCDQtNCw0L3QvdGL0LzQuCDQvtC9INC80L7QttC10YIg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQutCw0Log0LvRjtCx0L7QuSDQtNGA0YPQs9C+0Lkg0YDQtdGB0YPRgNGBINCyINC70Y7QsdC+0Lwg0L/QvtC70LUg0Lgg0LIg0LvRjtCx0L7QvCDQv9C+0YLQvtC60LUgKCBzY3JlZW4gaHR0cHM6Ly93aWtpLmJhYmxvc29mdC5jb20vbGliL2V4ZS9mZXRjaC5waHA/Y2FjaGU9Jm1lZGlhPW9uYXBwbGljYXRpb25zdGFydHVzZXJlc291cmNlLnBuZykuXHJcbiAqINCi0LjQv9C40YfQvdGL0Lwg0L/RgNC40LzQtdGA0L7QvCDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyDRjdGC0L7Qs9C+INC00LXQudGB0YLQstC40Y8g0Y/QstC70Y/QtdGC0YHRjyDRgdC+0LfQtNCw0L3QuNC1INGA0LXRgdGD0YDRgdCwICjQsiBPbkFwcGxpY2F0aW9uU3RhcnQpLCDQutC+0YLQvtGA0YvQuSDQsdC10YDQtdGCINC00LDQvdC90YvQtSDQuNC3INC60LDQutC+0LPQvi3RgtC+INC90LXRgdGC0LDQvdC00LDRgNGC0L3QvtCz0L4g0LzQtdGB0YLQsCAo0L3QsNC/0YDQuNC80LXRgCwg0LjQtyDRgNC10LTQutC+0Lkg0YHQuNGB0YLQtdC80Ysg0YPQv9GA0LDQstC70LXQvdC40Y8g0LHQsNC30L7QuSDQtNCw0L3QvdGL0YUpINC40LvQuCDQsiDQvdC10YHRgtCw0L3QtNCw0YDRgtC90L7QvCDRhNC+0YDQvNCw0YLQtSDQuNC70Lgg0Lgg0YLQviwg0Lgg0LTRgNGD0LPQvtC1LlxyXG4gKiAn0JbQtNCw0YLRjCDQv9C+0Y/QstC70LXQvdC40Y8nIC0g0L7Rh9C10L3RjCDQstCw0LbQvdGL0Lkg0L/QsNGA0LDQvNC10YLRgCwg0L7QvSDQvtC/0YDQtdC00LXQu9GP0LXRgiDQv9C+0LLQtdC00LXQvdC40LUg0LIg0YHQu9GD0YfQsNC1LCDQutC+0LPQtNCwINGB0L/QuNGB0L7QuiDQtNCw0L3QvdGL0YUg0YDQtdGB0YPRgNGB0LAg0L/Rg9GB0YIuINCV0YHQu9C4INGN0YLQsCDQvdCw0YHRgtGA0L7QudC60LAg0LLQu9GO0YfQtdC90LAsINGC0L7Qs9C00LAg0LTQtdC50YHRgtCy0LjQtSwg0LrQvtGC0L7RgNC+0LUg0L/QvtC70YPRh9Cw0LXRgiDRgNC10YHRg9GA0YEsINCx0YPQtNC10YIg0LbQtNCw0YLRjCDQtNC+INGC0LXRhSDQv9C+0YAsINC/0L7QutCwINC00LDQvdC90YvQtSDQvdC1INC/0L7Rj9Cy0Y/RgtGB0Y8sINC10YHQu9C4INC90LDRgdGC0YDQvtC50LrQsCDQvdC1INCy0YvQsdGA0LDQvdCwLCDRgtC+INC00LXQudGB0YLQstC40LUg0LfQsNCy0LXRgNGI0LjRgtGB0Y8g0LzQs9C90L7QstC10L3QvdC+INGBINC+0YjQuNCx0LrQvtC5LlxyXG4gKiDQmtC+0LPQtNCwINCy0YvQsdGA0LDQvdCwINC90LDRgdGC0YDQvtC50LrQsCAn0JbQsNC00L3Ri9C5INCw0LvQs9C+0YDQuNGC0LwnLCDRgdC40YHRgtC10LzQsCDRgNC10YHRg9GA0YHQvtCyINCx0YPQtNC10YIg0L/Ri9GC0LDRgtGM0YHRjyDRgdC90L7QstCwINC4INGB0L3QvtCy0LAg0L/QvtC70YPRh9Cw0YLRjCDQvtC00L3RgyDQuCDRgtGDINC20LUg0YHRgtGA0L7QutGDINC00L4g0YLQtdGFINC/0L7RgCwg0L/QvtC60LAg0Y3RgtCwINGB0YLRgNC+0LrQsCDQvdC1INC40YHRh9C10YDQv9Cw0LXRgiDQutC+0LvQuNGH0LXRgdGC0LLQviDRg9GB0L/QtdGF0L7QsiDQuNC70Lgg0L3QtdGD0LTQsNGHLCDQuCDRgtC+0LvRjNC60L4g0L/QvtGB0LvQtSDRgtC+0LPQviDRgdC70LXQtNGD0Y7RidCw0Y8g0YHRgtGA0L7QutCwINGB0YLQsNC90LXRgiDQtNC+0YHRgtGD0L/QvdCwLlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg0JjQvNGPINGA0LXRgdGD0YDRgdCwXHJcbiAg0JjQvNGPINGA0LXRgdGD0YDRgdCwLCDQv9C+0YLQvtC8INC+0L3QviDQvNC+0LbQtdGCINCx0YvRgtGMINC40YHQv9C+0LvRjNC30L7QstCw0L3QviDQtNC70Y8g0LXQs9C+INC40LTQtdC90YLQuNGE0LjQutCw0YbQuNC4LiDQnNC+0LbQtdGCINCx0YvRgtGMINC70Y7QsdC+0Lkg0YHRgtGA0L7QutC+0LkuXHJcblxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3VjY2Vzc2VzINCa0L7Qu9C40YfQtdGB0YLQstC+INGD0YHQv9C10YXQvtCyXHJcbiAg0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INGD0YHQv9C10YjQvdGL0YUg0L/RgNC40LzQtdC90LXQvdC40Lkg0YLQtdC60YPRidC10LPQviDRgNC10YHRg9GA0YHQsC4g0JjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0YDQtdGB0YPRgNGB0LAg0YHRh9C40YLQsNC10YLRgdGPINGD0YHQv9C10YjQvdGL0LwsINC10YHQu9C4INC/0L7RgtC+0LosINC60L7RgtC+0YDRi9C5INC40YHQv9C+0LvRjNC30L7QstCw0Lsg0LXQs9C+LCDQsdGL0Lsg0LLRi9C/0L7Qu9C90LXQvSDRg9GB0L/QtdGI0L3Qvi4g0J3QsNC/0YDQuNC80LXRgCwg0LXRgdC70Lgg0YDQtdGB0YPRgNGBINGB0L7QtNC10YDQttC40YIg0L/RgNC+0LrRgdC4INC4INGB0LrRgNC40L/RgiDRgNC10LPQuNGB0YLRgNC40YDRg9C10YIg0LDQutC60LDRg9C90YLRiywg0YLQviDRjdGC0L7RgiDQv9Cw0YDQsNC80LXRgtGAINGD0LrQsNC30YvQstCw0LXRgiwg0YHQutC+0LvRjNC60L4g0YPRh9C10YLQvdGL0YUg0LfQsNC/0LjRgdC10Lkg0LzQvtC20LXRgiDQsdGL0YLRjCDQt9Cw0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0L3QviDQtNC70Y8g0L7QtNC90L7Qs9C+INC/0YDQvtC60YHQuC5cclxuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYWlscyDQmtC+0LvQuNGH0LXRgdGC0LLQviDQvdC10YPQtNCw0YdcclxuICDQnNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L3QtdGD0LTQsNGH0L3Ri9GFINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC5INGC0LXQutGD0YnQtdCz0L4g0YDQtdGB0YPRgNGB0LAuINCY0YHQv9C+0LvRjNC30L7QstCw0L3QuNC1INGA0LXRgdGD0YDRgdCwINGB0YfQuNGC0LDQtdGC0YHRjyDQvdC10YPQtNCw0YfQvdGL0LwsINC10YHQu9C4INC/0L7RgtC+0LosINC60L7RgtC+0YDRi9C5INC40YHQv9C+0LvRjNC30L7QstCw0Lsg0LXQs9C+LCDQt9Cw0LrQsNC90YfQuNCy0LDQtdGC0YHRjyDQvdC10YPQtNCw0YfQtdC5LiDQndCw0L/RgNC40LzQtdGALCDQtdGB0LvQuCDRgNC10YHRg9GA0YEg0YHQvtC00LXRgNC20LjRgiDQv9GA0L7QutGB0Lgg0Lgg0YHQutGA0LjQv9GCINGB0L7Qt9C00LDQtdGCINGD0YfQtdGC0L3Ri9C1INC30LDQv9C40YHQuCwg0YLQviDRjdGC0L7RgiDQv9Cw0YDQsNC80LXRgtGAINGD0LrQsNC30YvQstCw0LXRgiwg0YHQutC+0LvRjNC60L4g0L3QtdGD0LTQsNGH0L3RhSDRgNC10LPQuNGB0YLRgNCw0YbQuNC5INCy0L7Qt9C80L7QttC90L4g0LTQu9GPINC+0LTQvdC+0LPQviDQv9GA0L7QutGB0LguXHJcblxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2ltdWx0YW5lb3VzINCe0LTQvdC+0LLRgNC10LzQtdC90L3Ri9GFINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC5XHJcbiAg0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC+0LTQvdC+0LLRgNC10LzQtdC90L3Ri9GFINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC5LiDQndCw0L/RgNC40LzQtdGALCDQtdGB0LvQuCDRgNC10YHRg9GA0YEg0YHQvtC00LXRgNC20LjRgiDQv9GA0L7QutGB0LgsINGC0L4g0Y3RgtC+0YIg0L/QsNGA0LDQvNC10YLRgCDRg9C60LDQt9GL0LLQsNC10YIsINGB0LrQvtC70YzQutC+INGA0LDQtyDQv9GA0L7QutGB0Lgg0LzQvtC20LXRgiDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0YzRgdGPINC+0LTQvdC+0LLRgNC10LzQtdC90L3Qvi5cclxuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbnRlcnZhbCDQmNC90YLQtdGA0LLQsNC70Ysg0LzQtdC20LTRgyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRj9C80LhcclxuICDQmNC90YLQtdGA0LLQsNC7INC80LXQttC00YMg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQsiDQvNC40LvQu9C40YHQtdC60YPQvdC00LDRhS5cclxuICDQn9GA0LjQvNC10YDRiyA6XHJcbiAgMCAtINCf0L7RgdC70LUg0YLQvtCz0L4sINC60LDQuiDRgNC10YHRg9GA0YEg0LHRg9C00LXRgiDQuNGB0L/QvtC70YzQt9C+0LLQsNC9LCDQtdCz0L4g0LzQvtC20L3QviDQsdGD0LTQtdGCINGB0YDQsNC30YMg0LbQtSDRgdC90L7QstCwINC/0L7Qu9GD0YfQuNGC0Ywg0L/QvtCy0YLQvtGA0L3Qvi5cclxuICA1MDAwIC0g0JjQvdGC0LXRgNCy0LDQuyDQvNC10LbQtNGDINC60LDQttC00YvQvCDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8INGA0LXRgdGD0YDRgdCwINC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvdC1INC80LXQvdC10LUgNSDRgdC10LrRg9C90LQuINCY0L3RgtC10YDQstCw0Lsg0L/RgNC40LzQtdC90Y/QtdGC0YHRjyDQvdC1INC60L4g0LLRgdC10LzRgyDRgdC/0LjRgdC60YMg0LTQsNC90L3Ri9GFLCDQsCDQuiDQutCw0LbQtNC+0LzRgyDQtdCz0L4g0Y3Qu9C10LzQtdC90YLRgy4g0J3QsNC/0YDQuNC80LXRgCwg0LXRgdC70Lgg0YDQtdGB0YPRgNGBINGB0L7QtNC10YDQttC40YIg0L/RgNC+0LrRgdC4LCDRgtC+INGN0YLQsCDQvdCw0YHRgtGA0L7QudC60LAg0LfQsNC00LDQtdGCINC40L3RgtC10YDQstCw0Lsg0LzQtdC20LTRgyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRj9C80Lgg0LrQsNC20LTQvtCz0L4g0L/RgNC+0LrRgdC4INCyIDUg0YHQtdC60YPQvdC0LlxyXG5cclxuICogQHBhcmFtIHtib29sZWFufSBncmVlZHkg0JbQsNC00L3Ri9C5INCw0LvQs9C+0YDQuNGC0LxcclxuICogQHBhcmFtIHtib29sZWFufSBkb250X2dpdmVfdXAg0JbQtNCw0YLRjCDQv9C+0Y/QstC70LXQvdC40Y9cclxuICovXHJcbmZ1bmN0aW9uIEJBU19jcmVhdGVfcmVzb3VyY2UoXHJcbiAgbmFtZSxcclxuICBzdWNjZXNzZXMsXHJcbiAgZmFpbHMsXHJcbiAgc2ltdWx0YW5lb3VzLFxyXG4gIGludGVydmFsLFxyXG4gIGdyZWVkeSxcclxuICBkb250X2dpdmVfdXBcclxuKSB7XHJcbiAgY29uc3QgbmFtZSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnbmFtZScpIHx8IG5hbWVcclxuICBjb25zdCBzdWNjZXNzZXMgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ3N1Y2Nlc3NlcycpIHx8IHN1Y2Nlc3Nlc1xyXG4gIGNvbnN0IGZhaWxzID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdmYWlscycpIHx8IGZhaWxzXHJcbiAgY29uc3Qgc2ltdWx0YW5lb3VzID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdzaW11bHRhbmVvdXMnKSB8fCBzaW11bHRhbmVvdXNcclxuICBjb25zdCBpbnRlcnZhbCA9IF9mdW5jdGlvbl9hcmd1bWVudCgnaW50ZXJ2YWwnKSB8fCBpbnRlcnZhbFxyXG4gIGNvbnN0IGdyZWVkeSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnZ3JlZWR5JykgfHwgZ3JlZWR5XHJcbiAgY29uc3QgZG9udF9naXZlX3VwID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdkb250X2dpdmVfdXAnKSB8fCBkb250X2dpdmVfdXBcclxuICBSQ3JlYXRlKG5hbWUsIHN1Y2Nlc3NlcywgZmFpbHMsIHNpbXVsdGFuZW91cywgaW50ZXJ2YWwsIGdyZWVkeSwgZG9udF9naXZlX3VwKVxyXG59XHJcblxyXG4vKipcclxuICog0KPQtNCw0LvQuNGC0Ywg0KLQtdC60YPRidC40Lkg0K3Qu9C10LzQtdC90YJcclxuICog0KPQtNCw0LvQuNGC0Ywg0YDQtdGB0YPRgNGBLiDQldGB0LvQuCDRgtC40L8g0YDQtdGB0YPRgNGB0LAgLSAn0JjQtyDRhNCw0LnQu9CwJywg0YLQtdC60YPRidCw0Y8g0YHRgtGA0L7QutCwINCx0YPQtNC10YIg0YPQtNCw0LvQtdC90LAg0LjQtyDRhNCw0LnQu9CwLCDQtdGB0LvQuCDRgtC40L8g0YDQtdGB0YPRgNGB0LAgJ9CR0LDQt9CwJywg0YLQtdC60YPRidCw0Y8g0LfQsNC/0LjRgdGMINCx0YPQtNC10YIg0YPQtNCw0LvQtdC90LAg0LjQtyDQsdCw0LfRiyDQtNCw0L3QvdGL0YUg0Lgg0YIuINC0LlxyXG4gKiDQotC10LrRg9GJ0LDRjyDRgdGC0YDQvtC60LAgLSDRjdGC0L4g0YHRgtGA0L7QutCwLCDQutC+0YLQvtGA0LDRjyDQsdGL0LvQsCDQv9C+0LvRg9GH0LXQvdCwINC/0L7RgdC70LXQtNC90LXQuSDQsiDRgtC10LrRg9GJ0LXQvCDQv9C+0YLQvtC60LUuINCd0LDQv9GA0LjQvNC10YAsINC10YHQu9C4INGDINCy0LDRgSDQtdGB0YLRjCDRgNC10YHRg9GA0YEgJ9Cf0YDQvtC60YHQuCcsINC4INGN0YLQvtGCINC/0YDQvtC60YHQuCDQt9Cw0LHQsNC90LXQvSDQvdCwINGG0LXQu9C10LLQvtC8INGB0LDQudGC0LUsINCy0Ysg0LzQvtC20LXRgtC1INC40YHQv9C+0LvRjNC30L7QstCw0YLRjCDRjdGC0L4g0LTQtdC50YHRgtCy0LjQtSDRgSDQuNC80LXQvdC10Lwg0YDQtdGB0YPRgNGB0LAgJ9Cf0YDQvtC60YHQuCcuINCt0YLQviDQv9GA0LjQstC10LTQtdGCINC6INGD0LTQsNC70LXQvdC40Y4g0L/RgNC+0LrRgdC4INC40Lcg0YTQsNC50LvQsCDQuCDQvtC9INC90LjQutC+0LPQtNCwINCx0L7Qu9GM0YjQtSDQvdC1INCx0YPQtNC10YIg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQvdCwINC/0YDQvtGC0Y/QttC10L3QuNC4INCy0YHQtdC5INGA0LDQsdC+0YLRiyDRgdC60YDQuNC/0YLQsC5cclxuICog0J/QviDRg9C80L7Qu9GH0LDQvdC40Y4g0YPQtNCw0LvQtdC90LjQtSDRgdGC0YDQvtC6INC40Lcg0YTQsNC50LvQsCDQv9GA0L7QuNGB0YXQvtC00LjRgiDQvdC1INGB0YDQsNC30YMsINGN0YLQviDRgdC00LXQu9Cw0L3QviDQtNC70Y8g0L7Qv9GC0LjQvNC40LfQsNGG0LjQuCDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQttC10YHRgtC60L7Qs9C+INC00LjRgdC60LAuINCd0L4g0LXRgdC70Lgg0LLRiyDRg9GB0YLQsNC90L7QstC40YLQtSDQvdCw0YHRgtGA0L7QudC60YMgJ9Cj0LTQsNC70LjRgtGMINC40Lcg0YTQsNC50LvQsC/QsdCw0LfRiyDQvNCz0L3QvtCy0LXQvdC90L4nLCDRgtC+INGE0LDQudC7INCx0YPQtNC10YIg0L7Rh9C40YnQtdC9INC4INC/0LXRgNC10LfQsNC/0LjRgdCw0L0g0LzQs9C90L7QstC10L3QvdC+INC/0L7RgdC70LUg0LfQsNCy0LXRgNGI0LXQvdC40Y8g0Y3RgtC+0LPQviDQtNC10LnRgdGC0LLQuNGPLlxyXG4gKiDQntCx0YvRh9C90L4g0LLQsNC8INC90LUg0L3Rg9C20L3QviDQstGL0LfRi9Cy0LDRgtGMINGN0YLQviDQtNC10LnRgdGC0LLQuNC1INC00LvRjyDRg9C00LDQu9C10L3QuNC1INGA0LXRgdGD0YDRgdC+0LIsINC40YHQv9C+0LvRjNC30L7QstCw0L3QvdGL0LUg0YDQtdGB0YPRgNGB0Ysg0LzQvtCz0YPRgiDQsdGL0YLRjCDQvtGH0LjRidC10L3RiyDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuCwg0LXRgdC70Lgg0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0YDQtdGB0YPRgNGB0LAg0LLRi9Cx0YDQsNC9INC/0LDRgNCw0LzQtdGC0YAgJ9Cn0YLQtdC90LjQtSDQuCDRg9C00LDQu9C10L3QuNC1INGB0YLRgNC+0Log0L/QvtGB0LvQtSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjycuICggc2NyZWVuIGh0dHBzOi8vd2lraS5iYWJsb3NvZnQuY29tL2xpYi9leGUvZmV0Y2gucGhwP2NhY2hlPSZtZWRpYT1kZWxldGVyZXNvdXJjZWFmdGVydXNlLnBuZykuINCg0LXRgdGD0YDRgSDQsdGD0LTQtdGCINCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC4INC+0YfQuNGJ0LXQvSDQsiDRgdC70YPRh9Cw0LUg0LTQvtGB0YLQuNC20LXQvdC40Y8g0LfQsNC00LDQvdC90L7Qs9C+INGH0LjRgdC70LAg0YPRgdC/0LXRiNC90YvRhSDQuNC70Lgg0L3QtdGD0LTQsNGH0L3Ri9GFINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC5INGA0LXRgdGD0YDRgdCwLiDQndCw0L/RgNC40LzQtdGALCDQtdGB0LvQuCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCDRgNC10YHRg9GA0YHQsCDQstGLINGD0LrQsNC30LDQu9C4ICfQmNGB0L/QvtC70YzQt9GD0LnRgtC1INC60LDQttC00YPRjiDRgdGC0YDQvtC60YMg0L7QtNC40L0g0YDQsNC3Jywg0YLQviDRgNC10YHRg9GA0YEg0LHRg9C00LXRgiDRg9C00LDQu9C10L0g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60Lgg0L/QvtGB0LvQtSDQv9C10YDQstC+0LPQviDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyAoIHNjcmVlbiBodHRwczovL3dpa2kuYmFibG9zb2Z0LmNvbS9saWIvZXhlL2ZldGNoLnBocD9jYWNoZT0mbWVkaWE9c2luZ2xldXNhZ2VyZXMucG5nKS5cclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lINCY0LzRjyDRgNC10YHRg9GA0YHQsFxyXG4gINCY0LzRjyDRgNC10YHRg9GA0YHQsCwg0LTQu9GPINC60L7RgtC+0YDQvtCz0L4g0L/QvtGB0LvQtdC00L3QuNC5INC40YHQv9C+0LvRjNC30L7QstCw0L3QvdGL0Lkg0Y3Qu9C10LzQtdC90YIg0LHRg9C00LXRgiDRg9C00LDQu9C10L0uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5zdGFudGx5INCj0LTQsNC70LjRgtGMINC40Lcg0YTQsNC50LvQsC/QsdCw0LfRiyDQvNCz0L3QvtCy0LXQvdC90L5cclxuICovXHJcbmZ1bmN0aW9uIEJBU19kZWxldGVfcmVzb3VyY2UobmFtZSwgaW5zdGFudGx5KSB7XHJcbiAgY29uc3QgbmFtZSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnbmFtZScpIHx8IG5hbWVcclxuICBjb25zdCBpbnN0YW50bHkgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2luc3RhbnRseScpIHx8IGluc3RhbnRseVxyXG4gIGlmIChuYW1lIGluIF9SICYmIF9SW25hbWVdKSB7XHJcbiAgICBfUltuYW1lXS5kaWUoKVxyXG4gICAgX1JbbmFtZV0gPSBudWxsXHJcbiAgfVxyXG4gIGlmIChpbnN0YW50bHkpIFJTeW5jKG5hbWUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQlNC+0LHQsNCy0LjRgtGMINCt0LvQtdC80LXQvdGCXHJcbiAqINCU0L7QsdCw0LLQuNGC0Ywg0L3QvtCy0YvQuSDRjdC70LXQvNC10L3RgiDQsiDRgNC10YHRg9GA0YEuINCd0LDQv9GA0LjQvNC10YAsINC00L7QsdCw0LLQuNGC0Ywg0L3QvtCy0YPRjiDRgdGC0YDQvtC60YMg0LIg0YTQsNC50Lsg0LjQu9C4INC90L7QstGD0Y4g0LfQsNC/0LjRgdGMINCyINCx0LDQt9GDINC00LDQvdC90YvRhS5cclxuICog0JrQsNC20LTRi9C5INGA0LXRgdGD0YDRgSDRgdC+0LTQtdGA0LbQuNGCINC60L7QvdGC0LXQudC90LXRgCDRgSDQtNCw0L3QvdGL0LzQuCwg0L3QsNC/0YDQuNC80LXRgCwg0YHRgtGA0L7QutC4INC40Lcg0YTQsNC50LvQsC4g0JIg0L7RgtC70LjRh9C40LUg0L7RgiDRgdC/0LjRgdC60L7Qsiwg0YHQuNGB0YLQtdC80LAg0YDQtdGB0YPRgNGB0L7QsiDQv9C+0LzQvtCz0LDQtdGCINGA0LDRgdC/0YDQtdC00LXQu9GP0YLRjCDQtNCw0L3QvdGL0LUg0L/QviDQv9C+0YLQvtC60LDQvCwg0LAg0YLQsNC60LbQtSDQvtCx0YDQsNCx0LDRgtGL0LLQsNC10YIg0YDQsNC30LvQuNGH0L3Ri9C1INGB0LjRgtGD0LDRhtC40LgsINC60L7RgtC+0YDRi9C1INCy0L7Qt9C90LjQutCw0Y7RgiDQv9GA0Lgg0L7QtNC90L7QstGA0LXQvNC10L3QvdC+0Lwg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Lgg0LTQsNC90L3Ri9GFINCyINC80L3QvtCz0L7Qv9C+0YLQvtGH0L3QvtC8INGA0LXQttC40LzQtS5cclxuICog0J7QsdGL0YfQvdC+INGA0LXRgdGD0YDRgdGLINGB0L7Qt9C00LDRjtGC0YHRjyDQuNC3INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQvtCz0L4g0LjQvdGC0LXRgNGE0LXQudGB0LAgKNC60L3QvtC/0LrQvtC5ICcrINCh0L7Qt9C00LDRgtGMINC90L7QstGL0Lkg0YDQtdGB0YPRgNGBJyksINC90L4g0YLQsNC60LbQtSDQvNC+0LPRg9GCINCx0YvRgtGMINGB0L7Qt9C00LDQvdGLINC00LXQudGB0YLQstC40LXQvCAn0KHQvtC30LTQsNGC0Ywg0YDQtdGB0YPRgNGBJy5cclxuICog0KEg0L/QvtC80L7RidGM0Y4g0Y3RgtC+0LPQviDQtNC10LnRgdGC0LLQuNGPINCy0Ysg0LzQvtC20LXRgtC1INC00L7QsdCw0LLQu9GP0YLRjCDQtNCw0L3QvdGL0LUg0LIg0LvRjtCx0L7QuSDRgtC40L8g0YDQtdGB0YPRgNGB0L7Qsi4g0K3RgtC+INC00LXQudGB0YLQstC40LUg0L3QtSDQstC70LjRj9C10YIg0L3QsCDQvdC10LrQvtGC0L7RgNGL0LUg0YLQuNC/0Ysg0YDQtdGB0YPRgNGB0L7Qsiwg0YLQsNC60LjQtSDQutCw0LogJ9Ch0YLRgNC+0LrQsCcg0LjQu9C4ICfQp9C40YHQu9C+Jy4g0J7QsdGL0YfQvdC+INC00LXQudGB0YLQstC40LUg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPINC00LvRjyDQtNC+0LHQsNCy0LvQtdC90LjRjyDRgdGC0YDQvtC6INCyINGE0LDQudC7LlxyXG4gKiDQn9C+INGD0LzQvtC70YfQsNC90LjRjiDQtNC+0LHQsNCy0LvQtdC90LjQtSDRgdGC0YDQvtC6INCyINGE0LDQudC7INC/0YDQvtC40YHRhdC+0LTQuNGCINC90LUg0YHRgNCw0LfRgywg0Y3RgtC+INGB0LTQtdC70LDQvdC+INC00LvRjyDQvtC/0YLQuNC80LjQt9Cw0YbQuNC4INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINC20LXRgdGC0LrQvtCz0L4g0LTQuNGB0LrQsC4g0J3QviDQtdGB0LvQuCDQstGLINGD0YHRgtCw0L3QvtCy0LjRgtC1INC90LDRgdGC0YDQvtC50LrRgyAn0JTQvtCx0LDQstC40YLRjCDQsiDRhNCw0LnQuy/QsdCw0LfRgyDQvNCz0L3QvtCy0LXQvdC90L4nLCDRhNCw0LnQuyDQsdGD0LTQtdGCINC+0LHQvdC+0LLQu9C10L0g0LzQs9C90L7QstC10L3QvdC+LlxyXG4gKiDQldGB0LvQuCDQstGL0LHRgNCw0L3QsCDQvdCw0YHRgtGA0L7QudC60LAgJ9Ci0L7Qu9GM0LrQviDQtNC+0LHQsNCy0LjRgtGMINCyINGE0LDQudC7L9Cx0LDQt9GDJywg0YLQviDRgdC/0LjRgdC+0Log0LTQsNC90L3Ri9GFINCy0L3Rg9GC0YDQuCDRgNC10YHRg9GA0YHQsCDQvdC1INCx0YPQtNC10YIg0L7QsdC90L7QstC70Y/RgtGM0YHRjywg0LHRg9C00LXRgiDQuNC30LzQtdC90LXQvSDRgtC+0LvRjNC60L4g0LjRgdGC0L7Rh9C90LjQuiDRgNC10YHRg9GA0YHQsCwg0L3QsNC/0YDQuNC80LXRgCDRhNCw0LnQuyDQuNC70Lgg0LHQsNC30LAg0LTQsNC90L3Ri9GFLlxyXG4gKiDQldGB0LvQuCDRgNC10YHRg9GA0YEg0YHQvtC30LTQsNC9INCyINGA0LXQttC40LzQtSAn0YLQvtC70YzQutC+INC30LDQv9C40YHRjCcsINGC0L4g0Y3RgtC+INC00LXQudGB0YLQstC40LUg0LzQvtC20LXRgiDQtNC+0LHQsNCy0LvRj9GC0Ywg0LIg0L3QtdCz0L4g0LTQsNC90L3Ri9C1LiDQkiDRjdGC0L7QvCDRgdC70YPRh9Cw0LUg0L7QvSDQsdGD0LTQtdGCINC30LDQv9C40YHRi9Cy0LDRgtGMINGB0YLRgNC+0LrRgyDQuNC3INC/0LDRgNCw0LzQtdGC0YDQsCAn0JTQsNC90L3Ri9C1JyDQsiDRhNCw0LnQuywg0LLRi9Cx0YDQsNC90L3Ri9C5INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8INC90LAg0Y3RgtCw0L/QtSDQstGL0LHQvtGA0LAg0YDQtdGB0YPRgNGB0L7QsiDQv9GA0Lgg0LfQsNC/0YPRgdC60LUg0YHQutGA0LjQv9GC0LAgKCDQtNC+0LHQsNCy0LvRj9GC0Ywg0LTQsNC90L3Ri9C1INCyINGE0LDQudC7IGh0dHBzOi8vd2lraS5iYWJsb3NvZnQuY29tL2xpYi9leGUvZmV0Y2gucGhwP2NhY2hlPSZtZWRpYT1hZGRkYXRhdG9maWxlLnBuZywg0YDQtdC20LjQvCAn0YLQvtC70YzQutC+INC30LDQv9C40YHRjCcgaHR0cHM6Ly93aWtpLmJhYmxvc29mdC5jb20vbGliL2V4ZS9mZXRjaC5waHA/Y2FjaGU9Jm1lZGlhPXdyaXRlb25seW1vZGUucG5nLCDQstGL0LHQvtGAINGA0LXRgdGD0YDRgdC+0LIgaHR0cHM6Ly93aWtpLmJhYmxvc29mdC5jb20vbGliL2V4ZS9mZXRjaC5waHA/Y2FjaGU9Jm1lZGlhPXJlc291cmNlc2VsZWN0aW9uLnBuZykuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lINCY0LzRjyDRgNC10YHRg9GA0YHQsFxyXG4gINCY0LzRjyDRgNC10YHRg9GA0YHQsCwg0LIg0LrQvtGC0L7RgNGL0Lkg0LHRg9C00LXRgiDQtNC+0LHQsNCy0LvQtdC9INC90L7QstGL0Lkg0Y3Qu9C10LzQtdC90YIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhINCU0LDQvdC90YvQtVxyXG4gINCX0L3QsNGH0LXQvdC40LUg0L3QvtCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAsINC80L7QttC10YIg0LHRi9GC0Ywg0LvRjtCx0L7QuSDRgdGC0YDQvtC60L7QuS5cclxuICogQHBhcmFtIHtib29sZWFufSBvbmx5QWRkINCi0L7Qu9GM0LrQviDQtNC+0LHQsNCy0LjRgtGMINCyINGE0LDQudC7L9Cx0LDQt9GDXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5zdGFudGx5INCU0L7QsdCw0LLQuNGC0Ywg0LIg0YTQsNC50Lsv0LHQsNC30YMg0LzQs9C90L7QstC10L3QvdC+XHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfcmVzb3VyY2VfYWRkKG5hbWUsIGRhdGEsIG9ubHlBZGQsIGluc3RhbnRseSkge1xyXG4gIGNvbnN0IG5hbWUgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ25hbWUnKSB8fCBuYW1lXHJcbiAgY29uc3QgZGF0YSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnZGF0YScpIHx8IGRhdGFcclxuICBjb25zdCBvbmx5QWRkID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdvbmx5QWRkJykgfHwgb25seUFkZFxyXG4gIGNvbnN0IGluc3RhbnRseSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnaW5zdGFudGx5JykgfHwgaW5zdGFudGx5XHJcbiAgUkluc2VydChuYW1lLCBkYXRhLCBvbmx5QWRkKVxyXG4gIGlmIChpbnN0YW50bHkpIFJTeW5jKG5hbWUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQoNCw0YHQv9C+0LvQvtC20LXQvdC40LUg0KDQtdGB0YPRgNGB0LBcclxuICog0J/QvtC70YPRh9C40YLRjCDRgNCw0YHQv9C+0LvQvtC20LXQvdC40LUg0YDQtdGB0YPRgNGB0LAuINCg0LDRgdC/0L7Qu9C+0LbQtdC90LjQtSDRgNC10YHRg9GA0YHQsCAtINC/0YPRgtGMINC6INGE0LDQudC70YMg0LTQu9GPINGA0LXRgdGD0YDRgdCwINGBINGC0LjQv9C+0LwgJ9CY0Lcg0YTQsNC50LvQsCcsIHVybCDQtNC70Y8g0YDQtdGB0YPRgNGB0LAg0YEg0YLQuNC/0L7QvCAn0JjQtyDRgdGB0YvQu9C60LgnINC4INC/0YPRgtGMINC6INC/0LDQv9C60LUg0LTQu9GPINGC0LjQv9CwINGA0LXRgdGD0YDRgdCwICfQpNCw0LnQu9GLINC40Lcg0L/QsNC/0LrQuCcuXHJcbiAqINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0Y3RgtC+INC00LXQudGB0YLQstC40LUg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQv9GD0YLQuCDQuiDRhNCw0LnQu9GDL9C/0LDQv9C60LUsINCy0YvQsdGA0LDQvdC90L7QuSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvC5cclxuICog0KEg0Y3RgtC40Lwg0YTQsNC50LvQvtC8INC40LvQuCDQv9Cw0L/QutC+0Lkg0LzQvtC20L3QviDQsdGD0LTQtdGCINCy0LfQsNC40LzQvtC00LXQudGB0YLQstC+0LLQsNGC0Ywg0L/QvtC30LbQtSDRgSDQv9C+0LzQvtGJ0YzRjiDQvNC+0LTRg9C70Y8gJ9Ck0LDQudC70L7QstCw0Y8g0YHQuNGB0YLQtdC80LAnLlxyXG4gKiDQotC40L/QuNGH0L3Ri9C8INC/0YDQuNC80LXRgNC+0Lwg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0Y3RgtC+0LPQviDQtNC10LnRgdGC0LLQuNGPINCx0YPQtNC10YIg0YPQtNCw0LvQtdC90LjQtSDRhNCw0LnQu9CwINC/0YDQuCDQt9Cw0L/Rg9GB0LrQtSDRgdC60YDQuNC/0YLQsC4g0JTQu9GPINGN0YLQvtCz0L4g0LLRi9C30L7QstC40YLQtSDRjdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQsiDRhNGD0L3QutGG0LjQuCBPbkFwcGxpY2F0aW9uU3RhcnQg0Lgg0L7RgtC/0YDQsNCy0YzRgtC1INGA0LXQt9GD0LvRjNGC0LDRgiDQsiDQtNC10LnRgdGC0LLQuNC1INC00LXQudGB0YLQstC40LUgJ9Cj0LTQsNC70LjRgtGMINCk0LDQudC7L9Cf0LDQv9C60YMnICggc2NyZWVuIGh0dHBzOi8vd2lraS5iYWJsb3NvZnQuY29tL2xpYi9leGUvZmV0Y2gucGhwP2NhY2hlPSZtZWRpYT1kZWxldGVmaWxlZnJvbXJlc291cmNlLnBuZykuXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDQmNC80Y8g0YDQtdGB0YPRgNGB0LBcclxuICDQmNC80Y8g0YDQtdGB0YPRgNGB0LAsINC00LvRjyDQutC+0YLQvtGA0L7Qs9C+INCx0YPQtNC10YIg0L/QvtC70YPRh9C10L3QviDRgNCw0YHQv9C+0LvQvtC20LXQvdC40LUuXHJcbiAqIEByZXR1cm5zINCh0YLRgNC+0LrQsCwg0LIg0LrQvtGC0L7RgNC+0Lkg0LHRg9C00LXRgiDQvdCw0YXQvtC00LjRgtGM0YHRjyDRgNCw0YHQv9C+0LvQvtC20LXQvdC40LUg0YDQtdGB0YPRgNGB0LAuINCg0LDRgdC/0L7Qu9C+0LbQtdC90LjQtSDRgNC10YHRg9GA0YHQsCAtINC/0YPRgtGMINC6INGE0LDQudC70YMg0LTQu9GPINGA0LXRgdGD0YDRgdCwINGBINGC0LjQv9C+0LwgJ9CY0Lcg0YTQsNC50LvQsCcsIHVybCDQtNC70Y8g0YDQtdGB0YPRgNGB0LAg0YEg0YLQuNC/0L7QvCAn0JjQtyDRgdGB0YvQu9C60LgnINC4INC/0YPRgtGMINC6INC/0LDQv9C60LUg0LTQu9GPINGC0LjQv9CwINGA0LXRgdGD0YDRgdCwICfQpNCw0LnQu9GLINC40Lcg0L/QsNC/0LrQuCcuXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfZ2V0X3Jlc291cmNlX2xvY2F0aW9uKG5hbWUpIHtcclxuICBjb25zdCBuYW1lID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCduYW1lJykgfHwgbmFtZVxyXG4gIGNvbnN0IHJlc3VsdCA9IFJJbmZvKG5hbWUsIFwiTG9jYXRpb25cIilcclxuICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQoNC10YHRg9GA0YEg0JIg0KHQv9C40YHQvtC6XHJcbiAqINCh0LrQvtC/0LjRgNC+0LLQsNGC0Ywg0LTQsNC90L3Ri9C1INC40Lcg0YDQtdGB0YPRgNGB0LAg0LIg0YHQv9C40YHQvtC6LlxyXG4gKiDQoNC10LfRg9C70YzRgtCw0YIg0LjQvNC10LXRgiDRgtC40L8g0YHQv9C40YHQvtC6LCDQv9C+0Y3RgtC+0LzRgyDRgSDQvdC40Lwg0LzQvtC20L3QviDRgNCw0LHQvtGC0LDRgtGMINGBINC/0L7QvNC+0YnRjNGOINC80L7QtNGD0LvRjyAn0KHQv9C40YHQvtC6JyDQuNC70Lgg0YEg0L/QvtC80L7RidGM0Y4gamF2YXNjcmlwdC5cclxuICog0J7Rh9C10L3RjCDQstCw0LbQvdC+INC/0L7QvdC40LzQsNGC0YwsINGH0YLQviDQuNC30LzQtdC90LXQvdC40LUg0LLQvtC30LLRgNCw0YnQsNC10LzQvtCz0L4g0YHQv9C40YHQutCwINC90LUg0LLQu9C40Y/QtdGCINC90LAg0YHQsNC8INGA0LXRgdGD0YDRgS5cclxuICog0KLQuNC/0LjRh9C90YvQvCDQv9GA0LjQvNC10YDQvtC8INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCx0YPQtNC10YIg0LrQvtC/0LjRgNC+0LLQsNC90LjQtSDRgNC10YHRg9GA0YHQsCDQsiDRgdC/0LjRgdC+0Log0Lgg0YHQvtC30LTQsNC90LjRjyDRhtC40LrQu9CwINC/0L4g0LrQsNC20LTQvtC80YMg0Y3Qu9C10LzQtdC90YLRgyDRgdC/0LjRgdC60LAgKCBzY3JlZW4gaHR0cHM6Ly93aWtpLmJhYmxvc29mdC5jb20vbGliL2V4ZS9mZXRjaC5waHA/Y2FjaGU9Jm1lZGlhPWl0ZXJhdGVyZXNvdXJjZS5wbmcpLlxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUg0JjQvNGPINGA0LXRgdGD0YDRgdCwXHJcbiAg0JjQvNGPINGA0LXRgdGD0YDRgdCwLCDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINGB0LrQvtC/0LjRgNC+0LLQsNC9INCyINGB0L/QuNGB0L7QulxyXG4gKiBAcmV0dXJucyDQodC/0LjRgdC+0Log0JTQu9GPINCh0L7RhdGA0LDQvdC10L3QuNGPINCU0LDQvdC90YvRhVxyXG4gINCt0YLQsCDQv9C10YDQtdC80LXQvdC90LDRjyDQsdGD0LTQtdGCINGB0L7QtNC10YDQttCw0YLRjCDRgdC/0LjRgdC+0Log0YHQviDQstGB0LXQvNC4INC00LDQvdC90YvQvNC4INC40Lcg0YDQtdGB0YPRgNGB0LAuXHJcbiAg0J/RgNC40LzQtdGA0YsgOlxyXG4gIFtcImxpbmUxXCIsXCJsaW5lMlwiLFwibGluZTNcIl1cclxuICovXHJcbmZ1bmN0aW9uIEJBU19yZXNvdXJjZV9hc19saXN0KG5hbWUpIHtcclxuICBjb25zdCBuYW1lID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCduYW1lJykgfHwgbmFtZVxyXG4gIGNvbnN0IHJlc3VsdCA9IFJQaWNrKG5hbWUpXHJcbiAgX2Z1bmN0aW9uX3JldHVybihyZXN1bHQpXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG4vKipcclxuICog0KHQv9C40YHQvtC6INCSINCg0LXRgdGD0YDRgVxyXG4gKiDQl9Cw0LzQtdC90LjRgtGMINC00LDQvdC90YvQtSDRgNC10YHRg9GA0YHQsCDQtNCw0L3QvdGL0LzQuCDQuNC3INGB0L/QuNGB0LrQsC5cclxuICog0JLRgdC1INC/0YDQtdC00YvQtNGD0YnQuNC1INC00LDQvdC90YvQtSDQsdGD0LTRg9GCINC/0L7RgtC10YDRj9C90YssINC4INGB0L7RgdGC0L7Rj9C90LjQtSDQstGB0LXRhSDQtNCw0L3QvdGL0YUgKNC60L7Qu9C40YfQtdGB0YLQstC+INGD0YHQv9C10YXQvtCyINC4INC90LXRg9C00LDRhyDRgNC10YHRg9GA0YHQsCkg0YLQsNC60LbQtSDQsdGD0LTQtdGCINC/0L7RgtC10YDRj9C90L4uXHJcbiAqINCY0YHQv9C+0LvRjNC30L7QstCw0L3QuNC1INGN0YLQvtCz0L4g0LTQtdC50YHRgtCy0LjRjyDRgSDQv9GD0YHRgtGL0Lwg0YHQv9C40YHQutC+0Lwg0L7Rh9C40YHRgtC40YIg0YDQtdGB0YPRgNGBLlxyXG4gKiDQmtCw0LbQtNGL0Lkg0YDQtdGB0YPRgNGBINGB0L7QtNC10YDQttC40YIg0LrQvtC90YLQtdC50L3QtdGAINGBINC00LDQvdC90YvQvNC4LCDQvdCw0L/RgNC40LzQtdGALCDRgdGC0YDQvtC60Lgg0LjQtyDRhNCw0LnQu9CwLiDQkiDQvtGC0LvQuNGH0LjQtSDQvtGCINGB0L/QuNGB0LrQvtCyLCDRgdC40YHRgtC10LzQsCDRgNC10YHRg9GA0YHQvtCyINC/0L7QvNC+0LPQsNC10YIg0YDQsNGB0L/RgNC10LTQtdC70Y/RgtGMINC00LDQvdC90YvQtSDQv9C+INC/0L7RgtC+0LrQsNC8LCDQsCDRgtCw0LrQttC1INC+0LHRgNCw0LHQsNGC0YvQstCw0LXRgiDRgNCw0LfQu9C40YfQvdGL0LUg0YHQuNGC0YPQsNGG0LjQuCwg0LrQvtGC0L7RgNGL0LUg0LLQvtC30L3QuNC60LDRjtGCINC/0YDQuCDQvtC00L3QvtCy0YDQtdC80LXQvdC90L7QvCDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQuCDQtNCw0L3QvdGL0YUg0LIg0LzQvdC+0LPQvtC/0L7RgtC+0YfQvdC+0Lwg0YDQtdC20LjQvNC1LlxyXG4gKiDQntCx0YvRh9C90L4g0YDQtdGB0YPRgNGB0Ysg0YHQvtC30LTQsNGO0YLRgdGPINC40Lcg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GM0YHQutC+0LPQviDQuNC90YLQtdGA0YTQtdC50YHQsCAo0LrQvdC+0L/QutC+0LkgJysg0KHQvtC30LTQsNGC0Ywg0L3QvtCy0YvQuSDRgNC10YHRg9GA0YEnKSwg0L3QviDRgtCw0LrQttC1INC80L7Qs9GD0YIg0LHRi9GC0Ywg0YHQvtC30LTQsNC90Ysg0LTQtdC50YHRgtCy0LjQtdC8ICfQodC+0LfQtNCw0YLRjCDRgNC10YHRg9GA0YEnLlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQvdC40LrQsNC6INC90LUg0LLQu9C40Y/QtdGCINC90LAg0L3QtdC60L7RgtC+0YDRi9C1INGC0LjQv9GLINGA0LXRgdGD0YDRgdC+0LIsINGC0LDQutC40LUg0LrQsNC6ICfQodGC0YDQvtC60LAnINC40LvQuCAn0KfQuNGB0LvQvicuXHJcbiAqIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDQmNC80Y8g0YDQtdGB0YPRgNGB0LBcclxuICDQmNC80Y8g0YDQtdGB0YPRgNGB0LAsINC00LDQvdC90YvQtSDQutC+0YLQvtGA0L7Qs9C+INCx0YPQtNGD0YIg0LfQsNC80LXQvdC10L3RiyDQtNCw0L3QvdGL0LzQuCDQuNC3INGB0L/QuNGB0LrQsC5cclxuICogQHBhcmFtIHtBcnJheX0gbGlzdCDQrdGC0L7RgiDRgdC/0LjRgdC+0Log0LHRg9C00LXRgiDQv9GA0LXQvtCx0YDQsNC30L7QstCw0L0g0LIg0YDQtdGB0YPRgNGBXHJcbiAg0J/RgNC40LzQtdGA0YsgOlxyXG4gIFtdIC0g0JLQt9GP0YLRjCDQtNCw0L3QvdGL0LUg0LjQtyDQv9GD0YHRgtC+0LPQviDRgdC/0LjRgdC60LAsINGC0L4g0LXRgdGC0Ywg0L7Rh9C40YHRgtC40YLRjCDRgNC10YHRg9GA0YEuXHJcbiAgW1wibGluZTFcIixcImxpbmUyXCIsXCJsaW5lM1wiXSAtINCX0LDQtNCw0YLRjCDQvdC+0LLRi9C1INC00LDQvdC90YvQtSDQtNC70Y8g0YDQtdGB0YPRgNGB0LAuXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfbGlzdF90b19yZXNvdXJjZShuYW1lLCBsaXN0KSB7XHJcbiAgY29uc3QgbmFtZSA9IF9mdW5jdGlvbl9hcmd1bWVudCgnbmFtZScpIHx8IG5hbWVcclxuICBjb25zdCBsaXN0ID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdsaXN0JykgfHwgbGlzdFxyXG4gIFJDbGVhcihuYW1lKVxyXG4gIFJTeW5jKG5hbWUpXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBSSW5zZXJ0KG5hbWUsIGxpc3RbaV0sIGZhbHNlKVxyXG4gIH1cclxuICBSU3luYyhuYW1lKVxyXG59XHJcblxyXG4vKipcclxuICog0J/QtdGA0LXQt9Cw0LPRgNGD0LfQuNGC0Ywg0KDQtdGB0YPRgNGBXHJcbiAqINCf0LXRgNC10LfQsNCz0YDRg9C30LjRgtGMINGB0YLRgNC+0LrQuCDQuNC3INGE0LDQudC70LAg0LjQu9C4INC30LDQv9C40YHQuCDQuNC3INCx0LDQt9GLINC00LDQvdC90YvRhS5cclxuICog0JTQsNC90L3Ri9C1INGA0LXRgdGD0YDRgdCwINCx0YPQtNGD0YIg0L/QvtC70L3QvtGB0YLRjNGOINC30LDQvNC10L3QtdC90Ysg0L3QsCDQvdC+0LLRi9C1LiDQktGB0LUg0YHQvtGB0YLQvtGP0L3QuNGPINCy0YHQtdGFINC00LDQvdC90YvRhSAo0LrQvtC70LjRh9C10YHRgtCy0L4g0YPRgdC/0LXRhdC+0LIg0Lgg0L3QtdGD0LTQsNGHINGA0LXRgdGD0YDRgdCwKSDRgtCw0LrQttC1INCx0YPQtNC10YIg0YHQsdGA0L7RiNC10L3Qvi4g0JXRgdC70Lgg0L3QtdC60L7RgtC+0YDRi9C1INGB0YLRgNC+0LrQuCDQsdGL0LvQuCDRg9C00LDQu9C10L3Riywg0Y3RgtCwINC40L3RhNC+0YDQvNCw0YbQuNGPINGC0LDQutC20LUg0LHRg9C00LXRgiDQv9C+0YLQtdGA0Y/QvdCwLlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDRgdC40LvRjNC90L4g0L3QsNCz0YDRg9C20LDQtdGCINC/0YDQvtGG0LXRgdGB0L7RgCDQuCDQttC10YHRgtC60LjQuSDQtNC40YHQuiwg0L/QvtGN0YLQvtC80YMg0L3QtSDRgNC10LrQvtC80LXQvdC00YPQtdGC0YHRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0LXQs9C+INCyINC80L3QvtCz0L7Qv9C+0YLQvtGH0L3QvtC8INGA0LXQttC40LzQtS5cclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lINCY0LzRjyDRgNC10YHRg9GA0YHQsFxyXG4gINCY0LzRjyDRgNC10YHRg9GA0YHQsCwg0LrQvtGC0L7RgNGL0Lkg0LHRg9C00LXRgiDQv9C10YDQtdC30LDQs9GA0YPQttC10L1cclxuXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfcmVsb2FkX3Jlc291cmNlKG5hbWUpIHtcclxuICBjb25zdCBuYW1lID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCduYW1lJykgfHwgbmFtZVxyXG4gIFJlbG9hZChuYW1lKVxyXG59XHJcblxyXG4vKipcclxuICog0JrQvtC70LjRh9C10YHRgtCy0L4g0K3Qu9C10LzQtdC90YLQvtCyINCSINCg0LXRgdGD0YDRgdC1XHJcbiAqINCf0L7Qu9GD0YfQuNGC0Ywg0LrQvtC70LjRh9C10YHRgtCy0L4g0Y3Qu9C10LzQtdC90YLQvtCyINCyINGA0LXRgdGD0YDRgdC1LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSDQmNC80Y8g0YDQtdGB0YPRgNGB0LBcclxuICDQmNC80Y8g0YDQtdGB0YPRgNGB0LAg0LIg0LrQvtGC0L7RgNC+0Lwg0LHRg9C00LXRgiDQv9C+0LTRgdGH0LjRgtCw0L3RiyDRjdC70LXQvNC10L3RgtGLXHJcbiAqIEByZXR1cm5zINC60L7Qu9C40YfQtdGB0YLQstC+INGN0LvQtdC80LXQvdGC0L7QsiDQsiDQstGL0LHRgNCw0L3QvdC+0Lwg0YDQtdGB0YPRgNGB0LVcclxuICovXHJcbmZ1bmN0aW9uIEJBU19yZXNvdXJjZV9sZW5ndGgobmFtZSkge1xyXG4gIGNvbnN0IG5hbWUgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ25hbWUnKSB8fCBuYW1lXHJcbiAgY29uc3QgcmVzdWx0ID0gU2NyaXB0V29ya2VyLkdldFRvdGFsTGVuZ3RoKG5hbWUpIFxyXG4gIF9mdW5jdGlvbl9yZXR1cm4ocmVzdWx0KVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG4iLCJjbGFzcyI6ImV4cHJlc3Npb24ifV19*/
      /**
      * Создать Ресурс
      * Создать новый ресурс.
      * Каждый ресурс содержит контейнер с данными, например, строки из файла. В отличие от списков, система ресурсов помогает распределять данные по потокам, а также обрабатывает различные ситуации, которые возникают при одновременном использовании данных в многопоточном режиме.
      * Обычно ресурсы создаются из пользовательского интерфейса (кнопкой '+ Создать новый ресурс'), но также могут быть созданы с помощью этого действия.
      * Настоятельно рекомендуется не использовать это действие в коде, который работает в нескольких потоках, потому что каждый поток создаст свой новый ресурс, и это, вероятно, не то, что вам нужно. Вместо этого используйте данное действие в функции OnApplicationStart. Эта функция выполняется только один раз для всего скрипта до любой другой функции и, следовательно, является лучшим местом для создания ресурса ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=onapplicationstartcreateresource.png).
      * После создания ресурса вы, вероятно, захотите заполнить его данными, сделайте это с помощью действия 'Добавить элемент'.
      * После создания и наполнения ресурса данными он может использоваться как любой другой ресурс в любом поле и в любом потоке ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=onapplicationstartuseresource.png).
      * Типичным примером использования этого действия является создание ресурса (в OnApplicationStart), который берет данные из какого-то нестандартного места (например, из редкой системы управления базой данных) или в нестандартном формате или и то, и другое.
      * 'Ждать появления' - очень важный параметр, он определяет поведение в случае, когда список данных ресурса пуст. Если эта настройка влючена, тогда действие, которое получает ресурс, будет ждать до тех пор, пока данные не появятся, если настройка не выбрана, то действие завершится мгновенно с ошибкой.
      * Когда выбрана настройка 'Жадный алгоритм', система ресурсов будет пытаться снова и снова получать одну и ту же строку до тех пор, пока эта строка не исчерпает количество успехов или неудач, и только после того следующая строка станет доступна.
      *
      * @param {string} name Имя ресурса
      Имя ресурса, потом оно может быть использовано для его идентификации. Может быть любой строкой.
      * @param {number} successes Количество успехов
      Максимальное количество успешных применений текущего ресурса. Использование ресурса считается успешным, если поток, который использовал его, был выполнен успешно. Например, если ресурс содержит прокси и скрипт регистрирует аккаунты, то этот параметр указывает, сколько учетных записей может быть зарегистрировано для одного прокси.
      * @param {number} fails Количество неудач
      Максимальное количество неудачных использований текущего ресурса. Использование ресурса считается неудачным, если поток, который использовал его, заканчивается неудачей. Например, если ресурс содержит прокси и скрипт создает учетные записи, то этот параметр указывает, сколько неудачнх регистраций возможно для одного прокси.
      * @param {number} simultaneous Одновременных использований
      Максимальное количество одновременных использований. Например, если ресурс содержит прокси, то этот параметр указывает, сколько раз прокси может использоваться одновременно.
      * @param {number} interval Интервалы между использованиями
      Интервал между использованием в миллисекундах.
      Примеры :
      0 - После того, как ресурс будет использован, его можно будет сразу же снова получить повторно.
      5000 - Интервал между каждым использованием ресурса должен быть не менее 5 секунд. Интервал применяется не ко всему списку данных, а к каждому его элементу. Например, если ресурс содержит прокси, то эта настройка задает интервал между использованиями каждого прокси в 5 секунд.
      * @param {boolean} greedy Жадный алгоритм
      * @param {boolean} dont_give_up Ждать появления
      */
      function BAS_create_resource(
      name,
      successes,
      fails,
      simultaneous,
      interval,
      greedy,
      dont_give_up
      ) {
      const name = _function_argument('name') || name
      const successes = _function_argument('successes') || successes
      const fails = _function_argument('fails') || fails
      const simultaneous = _function_argument('simultaneous') || simultaneous
      const interval = _function_argument('interval') || interval
      const greedy = _function_argument('greedy') || greedy
      const dont_give_up = _function_argument('dont_give_up') || dont_give_up
      RCreate(name, successes, fails, simultaneous, interval, greedy, dont_give_up)
      }
      /**
      * Удалить Текущий Элемент
      * Удалить ресурс. Если тип ресурса - 'Из файла', текущая строка будет удалена из файла, если тип ресурса 'База', текущая запись будет удалена из базы данных и т. д.
      * Текущая строка - это строка, которая была получена последней в текущем потоке. Например, если у вас есть ресурс 'Прокси', и этот прокси забанен на целевом сайте, вы можете использовать это действие с именем ресурса 'Прокси'. Это приведет к удалению прокси из файла и он никогда больше не будет использоваться на протяжении всей работы скрипта.
      * По умолчанию удаление строк из файла происходит не сразу, это сделано для оптимизации использования жесткого диска. Но если вы установите настройку 'Удалить из файла/базы мгновенно', то файл будет очищен и перезаписан мгновенно после завершения этого действия.
      * Обычно вам не нужно вызывать это действие для удаление ресурсов, использованные ресурсы могут быть очищены автоматически, если при создании ресурса выбран параметр 'Чтение и удаление строк после использования'. ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=deleteresourceafteruse.png). Ресурс будет автоматически очищен в случае достижения заданного числа успешных или неудачных использований ресурса. Например, если при создании ресурса вы указали 'Используйте каждую строку один раз', то ресурс будет удален автоматически после первого использования ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=singleusageres.png).
      *
      * @param {string} name Имя ресурса
      Имя ресурса, для которого последний использованный элемент будет удален.
      * @param {boolean} instantly Удалить из файла/базы мгновенно
      */
      function BAS_delete_resource(name, instantly) {
      const name = _function_argument('name') || name
      const instantly = _function_argument('instantly') || instantly
      if (name in _R && _R[name]) {
      _R[name].die()
      _R[name] = null
      }
      if (instantly) RSync(name)
      }
      /**
      * Добавить Элемент
      * Добавить новый элемент в ресурс. Например, добавить новую строку в файл или новую запись в базу данных.
      * Каждый ресурс содержит контейнер с данными, например, строки из файла. В отличие от списков, система ресурсов помогает распределять данные по потокам, а также обрабатывает различные ситуации, которые возникают при одновременном использовании данных в многопоточном режиме.
      * Обычно ресурсы создаются из пользовательского интерфейса (кнопкой '+ Создать новый ресурс'), но также могут быть созданы действием 'Создать ресурс'.
      * С помощью этого действия вы можете добавлять данные в любой тип ресурсов. Это действие не влияет на некоторые типы ресурсов, такие как 'Строка' или 'Число'. Обычно действие используется для добавления строк в файл.
      * По умолчанию добавление строк в файл происходит не сразу, это сделано для оптимизации использования жесткого диска. Но если вы установите настройку 'Добавить в файл/базу мгновенно', файл будет обновлен мгновенно.
      * Если выбрана настройка 'Только добавить в файл/базу', то список данных внутри ресурса не будет обновляться, будет изменен только источник ресурса, например файл или база данных.
      * Если ресурс создан в режиме 'только запись', то это действие может добавлять в него данные. В этом случае он будет записывать строку из параметра 'Данные' в файл, выбранный пользователем на этапе выбора ресурсов при запуске скрипта ( добавлять данные в файл https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=adddatatofile.png, режим 'только запись' https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=writeonlymode.png, выбор ресурсов https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=resourceselection.png).
      *
      * @param {string} name Имя ресурса
      Имя ресурса, в который будет добавлен новый элемент.
      * @param {string} data Данные
      Значение нового элемента, может быть любой строкой.
      * @param {boolean} onlyAdd Только добавить в файл/базу
      * @param {boolean} instantly Добавить в файл/базу мгновенно
      */
      function BAS_resource_add(name, data, onlyAdd, instantly) {
      const name = _function_argument('name') || name
      const data = _function_argument('data') || data
      const onlyAdd = _function_argument('onlyAdd') || onlyAdd
      const instantly = _function_argument('instantly') || instantly
      RInsert(name, data, onlyAdd)
      if (instantly) RSync(name)
      }
      /**
      * Расположение Ресурса
      * Получить расположение ресурса. Расположение ресурса - путь к файлу для ресурса с типом 'Из файла', url для ресурса с типом 'Из ссылки' и путь к папке для типа ресурса 'Файлы из папки'.
      * Используйте это действие для получения пути к файлу/папке, выбранной пользователем.
      * С этим файлом или папкой можно будет взаимодействовать позже с помощью модуля 'Файловая система'.
      * Типичным примером использования этого действия будет удаление файла при запуске скрипта. Для этого вызовите это действие в функции OnApplicationStart и отправьте результат в действие действие 'Удалить Файл/Папку' ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=deletefilefromresource.png).
      *
      * @param {string} name Имя ресурса
      Имя ресурса, для которого будет получено расположение.
      * @returns Строка, в которой будет находиться расположение ресурса. Расположение ресурса - путь к файлу для ресурса с типом 'Из файла', url для ресурса с типом 'Из ссылки' и путь к папке для типа ресурса 'Файлы из папки'.
      */
      function BAS_get_resource_location(name) {
      const name = _function_argument('name') || name
      const result = RInfo(name, "Location")
      _function_return(result)
      return result
      }
      /**
      * Ресурс В Список
      * Скопировать данные из ресурса в список.
      * Результат имеет тип список, поэтому с ним можно работать с помощью модуля 'Список' или с помощью javascript.
      * Очень важно понимать, что изменение возвращаемого списка не влияет на сам ресурс.
      * Типичным примером использования будет копирование ресурса в список и создания цикла по каждому элементу списка ( screen https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=iterateresource.png).
      *
      * @param {string} name Имя ресурса
      Имя ресурса, который будет скопирован в список
      * @returns Список Для Сохранения Данных
      Эта переменная будет содержать список со всеми данными из ресурса.
      Примеры :
      ["line1","line2","line3"]
      */
      function BAS_resource_as_list(name) {
      const name = _function_argument('name') || name
      const result = RPick(name)
      _function_return(result)
      return result
      }
      /**
      * Список В Ресурс
      * Заменить данные ресурса данными из списка.
      * Все предыдущие данные будут потеряны, и состояние всех данных (количество успехов и неудач ресурса) также будет потеряно.
      * Использование этого действия с пустым списком очистит ресурс.
      * Каждый ресурс содержит контейнер с данными, например, строки из файла. В отличие от списков, система ресурсов помогает распределять данные по потокам, а также обрабатывает различные ситуации, которые возникают при одновременном использовании данных в многопоточном режиме.
      * Обычно ресурсы создаются из пользовательского интерфейса (кнопкой '+ Создать новый ресурс'), но также могут быть созданы действием 'Создать ресурс'.
      * Это действие никак не влияет на некоторые типы ресурсов, такие как 'Строка' или 'Число'.
      *
      * @param {string} name Имя ресурса
      Имя ресурса, данные которого будут заменены данными из списка.
      * @param {Array} list Этот список будет преобразован в ресурс
      Примеры :
      [] - Взять данные из пустого списка, то есть очистить ресурс.
      ["line1","line2","line3"] - Задать новые данные для ресурса.
      */
      function BAS_list_to_resource(name, list) {
      const name = _function_argument('name') || name
      const list = _function_argument('list') || list
      RClear(name)
      RSync(name)
      for (var i = 0; i < list.length; i++) {
      RInsert(name, list[i], false)
      }
      RSync(name)
      }
      /**
      * Перезагрузить Ресурс
      * Перезагрузить строки из файла или записи из базы данных.
      * Данные ресурса будут полностью заменены на новые. Все состояния всех данных (количество успехов и неудач ресурса) также будет сброшено. Если некоторые строки были удалены, эта информация также будет потеряна.
      * Это действие сильно нагружает процессор и жесткий диск, поэтому не рекомендуется использовать его в многопоточном режиме.
      *
      * @param {string} name Имя ресурса
      Имя ресурса, который будет перезагружен
      */
      function BAS_reload_resource(name) {
      const name = _function_argument('name') || name
      Reload(name)
      }
      /**
      * Количество Элементов В Ресурсе
      * Получить количество элементов в ресурсе.
      * @param {string} name Имя ресурса
      Имя ресурса в котором будет подсчитаны элементы
      * @returns количество элементов в выбранном ресурсе
      */
      function BAS_resource_length(name) {
      const name = _function_argument('name') || name
      const result = ScriptWorker.GetTotalLength(name)
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022script_statistics\u0022\u007d", 243317397)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQndC+0LzQtdGAINC/0L7RgtC+0LrQsFxyXG4gKiDQn9C+0LvRg9GH0LjRgtGMINC90L7QvNC10YAg0YLQtdC60YPRidC10LPQviDRgNCw0LHQvtGC0LDRjtGJ0LXQs9C+INC/0L7RgtC+0LrQsC5cclxuICogQHJldHVybnMg0L3QvtC80LXRgCDQv9C+0YLQvtC60LBcclxuICovXHJcbmZ1bmN0aW9uIEJBU190aHJlYWRfbnVtYmVyKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGhyZWFkX251bWJlcigpXHJcbiAgICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICAgIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLyoqXHJcbiAqINCj0YHQv9C10YjQvdGL0YUg0LLRi9C/0L7Qu9C90LXQvdC40LlcclxuICog0J/QvtC70YPRh9C40YLRjCDQutC+0LvQuNGH0LXRgdGC0LLQviDRg9GB0L/QtdGI0L3Ri9GFINCy0YvQv9C+0LvQvdC10L3QuNC5INGC0LXQutGD0YnQtdCz0L4g0YHQutGA0LjQv9GC0LAuXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfc3VjY2Vzc19udW1iZXIoKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBzdWNjZXNzX251bWJlcigpXHJcbiAgICBfZnVuY3Rpb25fcmV0dXJuKHJlc3VsdClcclxuICAgIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLyoqXHJcbiAqINCd0LXRg9C00LDRh9C90YvRhSDQstGL0L/QvtC70L3QtdC90LjQuVxyXG4gKiDQn9C+0LvRg9GH0LjRgtGMINC60L7Qu9C40YfQtdGB0YLQstC+INC90LXRg9C00LDRh9C90YvRhSDQstGL0L/QvtC70L3QtdC90LjQuSDRgtC10LrRg9GJ0LXQs9C+INGB0LrRgNC40L/RgtCwLlxyXG4gKi9cclxuZnVuY3Rpb24gQkFTX2ZhaWxfbnVtYmVyKCkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZmFpbF9udW1iZXIoKVxyXG4gICAgX2Z1bmN0aW9uX3JldHVybihyZXN1bHQpXHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbn0iLCJjbGFzcyI6ImV4cHJlc3Npb24ifV19*/
      /**
      * Номер потока
      * Получить номер текущего работающего потока.
      * @returns номер потока
      */
      function BAS_thread_number() {
      const result = thread_number()
      _function_return(result)
      return result
      }
      /**
      * Успешных выполнений
      * Получить количество успешных выполнений текущего скрипта.
      */
      function BAS_success_number() {
      const result = success_number()
      _function_return(result)
      return result
      }
      /**
      * Неудачных выполнений
      * Получить количество неудачных выполнений текущего скрипта.
      */
      function BAS_fail_number() {
      const result = fail_number()
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022smtp_settings\u0022\u007d", 29285173)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiBTTVRQINCd0LDRgdGC0YDQvtC50LrQuFxyXG4gKiDQndCw0YHRgtGA0L7QuNGC0Ywg0LTQvtGB0YLRg9C/INC6IFNNVFAg0YHQtdGA0LLQtdGA0YMg0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLLlxyXG4gKiBAcGFyYW0gaG9zdCDQkNC00YDQtdGBIFNNVFAg0YHQtdGA0LLQtdGA0LBcclxuICogQHBhcmFtIHBvcnQg0J/QvtGA0YJcclxuICogQHBhcmFtIGxvZ2luINCY0LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8uINCc0L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8XHJcbiAqIEBwYXJhbSBwYXNzINCf0LDRgNC+0LvRjC4g0JzQvtC20LXRgiDQsdGL0YLRjCDQv9GD0YHRgtGL0LxcclxuICogQHBhcmFtIGVuY3J5cHQg0KjQuNGE0YDQvtCy0LDQvdC40LVcclxuICovXHJcbmZ1bmN0aW9uIEJBU19zbXRwX2NsaWVudF9zZXRfY29uZmlnKCkge1xyXG4gICAgY29uc3QgaG9zdCA9IF9mdW5jdGlvbl9hcmd1bWVudCgnaG9zdCcpXHJcbiAgICBjb25zdCBwb3J0ID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdwb3J0JylcclxuICAgIGNvbnN0IGxvZ2luID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdsb2dpbicpXHJcbiAgICBjb25zdCBwYXNzID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdwYXNzJylcclxuICAgIGNvbnN0IGVuY3J5cHQgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ2VuY3J5cHQnKSB8fCAnc3NsJ1xyXG4gICAgc210cF9jbGllbnRfc2V0X2NvbmZpZyhob3N0LCBwb3J0LCBsb2dpbiwgcGFzcywgZW5jcnlwdClcclxufVxyXG5cclxuLyoqXHJcbiAqIFNNVFAg0J/RgNC+0LrRgdC4XHJcbiAqINCf0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIFNNVFAg0LrQu9C40LXQvdGCINGA0LDQsdC+0YLQsNC10YIg0LHQtdC3INC/0YDQvtC60YHQuCwg0Y3RgtC+INC00LXQudGB0YLQstC40LUg0YPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0L/RgNC+0LrRgdC4INC00LvRjyBTTVRQINC60LvQuNC10L3RgtCwLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmVyINCf0YDQvtC60YHQuFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9ydCDQotC40L8g0L/RgNC+0LrRgdC4XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lINCf0YDQvtC60YHQuCDQm9C+0LPQuNC9LiDQnNC+0LbQtdGCINCx0YvRgtGMINC/0YPRgdGC0YvQvC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkINCf0LDRgNC+0LvRjCDQn9GA0L7QutGB0LguINCc0L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8LlxyXG4gKi9cclxuZnVuY3Rpb24gQkFTX3NtdHBfY2xpZW50X3NldF9wcm94eShzZXJ2ZXIsIHBvcnQsIG5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgY29uc3Qgc2VydmVyID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdzZXJ2ZXInKSB8fCBzZXJ2ZXJcclxuICBjb25zdCBwb3J0ID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdwb3J0JykgfHwgcG9ydFxyXG4gIGNvbnN0IG5hbWUgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ25hbWUnKSB8fCBuYW1lXHJcbiAgY29uc3QgcGFzc3dvcmQgPSBfZnVuY3Rpb25fYXJndW1lbnQoJ3Bhc3N3b3JkJykgfHwgcGFzc3dvcmRcclxuXHJcbiAgY29uc3QgaGFzaCA9IHByb3h5X3BhcnNlKHNlcnZlcilcclxuICBpZiAocG9ydCAhPT0gXCJhdXRvXCIpIHtcclxuICAgIGhhc2guSXNIdHRwID0gcG9ydCA9PT0gXCJodHRwXCJcclxuICB9XHJcbiAgY29uc3QgbG9naW4gPSBuYW1lXHJcbiAgY29uc3QgcGFzc3dvcmQgPSBwYXNzd29yZFxyXG4gIGlmIChsb2dpbi5sZW5ndGggPiAwICYmIHBhc3N3b3JkLmxlbmd0aCA+IDApIHtcclxuICAgIGhhc2gubmFtZSA9IGxvZ2luXHJcbiAgICBoYXNoLnBhc3N3b3JkID0gcGFzc3dvcmRcclxuICB9XHJcbiAgc210cF9jbGllbnRfc2V0X3Byb3h5KFxyXG4gICAgaGFzaC5zZXJ2ZXIsXHJcbiAgICBoYXNoLlBvcnQsXHJcbiAgICBoYXNoLklzSHR0cCxcclxuICAgIGhhc2gubmFtZSxcclxuICAgIGhhc2gucGFzc3dvcmRcclxuICApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQntGC0L/RgNCw0LLQuNGC0Ywg0L/QuNGB0YzQvNC+IChCQVMt0YTRg9C90LrRhtC40Y8pXHJcbiAqINCe0YLQv9GA0LDQstC40YLRjCDRgdC+0L7QsdGJ0LXQvdC40LUg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLLCDQuNGB0L/QvtC70YzQt9GD0Y8gU01UUC3QutC70LjQtdC90YIuINCe0L0g0LTQvtC70LbQtdC9INCx0YvRgtGMINC/0YDQtdC00LLQsNGA0LjRgtC10LvRjNC90L4g0L3QsNGB0YLRgNC+0LXQvSDRgSDQv9C+0LzQvtGJ0YzRjiDQtNC10LnRgdGC0LLQuNGPIFwiU01UUCDQndCw0YHRgtGA0L7QudC60LhcIi5cclxuICogQHBhcmFtIHtzdHJpbmd9IG1haWxfZnJvbSDQntGCINC60L7Qs9C+XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYWlsX3RvINCa0L7QvNGDXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYWlsX2NjINCa0L7Qv9C40Y8uINCc0L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFpbF9zdWJqZWN0INCi0LXQvNCwINC/0LjRgdGM0LzQsC4g0JzQvtC20LXRgiDQsdGL0YLRjCDQv9GD0YHRgtGL0LwuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYWlsX2JvZHkg0KLQtdC60YHRgiDQv9C40YHRjNC80LAuINCc0L7QttC10YIg0LHRi9GC0Ywg0L/Rg9GB0YLRi9C8LlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX2h0bWwg0J7RgtC/0YDQsNCy0LjRgtGMINC60LDQuiBIVE1MXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdHRhY2htZW50cyDQn9GA0LjQutGA0LXQv9C70Y/QtdC80YvQtSDRhNCw0LnQu9GLLiDQnNC+0LbQtdGCINCx0YvRgtGMINC/0YPRgdGC0YvQvC5cclxuICovXHJcbmZ1bmN0aW9uIEJBU19zZW5kX2VtYWlsKCkge1xyXG4gIGNvbnN0IGFyZ3MgPSBfYXJndW1lbnRzKClcclxuICBjb25zdCBtYWlsY2MgPSBhcmdzLm1haWxfY2MgfHwgXCJcIlxyXG4gIGNvbnN0IG1haWxzdWJqZWN0ID0gYXJncy5tYWlsX3N1YmplY3QgfHwgXCJcIlxyXG4gIGNvbnN0IG1haWxib2R5ID0gYXJncy5tYWlsX2JvZHkgfHwgXCJcIlxyXG4gIGNvbnN0IGF0dGFjaG1lbnRzID0gYXJncy5hdHRhY2htZW50cyB8fCBcIlwiXHJcbiAgbmF0aXZlX2FzeW5jKFxyXG4gICAgXCJjdXJsd3JhcHBlclwiLFxyXG4gICAgXCJlYXN5cGVyZm9ybVwiLFxyXG4gICAgSlNPTi5zdHJpbmdpZnkoXHJcbiAgICAgIHNtdHBfY2xpZW50X3NlbmRfbWFpbChcclxuICAgICAgICBhcmdzLm1haWxfZnJvbSxcclxuICAgICAgICBhcmdzLm1haWxfdG8sXHJcbiAgICAgICAgbWFpbGNjLFxyXG4gICAgICAgIG1haWxzdWJqZWN0LFxyXG4gICAgICAgIG1haWxib2R5LFxyXG4gICAgICAgIGFyZ3MuaXNfaHRtbCxcclxuICAgICAgICBhdHRhY2htZW50c1xyXG4gICAgICApXHJcbiAgICApXHJcbiAgKSFcclxuICB7XHJcbiAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShfcmVzdWx0KCkpXHJcbiAgICBpZih0eXBlb2YoX1NNVFBfREVCVUcpICE9IFwidW5kZWZpbmVkXCIgJiYgX1NNVFBfREVCVUcpXHJcbiAgICBsb2coanNvbltcInRyYWNlXCJdKTtcclxuICAgIGlmKGpzb25bXCJjb2RlXCJdICE9IFwiQ1VSTEVfT0tcIilcclxuICAgIHtcclxuICAgIGZhaWwoanNvbltcImNvZGVcIl0gKyBcIjogXCIgKyBqc29uW1wiZXJyb3JcIl0pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICog0JLQutC70Y7Rh9C40YLRjCDQvtGC0LvQsNC00LrRg1xyXG4gKiDQktC60LvRjtGH0LjRgtGMINGA0LXQttC40Lwg0L7RgtC70LDQtNC60Lgg0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZSDQktC60LvRjtGH0LjRgtGMINC+0YLQu9Cw0LTQutGDXHJcbiAqL1xyXG5mdW5jdGlvbiBCQVNfc210cF9kZWJ1Z19lbmFibGUoZW5hYmxlKSB7XHJcbiAgY29uc3QgZW5hYmxlID0gX2Z1bmN0aW9uX2FyZ3VtZW50KCdlbmFibGUnKSB8fCBlbmFibGVcclxuICBfU01UUF9ERUJVRyA9IGVuYWJsZVxyXG59IiwiY2xhc3MiOiJleHByZXNzaW9uIn1dfQ==*/
      /**
      * SMTP Настройки
      * Настроить доступ к SMTP серверу для отправки электронной почты.
      * @param host Адрес SMTP сервера
      * @param port Порт
      * @param login Имя пользователя. Может быть пустым
      * @param pass Пароль. Может быть пустым
      * @param encrypt Шифрование
      */
      function BAS_smtp_client_set_config() {
      const host = _function_argument('host')
      const port = _function_argument('port')
      const login = _function_argument('login')
      const pass = _function_argument('pass')
      const encrypt = _function_argument('encrypt') || 'ssl'
      smtp_client_set_config(host, port, login, pass, encrypt)
      }
      /**
      * SMTP Прокси
      * По умолчанию SMTP клиент работает без прокси, это действие устанавливает прокси для SMTP клиента.
      * @param {string} server Прокси
      * @param {string} port Тип прокси
      * @param {string} name Прокси Логин. Может быть пустым.
      * @param {string} password Пароль Прокси. Может быть пустым.
      */
      function BAS_smtp_client_set_proxy(server, port, name, password) {
      const server = _function_argument('server') || server
      const port = _function_argument('port') || port
      const name = _function_argument('name') || name
      const password = _function_argument('password') || password
      const hash = proxy_parse(server)
      if (port !== "auto") {
      hash.IsHttp = port === "http"
      }
      const login = name
      const password = password
      if (login.length > 0 && password.length > 0) {
      hash.name = login
      hash.password = password
      }
      smtp_client_set_proxy(
      hash.server,
      hash.Port,
      hash.IsHttp,
      hash.name,
      hash.password
      )
      }
      /**
      * Отправить письмо (BAS-функция)
      * Отправить сообщение электронной почты, используя SMTP-клиент. Он должен быть предварительно настроен с помощью действия "SMTP Настройки".
      * @param {string} mail_from От кого
      * @param {string} mail_to Кому
      * @param {string} mail_cc Копия. Может быть пустым.
      * @param {string} mail_subject Тема письма. Может быть пустым.
      * @param {string} mail_body Текст письма. Может быть пустым.
      * @param {boolean} is_html Отправить как HTML
      * @param {string} attachments Прикрепляемые файлы. Может быть пустым.
      */
      function BAS_send_email() {
      const args = _arguments()
      const mailcc = args.mail_cc || ""
      const mailsubject = args.mail_subject || ""
      const mailbody = args.mail_body || ""
      const attachments = args.attachments || ""
      native_async(
      "curlwrapper",
      "easyperform",
      JSON.stringify(
      smtp_client_send_mail(
      args.mail_from,
      args.mail_to,
      mailcc,
      mailsubject,
      mailbody,
      args.is_html,
      attachments
      )
      )
      )!
      {
      const json = JSON.parse(_result())
      if(typeof(_SMTP_DEBUG) != "undefined" && _SMTP_DEBUG)
      log(json["trace"]);
      if(json["code"] != "CURLE_OK")
      {
      fail(json["code"] + ": " + json["error"])
      }
      }
      }
      /**
      * Включить отладку
      * Включить режим отладки для отправки электронной почты.
      * @param {boolean} enable Включить отладку
      */
      function BAS_smtp_debug_enable(enable) {
      const enable = _function_argument('enable') || enable
      _SMTP_DEBUG = enable
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022string\u0022\u007d", 725553218)!
      /*Dat:*/
      /**
      * Является ли строкой
      * Проверить, являются ли указанные данные строкой.
      * Это действие вернет true или false в зависимости от того, являются ли указанные данные строкой. Результат может быть использован вместе с действием "If".
      * Например, если указано "Тестовый текст", то действие вернет true, а если укзано 123 или true, то действие вернет false.
      *
      * @param data Данные
      Данные, которые нужно проверить на то являются ли они строкой.
      Примеры :
      Просто пример текста - Строка
      Пустая строка - Строка
      123 - Не строка
      null - Не строка
      * @returns true или false в зависимости от того, являются ли указанные данные строкой.
      Примеры :
      true - Данные являются строкой.
      false - Данные не являются строкой.
      */
      function BAS_is_string() {
      const data = _function_argument('data')
      const result = _is_string(data)
      _function_return(result)
      return result
      }
      /**
      * Не пустая строка
      * Проверить, являются ли указанные данные не пустой строкой.
      * Это действие вернет true или false в зависимости от того, являются ли указанные данные не пустой строкой. Результат может быть использован вместе с действием "If".
      * Например, если указано "Тестовый текст", то действие вернет true, а если укзано "" или 123, то действие вернет false.
      *
      * @param data Данные
      Данные, которые нужно проверить на то являются ли они не пустой строкой.
      Примеры :
      Просто пример текста - Не пустая строка
      "" - Пустая строка
      @returns true или false в зависимости от того, являются ли указанные данные не пустой строкой.
      Примеры :
      true - Не пустая строка.
      false - Пустая строка или не строка.
      */
      function BAS_is_not_empty_string() {
      const data = _function_argument('data')
      const result = _is_not_empty_string(data)
      _function_return(result)
      return result
      }
      /**
      * В строку
      * Преобразовать указанные данные в строку.
      * Это действие вернет строковое представление указанных данных.
      * Это действие работает с любым типом данных.
      * Например, если указано 123, то действие вернет "123", а если укзано true, то действие вернет "true".
      * @param data Данные
      Данные, которые нужно преобразовать в строку.
      Примеры :
      123 - Число
      true - Булевый тип
      {"text":"Test text","num":123} - Объект
      Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time) - Дата
      @returns строковое представление указанных данных.
      Примеры :
      123
      true
      {"text":"Test text","num":123}
      Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time)
      */
      function BAS_to_string() {
      const data = _function_argument('data')
      const result = _to_string(data)
      _function_return(result)
      return result
      }
      /**
      * В число
      * Преобразовать указанную строку в число.
      * Это действие вернет числовое представление указанной строки.
      * Например, если указано "123", то действие вернет 123, а если укзано "123.45", то действие вернет 123.45.
      * Итоговое число можно округлить, указав параметр "Количество знаков в дробной части", находящийся в дополнительных настройках.
      * Это действие может преобразовывать числа в нестандартном формате для этого нужно указать параметры "Разделитель целой и дробной части" и "Разделитель тысячных" находящиеся в дополнительных настройках.
      * Например, строка "1 967 567,3245" будет преобразована в число 1967567.3245, если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
      *
      * @param str Строка
      Строка, которую нужно преобразовать в число.
      Примеры :
      123
      100,000
      1,456.578
      * @param dec Количество знаков в дробной части
      Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
      Примеры :
      4 - 156.6439
      2 - 21.78
      0 - Округлить до целого числа
      -1 - Не округлять число
      Пустая строка - Не округлять число
      * @param dsep Разделитель целой и дробной части
      Необязательный параметр. Разделитель между целой и дробной частями числа.
      Примеры :
      "." - 156.6439
      "," - 156,6439
      Пустая строка - "." - 156.6439
      * @param tsep Разделитель тысячных
      Необязательный параметр. Разделитель между тысячными.
      Примеры :
      " " - 1 000 000.01
      "," - 1,000,000.01
      Пустая строка - "," - 1,000,000.01
      * @returns числовое представление указанной строки.
      Примеры :
      123
      100000
      1456.578
      */
      function BAS_to_number() {
      const str = _function_argument('str')
      const dec = _function_argument('dec') || ''
      const dsep = _function_argument('dsep') || ''
      const tsep = _function_argument('tsep') || ''
      const result = _to_number(str, dec, dsep, tsep)
      _function_return(result)
      return result
      }
      /**
      * Форматировать число
      * Форматировать и преобразовать в строку указанное число.
      * Данным действием можно привести число в более читабельный вид, например, для дальнейшего вывода в лог.
      * Перед форматирование число можно округлить, указав параметр "Количество знаков в дробной части".
      * Это действие вернет форматированное строковое представление указанного числа.
      * Например, число 1967567.3245 будет преобразована в строку "1 967 567,3245", если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
      *
      * @param num Число
      Число, которое нужно форматировать и преобразовать в строку.
      Примеры :
      123
      100000
      1456.578
      * @param dec Количество знаков в дробной части. Может быть пустым
      Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
      Примеры :
      4 - 156.6439
      2 - 21.78
      0 - Округлить до целого числа
      -1 - Не округлять число
      Пустая строка - Не округлять число
      * @param digits Минимальное количество символов в числе. Может быть пустым
      Необязательный параметр. Минимальное количество символов в числе. Если количество символов меньше указанного числа, то в место недостающих символов перед числом будут добавлены нули.
      Примеры :
      4 - 0321
      2 - 01
      0 - Не изменять количество символов
      Пустая строка - Не изменять количество символов
      * @param dsep Разделитель целой и дробной части. Может быть пустым
      Необязательный параметр. Разделитель между целой и дробной частями числа.
      Примеры :
      "." - 156.6439
      "," - 156,6439
      Пустая строка - "." - 156.6439
      * @param tsep Разделитель тысячных. Может быть пустым
      Необязательный параметр. Разделитель между тысячными.
      Примеры :
      " " - 1 000 000.01
      "," - 1,000,000.01
      Пустая строка - "," - 1,000,000.01
      * @returns форматированное строковое представление указанного числа.
      Примеры :
      123
      100,000
      1,456.578
      */
      function BAS_number_format() {
      const num = _function_argument('num')
      const dec = _function_argument('dec') || ''
      const digits = _function_argument('digits') || ''
      const dsep = _function_argument('dsep') || ''
      const tsep = _function_argument('tsep') || ''
      const result = _number_format(num, dec, digits, dsep, tsep)
      _function_return(result)
      return result
      }
      /**
      * Количество подстрок
      * Получить количество подстрок в строке.
      * Это действие вернет число, равное количеству подстрок в строке.
      * Например, если указана строка "Тестовый текст" и подстрока "те", то действие вернет 2, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет 1.
      *
      * @param str Строка
      Строка, из которой нужно получить количество подстрок.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param sub Подстрока
      Непустая связная часть строки.
      Примеры :
      пример
      text
      str
      @returns количество подстрок в строке.
      Примеры :
      5
      2
      0 - Подстрока отсутствует в строке.
      */
      function BAS_count_substrings() {
      const str = _function_argument('str')
      const sub = _function_argument('sub')
      const result = _count_substrings(str, sub)
      _function_return(result)
      return result
      }
      /**
      * Получить подстроку
      * Получить подстроку из строки.
      * Это действие вернет полученную подстроку.
      * Например, чтобы получить из строки "Просто пример строки" подстроку "пример", нужно в параметр "С индекса" указать 7, а в парамет "До индекса" указть 13.
      * Если параметры "С индекса" и "До индекса" не указаны, будут получена вся строка.
      * Если параметр "С индекса" указан, а параметр "До индекса" не указан, будут получены все символы с указанного до конца строки.
      * Если параметр "С индекса" не указан, а параметр "До индекса" указан, будут получены все символы с первого до указанного.
      * Если оба параметра "С индекса" и "До индекса" указаны, будут получены все символы с указанного до указанного.
      * Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
      *
      * @param str Строка
      Строка, из которой нужно получить подстроку.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param from С индекса. Может быть пустым
      Индекс символа, с которого начинается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
      Примеры :
      1 - С второго символа
      0 - С первого символа
      -1 - С последнего символа
      Пустая строка - С начала строки
      * @param to До индекса. Может быть пустым
      Индекс символа, которым заканчивается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
      Примеры :
      1 - До второго символа
      0 - До первого символа
      -1 - До последнего символа
      Пустая строка - До конца строки
      @returns подстрока.
      Примеры :
      пример
      text
      str
      *
      */
      function BAS_get_substring() {
      const str = _function_argument('str')
      const from = _function_argument('from') || ''
      const to = _function_argument('to') || ''
      const result = _get_substring(str, from, to)
      _function_return(result)
      return result
      }
      /**
      * Получить подстроку между
      * Получить подстроку между двумя подстроками.
      * Это действие вернет полученную подстроку.
      * Например, чтобы получить из строки "<h1>Заголовок текста</h1>" подстроку "Заголовок текста", нужно в параметр "Левая подстрока" указать "<h1>", а в парамет "Правая подстрока" указть "</h1>".
      * Если параметры "Левая подстрока" и "Правая подстрока" не указаны, будут получена вся строка.
      * Если параметр "Левая подстрока" указан, а параметр "Правая подстрока" не указан, будут получены все символы от указанной подстроки до конца строки.
      * Если параметр "Левая подстрока" не указан, а параметр "Правая подстрока" указан, будут получены все символы с первого до указанной подстрки.
      * Если оба параметра "Левая подстрока" и "Правая подстрока" указаны, будут получены все символы от указанной подстроки до указанной подстрки.
      *
      * @param str Строка
      Строка, из которой нужно получить подстроку.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param left Левая подстрока. Может быть пустым
      Подстрока находящаяся слева от подстроки которую нужно получить.
      Примеры :
      (
      <a>
      <p>
      <span>
      Пустая строка - С начала строки
      * @param right Правая подстрока. Может быть пустым
      Подстрока находящаяся справа от подстроки которую нужно получить.
      Примеры :
      )
      </a>
      </p>
      </span>
      Пустая строка - До конца строки
      @returns подстрока.
      Примеры :
      пример
      text
      str
      */
      function BAS_get_substring_between() {
      const str = _function_argument('str')
      const left = _function_argument('left') || ''
      const right = _function_argument('right') || ''
      const result = _get_substring_between(str, left, right)
      _function_return(result)
      return result
      }
      /**
      * Удалить часть строки
      * Удалите часть строки и/или вставьте новую.
      * Это действие может либо удалить часть строки, либо вставить новую часть, либо все одновременно.
      * Это действие вернет строку, полученную в итоге выполнения всех манипуляций.
      * Чтобы только удалить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, а параметр "Вставляемая подстрока" не указывать.
      * Например, если указана строка "Тест текст", индекс 0 и количество символов 5, то действие вернет "текст".
      * Чтобы только вставить, нужно указать параметр "Вставляемая подстрока", а в параметр "Количество удаляемых символов" указать ноль.
      * Например, если указана строка "Просто строки", индекс 7, количество символов 0 и подстрока "пример ", то действие вернет "Просто пример строки".
      * Чтобы удалить и вставить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, и указать параметр "Вставляемая подстрока".
      * Например, если указана строка "Тест не текст", индекс 5, количество символов 2 и подстрока "новый", то действие вернет "Тест новый текст".
      * Если вам нужно только вставить подстроку, то вы можете использовать действие "Вставить в".
      *
      * @param str Строка
      Строка, из которой нужно удалить часть и/или добавить новую.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param from С индекса. Может быть пустым
      Индекс символа, с которого начинается изменение строки. Если отрицателен, то указывает смещение от конца строки.
      Примеры :
      1 - С второго символа
      0 - С первого символа
      -1 - С последнего символа
      Пустая строка - С начала строки
      * @param count Количество удаляемых символов
      Количество символов, которые будут удалены.
      Примеры :
      4
      2
      0 - Не удалять символы
      * @param add Вставляемая подстрока. Может быть пустым
      Необязательный параметр. Подстрока, которая будет вставлена вместо удаленной части.
      Примеры :
      пример
      text
      str
      Пустая строка - Не вставить подстроку
      @returns итоговая строка.
      Примеры :
      пример текста
      New text
      Test string
      */
      function BAS_splice_string() {
      const str = _function_argument('str')
      const from = _function_argument('from') || ''
      const count = _function_argument('count')
      const add = _function_argument('add') || ''
      const result = _splice_string(str, from, count, add)
      _function_return(result)
      return result
      }
      /**
      * В нижний регистр
      * Преобразовать все буквы строки в нижний регистр.
      * Это действие вернет строку, в которой все буквы будут иметь нижний регистр, а остальные символы останутся без изменений.
      * Например строка "ТЕСТ" будет преобразована в строку "тест", а строка "Пример Строки" будет преобразована в строку "пример строки".
      * Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
      *
      * @param str Строка
      Строка, которую нужно преобразовать в нижний регистр.
      Примеры :
      Просто пример текста
      Test Text
      STRING
      @returns преобразованная строка.
      Примеры :
      просто пример текста
      test text
      string
      */
      function BAS_to_lower_case() {
      const str = _function_argument('str')
      const result = _to_lower_case(str)
      _function_return(result)
      return result
      }
      /**
      * В верхний регистр
      * Преобразовать все буквы строки в верхний регистр.
      * Это действие вернет строку, в которой все буквы будут иметь верхний регистр, а остальные символы останутся без изменений.
      * Например строка "тест" будет преобразована в строку "ТЕСТ", а строка "пример строки" будет преобразована в строку "ПРИМЕР СТРОКИ".
      * Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
      *
      * @param str Строка
      Строка, которую нужно преобразовать в верхний регистр.
      Примеры :
      Просто пример текста
      Test text
      string
      @returns преобразованная строка.
      Примеры :
      ПРОСТО ПРИМЕР ТЕКСТА
      TEST TEXT
      STRING
      */
      function BAS_to_upper_case() {
      const str = _function_argument('str')
      const result = _to_upper_case(str)
      _function_return(result)
      return result
      }
      /**
      * Содержит
      * Проверить, содержит ли строка подстроку.
      * Это действие вернет true или false в зависимости от того, содержит ли строка подстроку. Результат может быть использован вместе с действием "If".
      * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет false.
      * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
      *
      * @param str Строка
      Строка, в которой нужно проверить содержание подстроки.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param sub Подстрока
      Подстрока, содержание которой нужно проверить.
      Примеры :
      пример
      text
      str
      * @param from С индекса
      Необязательный параметр. Индекс символа, с которого следует начать поиск.
      Примеры :
      1 - С второго символа
      0 - С первого символа
      Пустая строка - С начала строки
      @returns true или false в зависимости от того, содержит ли строка подстроку.
      Примеры :
      true - Строка содержит подстроку.
      false - Строка не содержит подстроку.
      */
      function BAS_string_contains() {
      const str = _function_argument('str')
      const sub = _function_argument('sub')
      const from = _function_argument('from') || ''
      const result = _string_contains(str, sub, from)
      _function_return(result)
      return result
      }
      /**
      * Получить длину
      * Получить количество символов из строки.
      * Это действие вернет число, равное количеству символов в строке.
      * Например, если указана строка "Тестовый текст", то действие вернет 14, а если указана строка "Просто пример строки", то действие вернет 20.
      *
      * @param str Строка
      Строка, из которой нужно получить количество символов.
      Примеры :
      Просто пример текста
      Test text
      string
      @returns количество символов, содержащихся в строке.
      Примеры :
      5
      2
      0 - Пустая строка
      */
      function BAS_string_length() {
      const str = _function_argument('str')
      const result = _string_length(str)
      _function_return(result)
      return result
      }
      /**
      * Слово с большой буквы
      * Преобразовать первую букву слова в верхний регистр.
      * Это действие вернет строку, в которой первая буква будут иметь верхний регистр, а остальные останутся без изменений.
      * Например, если указана строка "тестовый текст", то действие вернет "Тестовый текст", а если указана строка "просто пример строки", то действие вернет "Просто пример строки".
      * Если активирован параметр "Сделать все слова заглавными", то первые буквы во всех словах будут иметь верхний регистр.
      * Например, если указана строка "тестовый текст", то действие вернет "Тестовый Текст", а если указана строка "просто пример строки", то действие вернет "Просто Пример Строки".
      * Если активирован параметр "Все остальные буквы в нижний регистр", то все буквы, которые не были преобразованы в верхний регистр, будут преобразованы в нижний регистр.
      * Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто пример строки".
      * Если активированы оба параметра "Сделать все слова заглавными" и "Все остальные буквы в нижний регистр", то первые буквы во всех словах будут иметь верхний регистр, а все остальные нижний регистр.
      * Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый Текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто Пример Строки".
      *
      * @param str Строка
      Строка, в которой нужно преобразовать слова.
      Примеры :
      просто пример текста
      test text
      string
      * @param all Сделать все слова заглавными
      * @param lower Все остальные буквы в нижний регистр
      * @returns преобразованная строка.
      Примеры :
      Просто пример текста
      Test Text
      String
      */
      function BAS_capitalize() {
      const str = _function_argument('str')
      const all = _function_argument('all')
      const lower = _function_argument('lower')
      const result = _capitalize(str, all, lower)
      _function_return(result)
      return result
      }
      /**
      * Количество слов
      * Получить количество слов из строки.
      * Это действие вернет число, равное количеству слов в строке.
      * Например, если указана строка "Тестовый текст", то действие вернет 2, а если указана строка "Просто пример строки", то действие вернет 3.
      *
      * @param str Строка
      Строка, из которой нужно получить количество слов.
      Примеры :
      Просто пример текста
      Test text
      string
      @returns количество слов, содержащихся в строке.
      Примеры :
      5
      2
      0 - Строка не содержит слов
      */
      function BAS_count_words() {
      const str = _function_argument('str')
      const result = _count_words(str)
      _function_return(result)
      return result
      }
      /**
      * Разделить предложение на слова
      * Разделить строку на слова.
      * Это действие вернет список, содержащий слова, полученные из строки.
      * Например, если указана строка "Тестовый текст", то действие вернет ["Тестовый","текст"], а если указана строка "Просто пример строки.", то действие вернет ["Просто","пример","строки"].
      * Это действие игнорирует любые символы, кроме букв и цифр.
      * Например, если указана строка "Вкусный 100% сок.", то действие вернет ["Вкусный", "100", "сок"].
      * Список можно обработать с помощью действий из модуля "Список".
      *
      * @param str Строка
      Строка, содержащая предложение, которое нужно разделить на слова.
      Примеры :
      Просто пример текста
      Test text
      string
      @returns список слов.
      Примеры :
      ["Просто", "пример", "текста"]
      ["Test", "text"]
      ["string"]
      */
      function BAS_words() {
      const str = _function_argument('str')
      const result = _words(str)
      _function_return(result)
      return result
      }
      /**
      * Разделить текст на предложения
      * Разделить строку на предложения.
      * Это действие вернет список, содержащий предложения, полученные из строки.
      * Например, если указана строка "Просто пример текста. Тестовый текст, строка", то действие вернет ["Просто пример текста.","Тестовый текст, строка"], а если указана строка "Тестовый текст! Тестовый текст! Тестовый текст!", то действие вернет ["Тестовый текст!","Тестовый текст!","Тестовый текст!"].
      * Список можно обработать с помощью действий из модуля "Список".
      *
      * @param str Строка
      Строка, содержащая текст, который нужно разделить на предложения.
      Примеры :
      Просто пример текста. Тестовый текст, строка
      Test text! Test text! Test text!
      string
      @returns список предложений.
      Примеры :
      ["Просто пример текста.", "Тестовый текст, строка"]
      ["Test text!", "Test text!", "Test text!"]
      ["string"]
      */
      function BAS_sentences() {
      const str = _function_argument('str')
      const result = _sentences(str)
      _function_return(result)
      return result
      }
      /**
      * Найти подстроку
      * Найти подстроку в строке.
      * Это действие вернет число, равное индексу начала первой найденной подстроки, или -1, если подстрока не найдена.
      * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет 9, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет -1.
      * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
      *
      * @param str Строка
      Строка, в которой нужно найти подстроку.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param sub Подстрока
      Подстрока, которую нужно найти в строке.
      Примеры :
      пример
      text
      str
      * @param from С индекса
      Необязательный параметр. Индекс символа, с которого следует начать поиск.
      Примеры :
      1 - С второго символа
      0 - С первого символа
      Пустая строка - С начала строки
      @returns индекс начала подстроки.
      Примеры :
      0
      3
      5
      -1 - Строка не содержит указанную подстроку
      */
      function BAS_find_substring() {
      const str = _function_argument('str')
      const sub = _function_argument('sub')
      const from = _function_argument('from') || ''
      const result = _find_substring(str, sub, from)
      _function_return(result)
      return result
      }
      /**
      * Начинается с
      * Проверить, начинается ли строка с указанной подстроки.
      * Это действие вернет true или false в зависимости от того, начинается ли строка с указанной подстроки. Результат может быть использован вместе с действием "If".
      * Например, если указана строка "Тестовый текст" и подстрока "Тестовый", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
      * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
      *
      * @param str Строка
      Строка, которую нужно проверить.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param sub Подстрока
      Подстрока, с которой должна начинатся строка.
      Примеры :
      пример
      text
      str
      * @param from С индекса
      Необязательный параметр. Индекс символа, с которого следует начать поиск.
      Примеры :
      1 - С второго символа
      0 - С первого символа
      Пустая строка - С начала строки
      @returns true или false в зависимости от того, начинается ли строка с указанной подстроки.
      Примеры :
      true - Строка начинается с подстроки.
      false - Строка не начинается с подстроки.
      */
      function BAS_starts_with() {
      const str = _function_argument('str')
      const sub = _function_argument('sub')
      const from = _function_argument('from') || ''
      const result = _starts_with(str, sub, from)
      _function_return(result)
      return result
      }
      /**
      * Заканчивается на
      * Проверить, заканчивается ли строка указанной подстрокой.
      * Это действие вернет true или false в зависимости от того, заканчиваться ли строка указанной подстрокой. Результат может быть использован вместе с действием "If".
      * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
      * По умолчанию поиск производится с конца строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "Длина", находящийся в дополнительных настройках.
      *
      * @param str Строка
      Строка, которую нужно проверить.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param sub Подстрока
      Подстрока, которой должна заканчиваться строка.
      Примеры :
      пример
      text
      str
      * @param length Длина
      Необязательный параметр. Длина, до которой будет обрезана строка при поиске подстроки, позволяет искать внутри строки.
      Примеры :
      10
      5
      Пустая строка - Длина строки
      @returns true или false в зависимости от того, заканчиваться ли строка указанной подстрокой.
      Примеры :
      true - Строка заканчивается подстрокой.
      false - Строка не заканчивается подстрокой.
      */
      function BAS_ends_with() {
      const str = _function_argument('str')
      const sub = _function_argument('sub')
      const length = _function_argument('length') || ''
      const result = _ends_with(str, sub, length)
      _function_return(result)
      return result
      }
      /**
      * Вставить в
      * Вставить подстроку в строку.
      * Это действие вернет строку, полученную в итоге вставки подстроки.
      * Например, если указана строка "Просто строки", подстрока "пример " и индекс 7, то действие вернет "Просто пример строки".
      * Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
      * Если вам нужно не только вставить подстроку, но и удалить часть исходной строки, то используйте действие "Удалить часть строки".
      *
      * @param str Строка
      Строка, в которую нужно вставить подстроку.
      Примеры :
      Просто пример текста
      Test text
      string
      * @param index Индекс. Может быть пустым
      Индекс символа, после которого будет вставлена подстрока. Если отрицателен, то указывает смещение от конца строки.
      Примеры :
      1 - После второго символа
      0 - После первого символа
      -1 - После последнего символа
      Пустая строка - В начало строки
      * @param sub Вставляемая подстрока
      Подстрока, которую нужно вставить.
      Примеры :
      не
      good
      New
      Пустая строка - Не вставить подстроку
      @returns итоговая строка.
      Примеры :
      Просто не пример текста
      Test good text
      New string
      */
      function BAS_insert_substring() {
      const str = _function_argument('str')
      const index = _function_argument('index') || ''
      const sub = _function_argument('sub') || ''
      const result = _insert_substring(str, index, sub)
      _function_return(result)
      return result
      }
      /**
      * Base64 кодировать
      * Кодирует строку в base64.
      * Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
      *
      * @param string Данные
      В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      Примеры :
      any text - Любая строка. Работает в режиме encode
      YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
      VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
      @returns строка в формате base64
      */
      function BAS_base64_encode() {
      const string = _function_argument('string')
      const result = base64_encode(string)
      _function_return(result)
      return result
      }
      /**
      * Base64 декодировать
      * Декодирует строку в base64.
      * Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
      * В большинстве случаев вам не нужно декодировать base64 строки, некоторые действия принимают входные данные прямо в формате base64, это такие действия как: "Запись В Файл", "Начать работу с изображением". Более того, если вы попытаетесь декодировать бинарные данные, закодированные как base64, результат может быть поврежден, поэтому лучше использовать строку в формате base64 без декодирования.
      *
      * @param string Данные
      В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      Примеры :
      any text - Любая строка. Работает в режиме encode
      YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
      VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
      @returns результат декодирования
      */
      function BAS_base64_decode() {
      const string = _function_argument('string')
      const result = base64_decode(string)
      _function_return(result)
      return result
      }
      /**
      * Шаблон
      * Создать новую переменную или изменить существующую на многострочный текст. Может заменять спинтакс, ресурсы, переменные на их значения. Действие может использоваться для загрузки шаблона из файла или его динамической генерации. Оно лучше всего подходит, если нужно генерировать текст для постинга.
      * Это действие получает текст из многострочного текстового поля "Шаблон" и сохраняет его в переменную, определенной в параметре "Переменная, в которую сохранять результат". И это все, что делает это действие, если только текст не содержит специальных значений. Вот их список:
      * Переменные VAR_VARIABLE будут заменены на их значения.
      * Ресурсы \{\{resource\}\} также будут заменены на их значения.
      * Спинтакс {value1|value2} будет заменен на одно из значений value1 или value2.
      * <AnyLetter> - будет заменено на любую букву.
      * <AnyDigit> - будет заменено на любую цифру.
      * <ELowVow> - тоже самое, что {a|e|i|o|u}
      * <EUpVow> - тоже самое, что {a|e|i|o|u}
      * <ELowCons> - тоже самое, что {b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z}
      * <EUpCons> - тоже самое, что {B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z}
      * <EUp> - тоже самое, что {<EUpVow>|<EUpCons>}
      * <ELow> - тоже самое, что {<ELowVow>|<ELowCons>}
      * <EFemName> - английские женские имена начинающиеся с заглавной буквы.
      * <EFemNameLow> - английские женские имена.
      * <EMaleName> - английские мужские имена начинающиеся с заглавной буквы.
      * <EMaleNameLow> - английские мужские имена.
      * <ESurname> - английские фамилии имена начинающиеся с заглавной буквы.
      * <ESurnameLow> - английские фамилии.
      * Если выбрана установка "Дополнительная обработка", то это действие будет работать с динамическим шаблоном, т. е. шаблон будет взят из переменной. Рассмотрим следующий пример: у вас есть файл с содержанием "{Hello|Hi}, <EMaleName> {!|}" и вам нужно его обработать с помощью BAS. Сначала нужно загрузить файл в переменную VAR_FILE_CONTENT. Если вы поместите VAR_FILE_CONTENT в действие "шаблон" и не устанавливаете флаг "Дополнительная обработка", то результат будет таким же, как и исходное содержимое файла. Но если вы установите этот флаг, BAS сначала заменит переменную VAR_FILE_CONTENT на содержание файла, а затем проведет замену переменых, спинтакса и ресурсов уже в содержании файла. Наконец, результат будет похож на "Hi, John!".
      *
      * @param text Шаблон
      Значение переменной
      Примеры :
      any string - Любая строка
      VAR_LOGIN:VAR_PASSWORD - Соеденить 2 строки
      {Hi|Hello}, John! - Спинтакс
      <EMaleName> - Будет заменено мужским именем
      {a{1|2|3}|} - a1, a2, a3 или пустая строка
      */
      function BAS_spintax() {
      const text = _function_argument('text')
      const result = _spintax(text)
      _function_return(result)
      return result
      }
      /**
      * Заменить строку
      * Это действие ищет в строке, определенной с помощью параметра "Оригинальная Строка", значения, определенные с помощью параметра "Заменить Из", и заменяет их на значение определенное с помощью параметра "Заменить На".
      * Это действие заменяет все вхождения, а не только самое первое.
      * Используйте действие "Заменить строку" из модуля "Регулярные выражения" для замены с помощью регулярного выражения.
      *
      * @param str Оригинальная Строка
      Строка, в которой будет выполнена замена
      * @param from Заменить Из
      Строка для поиска
      * @param to Заменить На
      Новое значение
      @returns копия оригинальной строки с проведенной заменой
      */
      function BAS_replace_string() {
      const str = _function_argument('str')
      const from = _function_argument('from')
      const to = _function_argument('to')
      const result = _replace_string(str, from, to)
      _function_return(result)
      return result
      }
      /**
      * Случайная строка
      * Сгенерировать случайную строку с заданной длиной и разрешенными символами.
      * @param length Длина Генерируемой Строки
      * @param chars Разрешенные Символы
      */
      function BAS_random_string() {
      const length = _function_argument('length')
      const chars = _function_argument('chars')
      const result = _random_string(length, chars)
      _function_return(result)
      return result
      }
      /**
      * Латинизировать
      * Преобразуйте все буквы в латиницу.
      * Это действие вернет строку, в которой все буквы будут латинизированы, а остальные символы останутся без изменений.
      * Например строка "ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů" будет преобразована в строку "ExAmPlE aeiouycdenrstzu", а строка "Привет мир!" будет преобразована в строку "Privet mir!".
      * По умолчанию кириллица тоже латинизируется, но это можно изменить, отключив параметр "Латинизировать кириллицу".
      *
      * @param str Строка
      Строка, которую нужно латинизировать.
      Примеры :
      ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů
      Привет мир!
      Просто пример текста
      * @param ciryllic Латинизировать кириллицу
      @returns преобразованная строка.
      Примеры :
      ExAmPlE aeiouycdenrstzu
      Privet mir!
      Prosto primer teksta
      */
      function BAS_latinize() {
      const str = _function_argument('str')
      const ciryllic = _function_argument('ciryllic')
      const result = _latinize(str, ciryllic)
      _function_return(result)
      return result
      }
      /**
      * Склонять
      * Склонять слово в зависимости от указанного числа.
      * Это действие вернет одно из трех слов, подходящее по склонению к указанному числу.
      * Например, если указаны слова "аккаунт", "аккаунта", "аккаунтов" и число равно 5, то действие вернет "аккаунтов", а если число равно 22, то действие вернет "аккаунта".
      *
      * @param num Число
      Число, по которому будет определяется склонение возвращаемого слова.
      Примеры :
      123
      100000
      1456.578
      * @param words [
      Слово при 1
      Слово, если число равно 1.
      Примеры :
      минута
      год
      аккаунт,
      Слово при 2
      Слово, если число равно 2.
      Примеры :
      минуты
      года
      аккаунта,
      Слово при 5
      Слово, если число равно 5.
      Примеры :
      минут
      лет
      аккаунтов
      * ]
      @returns слово, сответствующее указанному числу.
      Примеры :
      минута - при 21
      лет - при 10
      аккаунта - при 22
      */
      function BAS_declination() {
      const num = _function_argument('num')
      const words = _function_argument('words')
      const result = _declination(num, words)
      _function_return(result)
      return result
      }
      /**
      * Извлечь все почты
      * Извлечь все адреса электронной почты из строки.
      * Это действие вернет список, содержащий адреса электронной почты, полученные из строки.
      * Например, если указана строка "Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.", то действие вернет ["test@gmail.com", "example@gmail.com"].
      * Список можно обработать с помощью действий из модуля "Список".
      *
      * @param str Строка
      Строка, из которой нужно извлечь адреса электронной почты.
      Примеры :
      Предложения по сотрудничеству вы можете присылать на почту: cooperation@marketplace.com
      Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.
      Предложения по рекламе, вы можете отправлять на почту: ad@site.com
      Предложения по улучшению сайта вы можете отправлять на почту: feedback@site.com
      Чтобы получить помощь в решении проблем с сайтом, вы можете написать на почту: support@site.com
      @returns список адресов электронной почты.
      Примеры :
      ["cooperation@marketplace.com"]
      ["test@gmail.com", "example@gmail.com"]
      ["ad@site.com", "feedback@site.com", "support@site.com"]
      */
      function BAS_extract_emails() {
      const str = _function_argument('str')
      const result = _extract_emails(str)
      _function_return(result)
      return result
      }
      /**
      * Извлечь все ссылки
      * Извлечь все ссылки из строки.
      * Это действие вернет список, содержащий ссылки, полученные из строки.
      * Например, если указана строка "Тестовый текст http://test.com, строка тест example.org", то действие вернет ["http://test.com", "example.org"].
      * Список можно обработать с помощью действий из модуля "Список".
      * Распарсить ссылку на элементы можно с помощью действия "Парсить URL" из модуля "URL".
      *
      * @param str Строка
      Строка, из которой нужно извлечь ссылки.
      Примеры :
      Купить товар вы можете по ссылке - https://marketplace.biz/section_3/product_213234.php
      Тестовый текст http://test.com, строка тест example.org
      Реклама -> http://www.ad.by/info, обратная связь -> www.feedback.io, поддержка -> https://support.co/new/ticket.php
      @returns список ссылок.
      Примеры :
      ["https://marketplace.biz/section_3/product_213234.php"]
      ["http://test.com", "example.org"]
      ["http://www.ad.by", "www.feedback.io", "https://support.co/new/ticket.php"]
      */
      function BAS_extract_urls() {
      const str = _function_argument('str')
      const result = _extract_urls(str)
      _function_return(result)
      return result
      }
      /**
      * Извлечь все телефонные номера
      * Извлечь все телефонные номера из строки.
      * Это действие вернет список, содержащий телефонные номера, полученные из строки.
      * Например, если указана строка "Тестовый текст - 89001112233. Просто пример текста - +7 900 999 4455.", то действие вернет ["89001112233", "+7 900 999 4455"].
      * Список можно обработать с помощью действий из модуля "Список".
      *
      * @param str Строка
      Строка, из которой нужно извлечь телефонные номера.
      Примеры :
      Здравствуйте, мой номер +1 323 123-4567
      Деловые вопросы/пресса: Александра +7 900 000-00-00
      PR: Мария +7(900)000-00-01 | Агент 1: Валерия +7(900)000-00-02 | Агент 2: Екатерина +7(900)00-00-03
      @returns список телефонных номеров.
      Примеры :
      ["+1 323 123-4567"]
      ["+7 900 000-00-00"]
      ["+7(900)000-00-01", "+7(900)000-00-02", "+7(900)00-00-03"]
      */
      function BAS_extract_phone_numbers() {
      const str = _function_argument('str')
      const result = _extract_phone_numbers(str)
      _function_return(result)
      return result
      }
      /**
      * Специальные HTML символы кодировать
      * Кодирует строку содержащую специальные HTML символы.
      *
      * @param str Строка
      * @returns закодированная строка
      */
      function BAS_escape_html() {
      const str = _function_argument('str')
      const result = _escape_html(str)
      _function_return(result)
      return result
      }
      /**
      * Специальные HTML символы декодировать
      * Декодирует строку содержащую специальные HTML символы.
      *
      * @param str Строка
      * @returns результат декодирования
      */
      function BAS_unescape_html() {
      const str = _function_argument('str')
      const result = _unescape_html(str)
      _function_return(result)
      return result
      }
      /**
      * Base64 кодировать/декодировать
      * Кодирует или декодирует строку в base64.
      * Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
      * В большинстве случаев вам не нужно декодировать base64 строки, некоторые действия принимают входные данные прямо в формате base64, это такие действия как: "Запись В Файл", "Начать работу с изображением". Более того, если вы попытаетесь декодировать бинарные данные, закодированные как base64, результат может быть поврежден, поэтому лучше использовать строку в формате base64 без декодирования.
      * Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      *
      * @param {string} str Данные
      В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      Примеры :
      any text - Любая строка. Работает в режиме encode
      YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
      VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
      * @param {boolean} encode Шифровать или расшифровывать
      * @returns строка в формате base64 в случае использования режима encode и результат декодирования при использовании режима decode.
      */
      function BAS_base64(str, encode) {
      const str = _function_argument('str') || str
      const encode = _function_argument('encode') || encode
      const result = encode ? base64_encode(str) : base64_decode(str)
      return result
      }
      /**
      * Шаблон (BAS-функция)
      * Создать новую переменную или изменить существующую на многострочный текст. Может заменять спинтакс, ресурсы, переменные на их значения. Действие может использоваться для загрузки шаблона из файла или его динамической генерации. Оно лучше всего подходит, если нужно генерировать текст для постинга.
      * Это действие получает текст из многострочного текстового поля "Шаблон" и сохраняет его в переменную, определенной в параметре "Переменная, в которую сохранять результат". И это все, что делает это действие, если только текст не содержит специальных значений. Вот их список:
      * Переменные VAR_VARIABLE будут заменены на их значения.
      * Ресурсы \{\{resource\}\} также будут заменены на их значения.
      * Спинтакс {value1|value2} будет заменен на одно из значений value1 или value2.
      * <AnyLetter> - будет заменено на любую букву.
      * <AnyDigit> - будет заменено на любую цифру.
      * <ELowVow> - тоже самое, что {a|e|i|o|u}
      * <EUpVow> - тоже самое, что {a|e|i|o|u}
      * <ELowCons> - тоже самое, что {b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z}
      * <EUpCons> - тоже самое, что {B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z}
      * <EUp> - тоже самое, что {<EUpVow>|<EUpCons>}
      * <ELow> - тоже самое, что {<ELowVow>|<ELowCons>}
      * <EFemName> - английские женские имена начинающиеся с заглавной буквы.
      * <EFemNameLow> - английские женские имена.
      * <EMaleName> - английские мужские имена начинающиеся с заглавной буквы.
      * <EMaleNameLow> - английские мужские имена.
      * <ESurname> - английские фамилии имена начинающиеся с заглавной буквы.
      * <ESurnameLow> - английские фамилии.
      * Если выбрана установка "Дополнительная обработка", то это действие будет работать с динамическим шаблоном, т. е. шаблон будет взят из переменной. Рассмотрим следующий пример: у вас есть файл с содержанием "{Hello|Hi}, <EMaleName> {!|}" и вам нужно его обработать с помощью BAS. Сначала нужно загрузить файл в переменную VAR_FILE_CONTENT. Если вы поместите VAR_FILE_CONTENT в действие "шаблон" и не устанавливаете флаг "Дополнительная обработка", то результат будет таким же, как и исходное содержимое файла. Но если вы установите этот флаг, BAS сначала заменит переменную VAR_FILE_CONTENT на содержание файла, а затем проведет замену переменых, спинтакса и ресурсов уже в содержании файла. Наконец, результат будет похож на "Hi, John!".
      *
      * @param {string} template Шаблон
      Значение переменной
      Примеры :
      any string - Любая строка
      VAR_LOGIN:VAR_PASSWORD - Соеденить 2 строки
      {Hi|Hello}, John! - Спинтакс
      <EMaleName> - Будет заменено мужским именем
      {a{1|2|3}|} - a1, a2, a3 или пустая строка
      @returns string
      */
      function BAS_template() {
      const args = _arguments()
      _template(args.template)!
      var tmp_res = _avoid_nil(_result());
      tmp_res = _is_not_empty_string(tmp_res) ? tmp_res.replace("BASASYNC","\)\!") : tmp_res;
      const result = _spintax(tmp_res)
      _function_return(result)
      return result
      }
      /**
      * Объединить строки
      * Объединить несколько строк в одну.
      * Это действие вернет строку, составленную из всех указанных строк.
      * Например, если указаны параметры "Строка 1" и "Строка 2" значения которых сответственно равны "Просто пример" и " строки", то действие вернет "Просто пример строки".
      * Строки из отдельных полей и списка складываются в общий список строк которые будут объединены.
      * Например, если в поле "Строка 1" указана строка и в поле "Список строк" указан список из 4 строк, то объединено будет 5 строк.
      * Если какие-то из параметров ("Строка 1", "Строка 2", "Строка 3", "Список строк") не указаны, будут использованы все параметры кроме них.
      * Например, если "Список строк" не указан, то список будет сформирован из параметров "Строка 1" и "Строка 2" и "Строка 3". Если параметры "Строка 1", "Строка 2", "Строка 3" пусты, то будет использован "Список строк". Если указаны все параметры, то все они будут использованы.
      * Порядок объединения полей следующий: "Строка 1", "Строка 2", "Строка 3", "Список строк".
      * Список можно создать с помощью действий из модуля "Список".
      * По умолчанию строки соединяются без разделителя, но это можно изменить, указав параметр "Разделитель", находящийся в дополнительных настройках.
      *
      * @param {string} str1 Строка 1. Может быть пустым
      Строка, которую нужно объединить с другими строками.
      Примеры :
      Просто пример текста
      Test text
      string
      Пустая строка - Будут использованы параметры "Строка 2", "Строка 3", "Список строк"
      * @param {string} str2 Строка 2. Может быть пустым
      Строка, которую нужно объединить с другими строками.
      Примеры :
      Просто пример текста
      Test text
      string
      Пустая строка - Будут использованы параметры "Строка 1", "Строка 3", "Список строк"
      * @param {string} str3 Строка 3. Может быть пустым
      Строка, которую нужно объединить с другими строками.
      Примеры :
      Просто пример текста
      Test text
      string
      Пустая строка - Будут использованы параметры "Строка 1", "Строка 2", "Список строк"
      * @param {Array<string>} listStr Список строк. Может быть пустым
      Список строк которые нужно объединить. В качестве списка можно использовать строку, состоящую из строк, разделенных запятыми.
      Примеры :
      Just sample text,Test text,string
      Just sample text, Test text, string
      ["Just sample text", "Test text", "string"]
      Пустая строка - Будут использованы параметры "Строка 1", "Строка 2", "Строка 3"
      * @param {string} sep Разделитель
      Необязательный параметр. Разделитель, вставляемый между объединенными строками.
      Примеры :
      "," - Просто пример текста,Test text,string
      " " - Просто пример текста Test text string
      ", " - Просто пример текста, Test text, string
      Пустая строка - Объединить строки без разделителя
      * @returns итоговая строка.
      Примеры :
      String1String2String3
      Text test string
      TestTest
      */
      function BAS_join_strings(str1, str2, str3, listStr, sep) {
      const str1 = _function_argument('str1') || str1
      const str2 = _function_argument('str2') || str2
      const str3 = _function_argument('str3') || str3
      const listStr = _function_argument('listStr') || listStr
      const sep = _function_argument('sep') || sep
      const result = _join_strings([
      _avoid_nil(str1),
      _avoid_nil(str2),
      _avoid_nil(str3)
      ].concat(
      _to_arr(_avoid_nilb(listStr, []))
      ), sep)
      _function_return(result)
      return result
      }
      /**
      * Парсить CSV строку
      * Распарсить CSV строку на элементы.
      * Это действие распарсит строку по указанным разделителям и сохранит распарсенные данные по указанным переменным.
      * Например, если указана строка "email@gmail.com:mypass1" и переменные USERNAME,PASSWORD, то действие сохранит "email@gmail.com" в переменную VAR_USERNAME и "mypass1" в переменную VAR_PASSWORD.
      * По умолчанию действие возвращает строки, но это можно изменить, включив параметр "Преобразовывать типы", находящийся в дополнительных настройках, тогда страки автоматически будут конвертироватся в числа, true или false, обекты, null и undefined.
      * Например, если указана строка "test:123:true", то в первую переменную будет сохранена строка "test", во вторую переменную число 123 и в третью переменную логическое значение true.
      * Если количество переменных больше, чем количество элементов в строке, то в лишние переменные будет записана пустая строка.
      * Используйте действие "Парсить строку" из модуля Список если хотите получить результат в виде списка.
      *
      * @param {string} str Строка
      CSV строка, которую нужно распарсить на элементы.
      Примеры :
      login:password
      id,name,login
      Просто пример текста;Test text;string
      * @param {string} seps Список разделителей
      Список разделителей, по которым можно разбить строку. В качестве списка можно использовать строку, состоящую только из разделителей.
      Примеры :
      :;,
      [":", ";", ","]
      Пустая строка - [":", ";", ","]
      * @param {boolean} convert Преобразовывать типы
      * @returns Список переменных, разделенных запятыми
      */
      function BAS_csv_parse(str, seps, convert) {
      const str = _function_argument('str') || str
      const seps = _function_argument('seps') || seps
      const convert = _function_argument('convert') || convert
      const csv_res = _csv_parse(str, seps, convert)
      const result = csv_res.map(function(elem) {
      return _avoid_nilb(elem, '')
      })
      _function_return(result)
      return result
      }
      /**
      * Создать CSV строку
      * Создать CSV строку из нескольких элементов.
      * Это действие вернет CSV строку, составленную из всех указанных элементов, разделенных указанным символом.
      * Например, если указаны параметры "Элемент 1" и "Элемент 2" значения которых сответственно равны "тест" и "текст", а разделитель ":", то действие вернет "тест:текст".
      * Элементы из отдельных полей и списка складываются в общий список элементов которые будут объединены.
      * Например, если в поле "Элемент 1" указан элемент и в поле "Список элементов" указан список из 4 элементов, то объединено будет 5 элементов.
      * Если какие-то из параметров ("Элемент 1", "Элемент 2", "Элемент 3", "Список элементов") не указаны, будут использованы все параметры кроме них.
      * Например, если "Список элементов" не указан, то список будет сформирован из параметров "Элемент 1" и "Элемент 2" и "Элемент 3". Если параметры "Элемент 1", "Элемент 2", "Элемент 3" пусты, то будет использован "Список элементов". Если указаны все параметры, то все они будут использованы.
      * Значения всех элементов перед объединением преобразуются в строку.
      * Если элемент содержит разделитель, то он будет заключен в кавычки.
      * Порядок объединения полей следующий: "Элемент 1", "Элемент 2", "Элемент 3", "Список элементов".
      * Список можно создать с помощью действий из модуля "Список".
      *
      * @param {string} elem1 Элемент 1. Может быть пустым
      Элемент, который нужно добавить в CSV строку.
      Примеры :
      Просто пример текста
      5
      true
      Пустая строка - Будут использованы параметры "Элемент 2", "Элемент 3", "Список элементов"
      * @param {string} elem2 Элемент 2. Может быть пустым
      Элемент, который нужно добавить в CSV строку.
      Примеры :
      Просто пример текста
      5
      true
      Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 3", "Список элементов"
      * @param {string} elem3 Элемент 3. Может быть пустым
      Элемент, который нужно добавить в CSV строку.
      Примеры :
      Просто пример текста
      5
      true
      Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 2", "Список элементов"
      * @param {Array<string>} listElem Список элементов. Может быть пустым
      Список элементов, которые нужно добавить в CSV строку. В качестве списка можно использовать строку, состоящую из строк, разделенных запятыми.
      Примеры :
      Просто пример текста,Test text,string
      Просто пример текста, Test text, string
      ["Просто пример текста", "Test text", "string"]
      Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 2", "Элемент 3"
      * @param {string} seps Разделитель
      Разделитель, вставляемый между элементами CSV строки.
      Примеры :
      "," - Просто пример текста,Test text,string
      " " - Просто пример текста Test text string
      ", " - Просто пример текста, Test text, string
      Пустая строка - ":"
      * @returns CSV строка.
      Примеры :
      login:password
      id,name,login
      Просто пример текста;Test text;string
      */
      function BAS_csv_generate(elem1, elem2, elem3, listElem, seps) {
      const elem1 = _function_argument('elem1') || elem1
      const elem2 = _function_argument('elem2') || elem2
      const elem3 = _function_argument('elem3') || elem3
      const listElem = _function_argument('listElem') || listElem
      const seps = _function_argument('seps') || seps
      const result = _csv_generate([
      _avoid_nil(elem1),
      _avoid_nil(elem2),
      _avoid_nil(elem3)
      ].concat(
      _to_arr(_avoid_nilb(listElem, []))
      ), sep)
      _function_return(result)
      return result
      }
      /**
      * Подровнять
      * Подровнять строку по краям.
      * Это действие вернет строку, с начала и конца которой будут обрезаны ненужные символы, такие как пробелы, переносы строк, табуляция.
      * Например, если указана строка "     Тестовый текст   ", то действие вернет "Тестовый текст", а если указана строка "       Просто пример строки    ", то действие вернет "Просто пример строки".
      * Символы, которые будут обрезаны, определяются параметрами "Обрезать пробелы", "Обрезать переносы строк", "Обрезать табуляцию", но также можно указать свои символы в параметр "Обрезать символы", находящийся в дополнительных настройках.
      * По умолчанию действие обрезает строку с обеих сторон, но это можно изменить с помощью переключателей, находящихся в дополнительных настройках.
      *
      * @param {string} str Строка
      Строка, которую нужно подровнять.
      Примеры :
      "       Просто пример текста    "
      "     Test text   "
      "      string    "
      * @param {string} chars Обрезать символы
      Символы, обрезаемые с краев строки.
      Примеры :
      _-|,
      _-
      %&
      * @param {boolean} trimSpaces Обрезать пробелы
      * @param {boolean} trimLineBrakes Обрезать переносы строк
      * @param {boolean} trimTabs Обрезать табуляцию
      * @param {boolean} left Обрезать слева
      * @param {boolean} right Обрезать справа
      * @returns итоговая строка.
      Примеры :
      Просто пример текста
      Test text
      string
      */
      function BAS_trim(str, chars, trimSpaces, trimLineBrakes, trimTabs, left, right) {
      const str = _function_argument('str') || str
      const chars = _function_argument('chars') || chars
      const trimSpaces = _function_argument('trimSpaces') || trimSpaces
      const trimLineBrakes = _function_argument('trimLineBrakes') || trimLineBrakes
      const trimTabs = _function_argument('trimTabs') || trimTabs
      const left = _function_argument('left') || left
      const right = _function_argument('right') || right
      const result = _trim(str, (trimSpaces ? _STR_WHITESPACE : "") + (trimLineBrakes ? "\\r\\n\\f" : "") + (trimTabs ? "\\t\\v" : "") + chars, left, right)
      _function_return(result)
      return result
      }
      /**
      * Очистить
      * Очистить строку от ненужных символов.
      * Это действие вернет строку, из которой будут удалены все ненужные символы, такие как множественные пробелы, переносы строк, табуляция.
      * Например, если указана строка "     Тестовый   текст   ", то действие вернет "Тестовый текст", а если указана строка "       Просто  пример   строки    ", то действие вернет "Просто пример строки".
      * Кроме удаления табуляции, активируемой соответствующим параметром, можно указать свои символы, которые будут удалены, в параметр "Удалять символы", находящийся в дополнительных настройках.
      * Символы, которые будут заменены пробелом, определяются параметрами "Заменять многочисленные пробелы на одиночные", "Заменить переносы строк пробелами", но также можно указать свои символы в параметр "Заменять символы на пробел", находящийся в дополнительных настройках.
      *
      * @param {string} str Строка
      Строка, которую нужно очистить.
      Примеры :
      "       Просто    пример  текста    "
      "     Test     text   "
      "      string    "
      * @param {string} charsRemoved Удалять символы
      Символы, которые нужно удалять.
      Примеры :
      _-|
      _-
      %&
      * @param {boolean} removeTabs Удалять табуляцию
      * @param {string} replaceCharsWithSpace Заменять символы на пробел
      Символы, которые нужно заменить на пробел.
      Примеры :
      _-|
      _-
      %&
      * @param {boolean} replaceLineBreaksWithSpace Заменить переносы строк пробелом
      * @param {boolean} replaceMultipleSpacesWithOnes Заменять многочисленные пробелы на одиночные
      * @returns итоговая строка.
      Примеры :
      Просто пример текста
      Test text
      string
      */
      function BAS_clean(str, charsRemoved, removeTabs, replaceCharsWithSpace, replaceLineBreaksWithSpace, replaceMultipleSpacesWithOnes) {
      const str = _function_argument('str') || str
      const charsRemoved = _function_argument('charsRemoved') || charsRemoved
      const removeTabs = _function_argument('removeTabs') || removeTabs
      const replaceCharsWithSpace = _function_argument('replaceCharsWithSpace') || replaceCharsWithSpace
      const replaceLineBreaksWithSpace = _function_argument('replaceLineBreaksWithSpace') || replaceLineBreaksWithSpace
      const replaceMultipleSpacesWithOnes = _function_argument('replaceMultipleSpacesWithOnes') || replaceMultipleSpacesWithOnes
      const result = _clean(str, (removeTabs ? "\\t\\v" : "") + charsRemoved, (replaceLineBreaksWithSpace ? "\\r\\n\\f" : "") + replaceCharsWithSpace, replaceMultipleSpacesWithOnes)
      _function_return(result)
      return result
      }
      /**
      * Специальные HTML символы кодировать/декодировать
      * Кодирует или декодирует строку содержащую специальные HTML символы.
      * Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая специальные HTML символы, которая должна быть закодирована.
      * Например, если указана строка "<div>Blah blah blah</div>" и активирован режим encode, то действие вернет "&lt;div&gt;Blah blah blah&lt;/div&gt;". А если указана строка "&lt;h1&gt;Text title&lt;/h1&gt;" и активирован режим decode, то действие вернет "<h1>Text title</h1>".
      *
      * @param {string} str Строка
      В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая специальные HTML символы, которые должны быть закодированы.
      Примеры :
      <div>Blah blah blah</div> - Любая строка. Работает в режиме encode
      &lt;div&gt;Blah blah blah&lt;/div&gt; - Закодированная строка. Работает в режиме decode
      * @param {boolean} escape Шифровать или расшифровывать
      * @returns закодированная строка в случае использования режима encode и результат декодирования при использовании режима decode.
      */
      function BAS_html(str, escape) {
      const str = _function_argument('str') || str
      const escape = _function_argument('escape') || escape
      const result = escape ? _escape_html(str) : _unescape_html(str)
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022telegram\u0022\u007d", 893043832)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQntGC0L/RgNCw0LLQuNGC0Ywg0KHQvtC+0LHRidC10L3QuNC1IChCQVMt0YTRg9C90LrRhtC40Y8pXHJcbiAqINCe0YLQv9GA0LDQstC40YLRjCDRgdC+0L7QsdGJ0LXQvdC40LUg0LIg0LfQsNC00LDQvdC90YvQuSBUZWxlZ3JhbSDRh9Cw0YIuXHJcbiAqINCa0LDQuiDRgdC+0LfQtNCw0YLRjCDQsdC+0YLQsCDQuCDQv9C+0LvRg9GH0LjRgtGMIGNoYXQgaWQgaHR0cHM6Ly9oYWJyYWhhYnIucnUvcG9zdC8zMDYyMjIvXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBib3RfdG9rZW4gVG9rZW4g0LHQvtGC0LBcclxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXRfaWQgSWQg0YfQsNGC0LBcclxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VfdGV4dCDQotC10LrRgdGCINGB0L7QvtCx0YnQtdC90LjRj1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFkZE1lc3NhZ2VUaHJlYWQg0JTQvtCx0LDQstC40YLRjCDQsiDQvdCw0YfQsNC70L4g0YHQvtC+0LHRidC10L3QuNGPINC90L7QvNC10YAg0L/QvtGC0L7QutCwXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWRkTWVzc2FnZVRpbWUg0JTQvtCx0LDQstC40YLRjCDQsiDQvdCw0YfQsNC70L4g0YHQvtC+0LHRidC10L3QuNGPINCy0YDQtdC80Y8gW2hoOm1tOnNzXVxyXG4gKi9cclxuZnVuY3Rpb24gQkFTX3RlbGVncmFtX3NlbmRfbWVzc2FnZSgpIHtcclxuICBjb25zdCBhcmdzID0gX2FyZ3VtZW50cygpXHJcbiAgdmFyIGdldFRpbWUgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgY2hlY2tUaW1lID0gZnVuY3Rpb24gKGkpIHtcclxuICByZXR1cm4gKGkgPCAxMCkgPyBcIjBcIiArIGkgOiBpO1xyXG4gIH1cclxuICB2YXIgZCA9IG5ldyBEYXRlKCk7XHJcbiAgdmFyIGhoID0gY2hlY2tUaW1lKGQuZ2V0SG91cnMoKSk7XHJcbiAgdmFyIG1tID0gY2hlY2tUaW1lKGQuZ2V0TWludXRlcygpKTtcclxuICB2YXIgc3MgPSBjaGVja1RpbWUoZC5nZXRTZWNvbmRzKCkpO1xyXG4gIHJldHVybiAnWycgKyBoaCArICc6JyArIG1tICsgJzonICsgc3MgKyAnXSdcclxuICB9XHJcbiAgdmFyIG1lc3MsIF91cmwsIGpzb24sIHRtcCA9IFwiXCI7XHJcbiAgdG1wID0gZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3MubWVzc2FnZV90ZXh0KVxyXG4gIGNvbnN0IGluZm9UaHJlYWQgPSAoYXJncy5hZGRNZXNzYWdlVGhyZWFkID8gXCIg0J/QvtGC0L7QuiDihJZcIiArIHRocmVhZF9udW1iZXIoKSArIFwiIDogXCIgOiBcIlwiKVxyXG4gIGNvbnN0IGluZm9UaW1lID0gKGFyZ3MuYWRkTWVzc2FnZVRpbWUgPyBcIjxiPlwiICsgZ2V0VGltZSgpICsgaW5mb1RocmVhZCArIFwiPC9iPlwiIDogKGFyZ3MuYWRkTWVzc2FnZVRocmVhZCA/IFwiPGI+XCIgKyBpbmZvVGhyZWFkICsgXCI8L2I+XCIgOiBcIlwiKSkgXHJcbiAgbWVzcyA9IGluZm9UaW1lICsgdG1wXHJcbiAgX3VybCA9IFwiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdFwiKyBhcmdzLmJvdF90b2tlbiArIFwiL3NlbmRNZXNzYWdlP2NoYXRfaWQ9XCIgKyBhcmdzLmNoYXRfaWQgKyBcIiZ0ZXh0PVwiICsgbWVzcyArIChhcmdzLmFkZE1lc3NhZ2VUaHJlYWQgfHwgYXJncy5hZGRNZXNzYWdlVGltZSA/ICcmcGFyc2VfbW9kZT1IVE1MJyA6ICcnKVxyXG4gIF9zd2l0Y2hfaHR0cF9jbGllbnRfaW50ZXJuYWwoKVxyXG4gIGh0dHBfY2xpZW50X2dldDIoX3VybCwge21ldGhvZDooXCJHRVRcIil9KSFcclxuICB2YXIganNvbiA9IEpTT04ucGFyc2UoaHR0cF9jbGllbnRfY29udGVudCgpKVxyXG4gIF9zd2l0Y2hfaHR0cF9jbGllbnRfbWFpbigpXHJcbiAgaWYgKCFqc29uWydvayddKVxyXG4gIGZhaWwoanNvblsnZGVzY3JpcHRpb24nXSwgZmFsc2UpXHJcbn0iLCJjbGFzcyI6ImV4cHJlc3Npb24ifV19*/
      /**
      * Отправить Сообщение (BAS-функция)
      * Отправить сообщение в заданный Telegram чат.
      * Как создать бота и получить chat id https://habrahabr.ru/post/306222/
      * @param {string} bot_token Token бота
      * @param {string} chat_id Id чата
      * @param {string} message_text Текст сообщения
      * @param {boolean} addMessageThread Добавить в начало сообщения номер потока
      * @param {boolean} addMessageTime Добавить в начало сообщения время [hh:mm:ss]
      */
      function BAS_telegram_send_message() {
      const args = _arguments()
      var getTime = function() {
      var checkTime = function (i) {
      return (i < 10) ? "0" + i : i;
      }
      var d = new Date();
      var hh = checkTime(d.getHours());
      var mm = checkTime(d.getMinutes());
      var ss = checkTime(d.getSeconds());
      return '[' + hh + ':' + mm + ':' + ss + ']'
      }
      var mess, _url, json, tmp = "";
      tmp = encodeURIComponent(args.message_text)
      const infoThread = (args.addMessageThread ? " Поток №" + thread_number() + " : " : "")
      const infoTime = (args.addMessageTime ? "<b>" + getTime() + infoThread + "</b>" : (args.addMessageThread ? "<b>" + infoThread + "</b>" : ""))
      mess = infoTime + tmp
      _url = "https://api.telegram.org/bot"+ args.bot_token + "/sendMessage?chat_id=" + args.chat_id + "&text=" + mess + (args.addMessageThread || args.addMessageTime ? '&parse_mode=HTML' : '')
      _switch_http_client_internal()
      http_client_get2(_url, {method:("GET")})!
      var json = JSON.parse(http_client_content())
      _switch_http_client_main()
      if (!json['ok'])
      fail(json['description'], false)
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022timezone\u0022\u007d", 791222466)!
      /*Dat:*/
      /**
      * Установить месторасположение браузера по ип (BAS-функция)
      * Установить часовой пояс и месторасположение браузера в те же значения, что и часовой пояс и месторасположение ip.
      * Сайт может получать информацию о системном часовом поясе и местоположении с использованием внутреннего апи (пример 1 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset, пример 2 https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API). Это действие позволяет заменять значения часового пояса и местоположения, возвращаемые браузером.
      * Full list of timezones can be found здесь https://en.wikipedia.org/wiki/List_of_UTC_time_offsets.
      * Чтобы получать информацию об ip используется либо локальная база данных либо внешний сервис, смотрите раздел "Информация об IP" чтобы узнать больше.
      * Рекомендуется использовать действие 'Прокси' вместо этого, потому что оно автоматически установит часовой пояс в браузере соответствии с текущим прокси.
      *
      * @param {string} ip Ip адрес
      Эта строка должна содержать ip адрес. Ipv6 адреса должны быть заключены в квадратные скобки. Часовой пояс и месторасположение будут получены из выбранного ip, и настройки браузера будут обновлены соответственно этим значениям.
      Примеры :
      140.97.75.15 - Пример ipv4
      140.97.75.15:8080 - Неправильно, ip адрес не может содержать порт.
      [2a03:2880:f11c:8083:face:b00c:0:25de] - Пример ipv6
      @param {boolean} change_timezone Изменить часовой пояс
      Изменить часовой пояс браузера в соответствии с заданным ip. Например, если ip находится в Англии, то часовой пояс браузера будет изменен на UTC+00:00. Вы можете задать произвольное значение с помощью модуля 'Часовой пояс'.
      Примеры :
      true - Изменить часовой пояс.
      false - Не изменять часовой пояс.
      @param {boolean} change_location Изменить месторасположение
      Измененить месторасположение(координаты) браузера в соответствии с заданным ip. Оно будет установлено в точку, близкую к долготе/широте ip. Вы можете задать произвольное значение с помощью модуля 'Часовой пояс'.
      Примеры :
      true - Запрос браузера на доступ к вашему месторасположению будет принят. Расположение браузера будет установлено в соответствии с ip.
      false - Не менять месторасположение. Запрос браузера на доступ к вашему месторасположению будет отклонен.
      @param {boolean} change_ip_web_rtc Изменить ip WebRTC
      Заменить ip, возвращаемый WebRTC на заданный ip. Если вы хотите задать произвольное значение, используйте действие 'Настройки браузера'.
      Примеры :
      true - Включить WebRTC, заменить ip, возвращаемый WebRTC на заданный ip.
      false - Не менять состояние WebRTC.
      @param {boolean} change_browser_language Изменить язык браузера
      Изменить язык браузера в зависимости от страны ip. Этот параметр изменит заголовок Accept-Language, а также свойства javascript navigator.language и navigator.languages. По умолчанию значение языка будет состоять из языка и кода страны, разделенными дефисом, например 'de-DE' для Германии. Это значение корректное, но большинство браузеров использует более сложные варианты. Если вы хотите, чтобы BAS выглядел как настоящий браузер, используйте сервис FingerprintSwitcher, он установит язык более в более естественное значение, например, для iPhone из Германии оно будет равно 'de, en;q=0.8, *;q=0.01'. Вы также можете установить это значение явно, используя действие 'Установить заголовок'
      Примеры :
      true - Изменить язык браузера в зависимости от страны ip.
      false - Не изменять зык браузера, значение по умолчанию - 'en-US,en;q=0.9'.
      @param {'database' | 'ip-api.com' | 'custom function'} ip_method Метод получения информации о IP
      Метод, который будет использоваться для получения информации об IP.
      Примеры :
      database - Использовать внутреннюю базу данных, данный подход работает быстро и всегда доступен. Хотя база данных постоянно обновляется, этот метод может быть не самым точным по сравнению с другими.
      ip-api.com - Использовать сервис ip-api.com. Бесплатная версия имеет ограничение - 45 запросов с одного IP. Pro версия не ограничена количеством запросов, но стоит 15$ в месяц.
      custom function - Использовать отдельную BAS функцию для получения информации.
      @param {string} ip_api_key Ключ ip-api.com. Может быть пустым.
      Ключ от сервиса ip-api.com pro версии. Ключ доступен после покупки. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "ip-api.com".
      Примеры :
      Пустая строка - Использовать бесплатную версию
      Ключ - Использовать pro версию
      @param {Function} info_func Отдельная функция для получения информации об IP
      Отдельная функция BAS, которая получает строку IP (входной параметр называется "Ip") и возвращает JSON с информацией об IP. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "custom function".
      Примеры :
      {
      valid: true,
      city: "Frankfurt am Main",
      country: "DE",
      dstoffset: -120,
      offset: -60,
      timezone: "Europe/Berlin",
      longitude: 8.6843,
      latitude: 50.1188
      } - Пример JSON, который должна возвращать функция.
      */
      function BAS_timezone_set_geo_location() {
      const args = _arguments()
      const ip = args.ip
      const change_timezone = args.change_timezone
      const change_location = args.change_location
      const change_ip_web_rtc = args.change_ip_web_rtc
      const change_browser_language = args.change_browser_language
      const ip_method = args.ip_method || 'database'
      const ip_api_key = args.ip_api_key || ''
      const info_func = args.info_func
      _call(_get_ip_info, [ip, ip_method, ip_api_key, info_func])!
      IP_INFO = _result()
      if(!IP_INFO["valid"])
      fail("Failed to get ip info for " + ip);
      _if(change_location, function(){
      geolocation(IP_INFO["latitude"],IP_INFO["longitude"])!
      })!
      _if(change_timezone, function(){
      _settings({"Timezone":(-IP_INFO["offset"]).toString(),"TimezoneName":IP_INFO["timezone"]})!
      })!
      _if(change_ip_web_rtc, function(){
      _settings({"Webrtc":"replace","WebrtcIps": ip})!
      })!
      _if(change_browser_language, function(){
      var country = IP_INFO["country"].toUpperCase()
      var language = native("timezones", "country_to_language", country)
      header("Accept-Language", language + "-" + country)!
      _settings({"Fingerprints.Locale":IP_INFO["country"].toLowerCase()})!
      })!
      sleep(1000)!
      }
      /**
      * Установить часовой пояс (BAS-функция)
      * Установить часовой пояс браузера. Часовой пояс также можно изменить с помощью действия "Прокси".
      * Сайт может получать информацию о системном часовом поясе, используя класс 'Date' https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset. Это действие позволяет заменить возвращаемые значения.
      * Полный список смещений можно найти здесь https://en.wikipedia.org/wiki/List_of_UTC_time_offsets, список названий можно найти здесь https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
      * Оставьте любое поле пустым, если вы не хотите менять его значение.
      * Рекомендуется использовать действие 'Прокси' вместо этого, потому что оно автоматически установит часовой пояс в браузере соответствии с текущим прокси.
      *
      * @param {number} utc_offset Смещение относительно UTC. Может быть пустым
      Смещение относительно UTC - это разница в минутах от универсального глобального времени(UTC) для определенного места и даты. Обратите внимание, что это значит, что смещение будет положительным для часового пояса, находящегося западнее часового пояса UTC и отрицательным — восточнее. Например, если ваш часовой пояс равен UTC+10:00 (австралийское восточное поясное время), то ему будет соответствовать значение -600, так как в 10 часах содержится 600 минут.
      Примеры :
      Пустая строка - Не устанавливать смещение относительно UTC
      -60 - UTC+01:00 - Испания, Франция, Германия
      -120 - UTC+02:00 - Финляндия, Румыния, Украина, Греция
      @param {string} timezone_name Название часового пояса. Может быть пустым
      Название часового пояса.
      Примеры :
      Пустая строка - Не задавать название часового пояса
      Europe/Berlin
      */
      function BAS_set_timezone() {
      const args = _arguments()
      const utc_offset = args.utc_offset || ''
      const timezone_name = args.timezone_name || ''
      var UpdatedSettings = {}
      if(utc_offset.toString().length > 0)
      {
      UpdatedSettings["Timezone"] = (-parseInt(utc_offset)).toString()
      }
      if(timezone_name.toString().length > 0)
      {
      UpdatedSettings["TimezoneName"] = timezone_name
      }
      _settings(UpdatedSettings)!
      sleep(1000)!
      }
      /**
      * Установить координаты (BAS-функция)
      * Установить месторасположение браузера. Месторасположение также можно изменить с помощью действия "Прокси".
      * Сайт может получить информацию о вашем месторасположении используя данное апи https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API. Это действие позволяет заменяить месторасположение возвращаемое браузером.
      * Использование этого действия не обязательно, чтобы скрыть ваше местоположение, потому что координаты могут быть получены только после того, как пользователь примет запрос от сайта в специальном всплывающем окне. По умолчанию, если вы не используете это действие, всплывающее окно отклоняется BAS
      * Оставьте любое поле пустым, если вы не хотите менять его значение.
      * Используйте параметр "Объект геолокации" для изменения возвращаемого объекта GeolocationCoordinates https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates
      * Рекомендуется использовать действие 'Прокси' вместо этого, потому что оно автоматически установит месторасположение браузера в соответствии с текущим прокси.
      *
      * @param {number} latitude Широта. Может быть пустым
      Точные координаты вашего месторасположения. Это значение будет возвращено браузером в качестве ответа на запрос местоположения от сайта.
      Примеры :
      Пустая строка - Не устанавливать широту
      10.433
      * @param {number} longitude Долгота. Может быть пустым
      Точные координаты вашего месторасположения. Это значение будет возвращено браузером в качестве ответа на запрос местоположения от сайта.
      Примеры :
      Пустая строка - Не устанавливать долготу
      10.433
      @param {Object} geolocation_object Объект геолокации
      Это поле содержит свойства возвращаемого объекта геолокации. Изменяя этот объект, вы можете настроить, например, свойство accuracy или другие. Этот объект не должен включать latitude и longitude, они задаются через отдельные настройки.
      */
      function BAS_timezone_set_coordinates() {
      const args = _arguments()
      const latitude = args.latitude || ''
      const longitude = args.longitude || ''
      const geolocation_object = args.geolocation_object || {
      accuracy: 4413,
      altitude: null,
      altitudeAccuracy: null,
      heading: null,
      speed: null
      }
      _if(latitude.toString().length > 0 && longitude.toString().length > 0, function(){
      geolocation(parseFloat(latitude),parseFloat(longitude))!
      })!
      geolocation_object({
      accuracy: geolocation_object.accuracy || 4413,
      altitude: geolocation_object.altitude || null,
      altitudeAccuracy: geolocation_object.altitudeAccuracy || null,
      heading: geolocation_object.heading || null,
      speed: geolocation_object.speed || null
      })!
      sleep(1000)!
      }
      /**
      * Сведения об ип (BAS-функция)
      * Получить информацию для заданном ip, включает смещение относительно UTC, часовой пояс и другое.
      * Чтобы получать информацию об ip используется либо локальная база данных либо внешний сервис, смотрите раздел "Информация об IP" чтобы узнать больше.
      *
      * @param {string} ip Ip адрес
      Эта строка должна содержать ip адрес. Ipv6 адреса должны быть заключены в квадратные скобки.
      Примеры :
      140.97.75.15 - Пример ipv4
      140.97.75.15:8080 - Неправильно, ip адрес не может содержать порт.
      [2a03:2880:f11c:8083:face:b00c:0:25de] - Пример ipv6
      @param {'database' | 'ip-api.com' | 'custom function'} Метод получения информации о IP
      Метод, который будет использоваться для получения информации об IP.
      Примеры :
      database - Использовать внутреннюю базу данных, данный подход работает быстро и всегда доступен. Хотя база данных постоянно обновляется, этот метод может быть не самым точным по сравнению с другими.
      ip-api.com - Использовать сервис ip-api.com. Бесплатная версия имеет ограничение - 45 запросов с одного IP. Pro версия не ограничена количеством запросов, но стоит 15$ в месяц.
      custom function - Использовать отдельную BAS функцию для получения информации.
      @param {string} ip_api_key Ключ ip-api.com. Может быть пустым.
      Ключ от сервиса ip-api.com pro версии. Ключ доступен после покупки. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "ip-api.com".
      Примеры :
      Пустая строка - Использовать бесплатную версию
      Ключ - Использовать pro версию
      @param {Function} info_func Отдельная функция для получения информации об IP
      Отдельная функция BAS, которая получает строку IP (входной параметр называется "Ip") и возвращает JSON с информацией об IP. Этот параметр используется только в том случае, если для параметра "Метод получения информации о IP" задано значение "custom function".
      Примеры :
      {
      valid: true,
      city: "Frankfurt am Main",
      country: "DE",
      dstoffset: -120,
      offset: -60,
      timezone: "Europe/Berlin",
      longitude: 8.6843,
      latitude: 50.1188
      } - Пример JSON, который должна возвращать функция.
      *
      * @returns Object {
      *  valid: boolean - Ip распознан корректно
      Эта переменная возвращает значение, которое идентифицирует, был ли ip распознан корректно. Только если значение этой переменной равно true, могут быть использованы другие возвращаемые значения.
      Примеры :
      true - Информация об ip получена корректно
      false - Не удалось получить сведения об ip
      country: string - Страна
      Aббревиатура страны
      Примеры :
      US - США
      RU - Российская Федерация
      city: string - Город
      Город
      Примеры :
      Boston
      Moscow
      latitude: number - Latitude
      Координаты ip.
      Примеры :
      10.433
      longitude: number - Longitude
      Координаты ip.
      Примеры :
      10.433
      timezone: string - Часовой пояс
      Название часового пояса.
      Примеры :
      Europe/Lisbon
      Asia/Dubai
      offset: number - Смещение
      Смещение относительно UTC - это разница в минутах между универсальным глобального времени(UTC) и локальным временем данного ip. Обратите внимание, что это значит, что смещение будет положительным для часового пояса, находящегося западнее часового пояса UTC и отрицательным — восточнее. Например, если ваш часовой пояс равен UTC+10:00 (австралийское восточное поясное время), то ему будет соответствовать значение -600, так как в 10 часах содержится 600 минут.
      Примеры :
      -60 - UTC+01:00 - Испания, Франция, Германия
      -120 - UTC+02:00 - Финляндия, Румыния, Украина, Греция
      dst_offset: number - Смещение летнего времени
      Смещение для летнего времени.
      * }
      */
      function BAS_timezone_get_ip_info() {
      const args = _arguments()
      const ip = args.ip
      const ip_method = args.ip_method || 'database'
      const ip_api_key = args.ip_api_key || ''
      const info_func = args.info_func
      _call(_get_ip_info, [ip, ip_method, ip_api_key, info_func])!
      var json = _result()
      VAR_IPINFO_VALID = json["valid"]
      VAR_IPINFO_COUNTRY = json["country"]
      VAR_IPINFO_CITY = json["city"]
      VAR_IPINFO_LATITUDE = json["latitude"]
      VAR_IPINFO_LONGITUDE = json["longitude"]
      VAR_IPINFO_TIMEZONE = json["timezone"]
      VAR_IPINFO_OFFSET = json["offset"]
      VAR_IPINFO_DST_OFFSET = json["dstoffset"]
      const result = {
      valid: VAR_IPINFO_VALID,
      country: VAR_IPINFO_COUNTRY,
      city: VAR_IPINFO_CITY,
      latitude: VAR_IPINFO_LATITUDE,
      longitude: VAR_IPINFO_LONGITUDE,
      timezone: VAR_IPINFO_TIMEZONE,
      offset: VAR_IPINFO_OFFSET,
      dst_offset: VAR_IPINFO_DST_OFFSET
      }
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022url\u0022\u007d", 699924703)!
      /*Dat:*/
      /**
      * Нормализовать URL
      * Нормализовать URL.
      * Это действие вернет строку, содержащую URL, нормализованную в соответствии с указанными параметрами. Подробнее о нормализации URL можно узнать в Wiki https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_URL.
      * Например, URL "www.site.com/api.php?b=two&a=one&c=three" будет нормализован до "https://site.com/api.php?a=one&b=two&c=three", если в параметр "Протокол по умолчанию" указан "https" и активированы параметры "Вырезать WWW", "Сортировать параметры запроса".
      * Параметр "Нормализовать протокол" отвечает за нормализацию относительного протокола. Подробнее об относительном протоколе можно узнать в Wiki https://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL.
      * Получить из строки список ссылок можно с помощью действия "Извлечь все ссылки" из модуля "Строка".
      * Распарсить ссылку на элементы можно с помощью действия "Парсить URL".
      * Создать ссылку из элементов можно с помощью действия "Создать URL".
      * Изменить элементы ссылки можно с помощью действия "Изменить URL".
      *
      * @param {string} url URL
      Строка, содержащая URL, который нужно нормализовать.
      Примеры :
      https://en.wikipedia.org/wiki/URL/
      //fingerprints.bablosoft.com/#testing/
      rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page/
      * @param {Object} params {
      *  base_url: string - Базовый URL. Может быть пустым
      Необязательный параметр. URL используемый в случае, если основной URL является относительным.
      Примеры :
      https://en.wikipedia.org
      https://fingerprints.bablosoft.com
      https://rucaptcha.com
      default_protocol: 'https' | 'http' | 'wss' | 'ws' | 'ftps' | 'ftp' | 'file' - Протокол по умолчанию
      Протокол, который будет добавлен, если URL его не содержит.
      Примеры :
      http - URL testsite.com/ будет нормализована до http://testsite.com
      https - URL testsite.com будет нормализована до https://testsite.com
      normalize_protocol: boolean - Нормализовать протокол
      Если активирован и URL содержит относительный протокол, то к URL будет добавлен протокол из параметра "Протокол по умолчанию".
      Примеры :
      Активирован - URL //testsite.com/ будет нормализована до http://testsite.com
      Деактивирован - URL //testsite.com/ будет нормализована до //testsite.com
      froce_http: boolean - Принудительно http
      Если активирован, то в URL протокол https будут заменен на http.
      Примеры :
      Активирован - URL https://testsite.com/ будет нормализована до http://testsite.com
      Деактивирован - URL https://testsite.com/ будет нормализована до https://testsite.com
      force_https: boolean - Принудительно https
      Если активирован, то в URL протокол http будут заменен на https.
      Примеры :
      Активирован - URL http://testsite.com/ будет нормализована до https://testsite.com
      Деактивирован - URL http://testsite.com/ будет нормализована до http://testsite.com
      strip_authentication: boolean - Вырезать аутентификацию
      Если активирован, то из URL будут вырезаны данные аутентификации.
      Примеры :
      Активирован - URL user:pass@testsite.com/ будет нормализована до http://testsite.com
      Деактивирован - URL user:pass@testsite.com/ будет нормализована до http://user:pass@testsite.com
      strip_query: boolean - Вырезать запрос
      Если активирован, то из URL будут вырезан запрос.
      Примеры :
      Активирован - URL https://testsite.com/api.php?a=one&b=two&c=three будет нормализована до https://testsite.com/api.php
      Деактивирован - URL testsite.com/api.php?a=one&b=two&c=three будет нормализована до http://testsite.com/api.php?a=one&b=two&c=three
      strip_hash: boolean - Вырезать фрагмент/якорь
      Если активирован, то из URL будут вырезан фрагмент/якорь.
      Примеры :
      Активирован - URL testsite.com/info.html#fragment будет нормализована до http://testsite.com/info.html
      Деактивирован - URL testsite.com/info.html#fragment будет нормализована до http://testsite.com/info.html#fragment
      strip_protocol: boolean - Вырезать протокол
      Если активирован, то из URL будут вырезан протокол.
      Примеры :
      Активирован - URL https://testsite.com/ будет нормализована до testsite.com
      Деактивирован - URL https://testsite.com/ будет нормализована до https://testsite.com
      strip_www: boolean - Вырезать WWW
      Если активирован, то из URL будут вырезан WWW.
      Примеры :
      Активирован - URL https://www.testsite.com/ будет нормализована до https://testsite.com
      Деактивирован - URL https://www.testsite.com/ будет нормализована до https://www.testsite.com
      remove_query_parameters: Array<string> - Удалить параметры запроса. Может быть пустым
      Необязательный параметр. Список, состоящий из строк или регулярных выражений. Параметры запроса, имена которых соответствуют любому из указанных элементов списка, будут удалены. В качестве списка можно использовать строку, состоящую из имен параметров запроса, разделенных запятыми.
      Примеры :
      [/^utm_w+/i]
      ["foo", "ref"]
      ["bar", "test"]
      foo, bar, top
      test,ref,bottom
      Пустая строка - Не удалять параметры запроса
      remove_trailing_slash: boolean - Удалить завершающий слэш
      Если активирован, то из URL будет удален завершающий слэш.
      Примеры :
      Активирован - URL testsite.com/info/ будет нормализована до http://testsite.com/info
      Деактивирован - URL testsite.com/info/ будет нормализована до http://testsite.com/info/
      remove_directory_index: Array<string> - Удалить индекс каталога. Может быть пустым
      Необязательный параметр. Список, состоящий из строк или регулярных выражений. Индексы каталога, которые соответствуют любому из указанных элементов списка, будут удалены. В качестве списка можно использовать строку, состоящую из индексов каталога, разделенных запятыми.
      Примеры :
      [/^index.[a-z]+$/]
      [/^default.[a-z]+$/]
      ["index.php", "default.php"]
      index.html, index.php, default.php
      index.html,index.php,default.php
      Пустая строка - Не удалять индекс каталога
      sort_query_parameters: boolean - Сортировать параметры запроса
      Если активирован, то параметры запроса будут отсортированы по имени в алфавитном порядке.
      Примеры :
      Активирован - URL https://testsite.com/api.php?b=two&a=one&c=three будет нормализована до https://testsite.com/api.php?a=one&b=two&c=three
      Деактивирован - URL testsite.com/api.php?b=two&a=one&c=three будет нормализована до http://testsite.com/api.php?b=two&a=one&c=three
      * }
      * @returns итоговый URL.
      Примеры :
      https://en.wikipedia.org/wiki/URL
      http://fingerprints.bablosoft.com/#testing
      http://rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page
      */
      function BAS_url_normalize(url, params) {
      const url = _function_argument('url') || url
      const params = _function_argument('params') || params
      const result = _normalize_url(url, params)
      return result
      }
      /**
      * Парсить URL
      * Распарсить строку URL на элементы.
      * Это действие сохранит каждый элемент URL в свою переменную. Подробнее о URL можно узнать в Wiki https://ru.wikipedia.org/wiki/URL.
      * Запрос сохраняется в виде объекта, в котором ключ - это имя параметра, а значение - это значение параметра.
      * Чтобы получить значение параметра запроса, используйте JPath запрос $.key, где key - это имя параметра, в действии "Получить значение" из модуля "JSON".
      * Перед парсингом URL можно нормализовать, активировав соответствующий параметр в дополнительных настройках, или использовать действие "Нормализовать URL" для гибкой нормализации. Подробнее о нормализации URL можно узнать в Wiki https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_URL.
      * Получить из строки список ссылок можно с помощью действия "Извлечь все ссылки" из модуля "Строка".
      * Создать ссылку из элементов можно с помощью действия "Создать URL".
      * Изменить элементы ссылки можно с помощью действия "Изменить URL".
      * Если указан недействительный URL, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки", или деактивируйте соответствующий параметр в дополнительных настройках.
      *
      * @param {string} url URL
      Строка, содержащая URL, который нужно распарсить.
      Примеры :
      https://en.wikipedia.org/wiki/URL
      https://fingerprints.bablosoft.com/#testing
      https://rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page/
      * @param {boolean} normalize Нормализовать URL перед парсингом
      * @param {string} base_url Базовый URL
      Необязательный параметр. URL используемый в случае, если основной URL является относительным.
      Примеры :
      https://en.wikipedia.org
      https://fingerprints.bablosoft.com
      https://rucaptcha.com
      * @param {boolean} rfail Завершить действие ошибкой, если указан недействительный URL
      * @returns Object {
      *  protocol: string - Протокол/Схема
      Эта переменная будет содержать протокол/схему указанного URL. Схема обращения к ресурсу, в большинстве случаев, имеется в виду сетевой протокол.
      Примеры :
      https
      http
      ws
      ftp
      Пустая строка - Указанный URL не содержит протокола/схемы
      username: string - Логин
      Эта переменная будет содержать имя пользователя указанного URL. Имя пользователя, используемое для доступа к ресурсу.
      Примеры :
      user1
      login321
      myname
      Пустая строка - Указанный URL не содержит логина
      password: string - Пароль
      Эта переменная будет содержать пароль указанного пользователя.
      Примеры :
      pass123
      mypassword111
      goodpass
      Пустая строка - Указанный URL не содержит пароля
      host: string - Хост
      Эта переменная будет содержать имя хоста или ip (IPv4 или IPv6) указанного URL.
      Примеры :
      en.wikipedia.org
      fingerprints.bablosoft.com
      rucaptcha.com
      127.0.0.1
      [2a00:1450:4025:401::67]
      port: number - Порт
      Эта переменная будет содержать порт указанного URL.
      Примеры :
      80
      443
      21
      Пустая строка - Указанный URL не содержит порт
      path: string - Путь
      Эта переменная будет содержать путь указанного URL. Путь уточняет информацию о месте нахождения ресурса.
      Примеры :
      /wiki/URL
      /
      /in.php
      query: Object - Запрос
      Эта переменная будет содержать объект, состоящий из параметров запроса и полученных их значений из указанного URL. Запрос - это часть URL-адреса, начинающаяся с символа "?", параметры разделяются знаком "&", а имя параметра и его значение разделяются знаком "=".
      Примеры :
      {"foo":"bar"}
      {"query":"string"}
      {"key":"1abc234de56fab7c89012d34e56fa7b8", "method":"userrecaptcha", "version":"enterprise", "action":"verify", "min_score":0.3, "googlekey":"6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE", "pageurl":"http://mysite.com/page/"}
      { } - Указанный URL не содержит параметров запроса
      fragment: Фрагмент/Якорь
      Эта переменная будет содержать фрагмент/якорь указанного URL. Фрагмент/Якорь - это часть URL-адреса, начинающаяся с символа "#", он может указывать заголовок внутри документа или id атрибут элемента. По ссылке с фрагментом/якорем браузер откроет страницу и переместит окно к указанному элементу.
      Примеры :
      info
      testing
      solving_recaptcha_enterprise
      Пустая строка - Указанный URL не содержит фрагмент/якорь
      * }
      */
      function BAS_url_parse(url, normalize, base_url, rfail) {
      const url = _function_argument('url') || url
      const normalize = _function_argument('normalize') || normalize
      const base_url = _function_argument('base_url') || base_url
      const rfail = _function_argument('rfail') || rfail
      const parse_res = new _url(url, {
      normalize: normalize,
      base_url: base_url,
      rfail: rfail
      })
      VAR_PARSED_URL_PROTOCOL = _avoid_nil(parse_res["protocol"]);
      VAR_PARSED_URL_USERNAME = _avoid_nil(parse_res["username"]);
      VAR_PARSED_URL_PASSWORD = _avoid_nil(parse_res["password"]);
      VAR_PARSED_URL_HOST = _avoid_nil(parse_res["host"]);
      VAR_PARSED_URL_PORT = _avoid_nil(parse_res["port"]);
      VAR_PARSED_URL_PATH = _avoid_nil(parse_res["pathname"]);
      VAR_PARSED_URL_QUERY = _avoid_nil(parse_res["query"]);
      VAR_PARSED_URL_FRAGMENT = _avoid_nil(parse_res["hash"]);
      const result = {
      protocol: VAR_PARSED_URL_PROTOCOL,
      username: VAR_PARSED_URL_USERNAME,
      password: VAR_PARSED_URL_PASSWORD,
      host: VAR_PARSED_URL_HOST,
      port: VAR_PARSED_URL_PORT,
      path: VAR_PARSED_URL_PATH,
      query: VAR_PARSED_URL_QUERY,
      fragment: VAR_PARSED_URL_FRAGMENT
      }
      _function_return(result)
      return result
      }
      /**
      * Создать URL
      * Создать URL из указанных элементов.
      * Это действие вернет строку, содержащую итоговый URL. Подробнее о URL можно узнать в Wiki https://ru.wikipedia.org/wiki/URL.
      * Укажите значения для элементов которые нужно добавить в URL, оставьте пустыми элементы которые не нужно добавлять.
      * Запрос нужно указывать в виде объекта, в котором ключ - это имя параметра, а значение - это значение параметра, пример: {"foo":"bar"}. Или в виде строки, в которой параметры разделяются знаком "&", а имя параметра и его значение разделяются знаком "=", пример: "foo=bar".
      * Распарсить ссылку на элементы можно с помощью действия "Парсить URL".
      * Изменить элементы ссылки можно с помощью действия "Изменить URL".
      *
      * @param {Object} params {
      *  protocol: string - Протокол/Схема. Может быть пустым
      Необязательный параметр. Схема обращения к ресурсу, в большинстве случаев, имеется в виду сетевой протокол.
      Примеры :
      https
      http
      ws
      ftp
      Пустая строка - Не добавлять этот элемент в итоговый URL
      username: string - Логин. Может быть пустым
      Необязательный параметр. Имя пользователя, используемое для доступа к ресурсу.
      Примеры :
      user1
      login321
      myname
      Пустая строка - Не добавлять этот элемент в итоговый URL
      password: string - Пароль. Может быть пустым
      Необязательный параметр. Пароль указанного пользователя.
      Примеры :
      pass123
      mypassword111
      goodpass
      Пустая строка - Не добавлять этот элемент в итоговый URL
      host: string - Хост. Может быть пустым
      Необязательный параметр. Имя хоста или ip (IPv4 или IPv6).
      Примеры :
      en.wikipedia.org
      fingerprints.bablosoft.com
      rucaptcha.com
      127.0.0.1
      [2a00:1450:4025:401::67]
      Пустая строка - Не добавлять этот элемент в итоговый URL
      port: string - Порт. Может быть пустым
      Необязательный параметр. Порт ресурса.
      Примеры :
      80
      443
      21
      Пустая строка - Не добавлять этот элемент в итоговый URL
      pathname: string - Путь. Может быть пустым
      Необязательный параметр. Путь, уточняющий информацию о месте нахождения ресурса.
      Примеры :
      /wiki/URL
      /
      /in.php
      Пустая строка - Не добавлять этот элемент в итоговый URL
      query: string - Запрос. Может быть пустым
      Необязательный параметр. Объект или строка запроса. Запрос - это часть URL-адреса, начинающаяся с символа "?", параметры разделяются знаком "&", а имя параметра и его значение разделяются знаком "=".
      Примеры :
      {"foo":"bar"}
      {"query":"string"}
      sitekey=10000000-ffff-ffff-ffff-000000000001&pageurl=http://mysite.com/register
      Пустая строка - Не добавлять этот элемент в итоговый URL
      hash: string - Фрагмент/Якорь. Может быть пустым
      Необязательный параметр. Фрагмент/Якорь - это часть URL-адреса, начинающаяся с символа "#", он может указывать заголовок внутри документа или id атрибут элемента. По ссылке с фрагментом/якорем браузер откроет страницу и переместит окно к указанному элементу.
      Примеры :
      info
      testing
      solving_recaptcha_enterprise
      Пустая строка - Не добавлять этот элемент в итоговый URL
      * }
      * @returns итоговый URL.
      Примеры :
      https://en.wikipedia.org/wiki/URL
      http://fingerprints.bablosoft.com/#testing
      http://rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page
      */
      function BAS_generate_url(params) {
      const params = _function_argument('params') || params
      const obj = {
      protocol: params.protocol || '',
      username: params.username || '',
      password: params.password || '',
      host: params.host || '',
      port: params.port || '',
      pathname: params.pathname || '',
      query: params.query || '',
      hash: params.hash || ''
      }
      const result = _generate_url(obj)
      _function_return(result)
      return result
      }
      /**
      * Изменить URL
      * Изменить элементы указанной URL.
      * Это действие вернет строку, содержащую изменный URL. Подробнее о URL можно узнать в Wiki https://ru.wikipedia.org/wiki/URL.
      * Укажите новые значения для элементов, которые нужно изменить в URL, укажите "-BAS-CLEAR-" если элемент нужно удалить, оставьте поле пустым если элемент не нужно менять.
      * Запрос нужно указывать в виде объекта, в котором ключ - это имя параметра, а значение - это значение параметра, пример: {"foo":"bar"}. Или в виде строки, в которой параметры разделяются знаком "&", а имя параметра и его значение разделяются знаком "=", пример: "foo=bar".
      * Если активирован параметр "Очистить старую строку запроса", то при указании параметра "Запрос" его значение будет полностью заменять старую строку запроса в указанном URL.
      * Например, если указан URL "https://site.com/?a=b", запрос {"c":"d"} и активирован параметр "Очистить старую строку запроса", то действие вернет "https://site.com/?c=d".
      * Если параметр "Очистить старую строку запроса" деактивирован, то при указании параметра "Запрос" его значение будет объединено со значением старой строки запроса в указанном URL. Если элемент с одинаковым именем присутствует как в старом, так и в новом запросе, то в итоговый URL будет добавлено только значение из нового запроса. Элементы, присутствующие только в старом или только в новом запросе, будут добавлены в итоговый URL без изменений. Элементы нового запроса содержащие "-BAS-CLEAR-", будут удалены из итогового URL.
      * Например, если указан URL "https://site.com/?a=b&c=d&e=f", запрос {"a":"i","c":"-BAS-CLEAR-","g":"h"} и деактивирован параметр "Очистить старую строку запроса", то действие вернет "https://site.com/?a=i&e=f&g=h".
      * Перед изменением URL можно нормализовать, активировав соответствующий параметр в дополнительных настройках, или использовать действие "Нормализовать URL" для гибкой нормализации. Подробнее о нормализации URL можно узнать в Wiki https://ru.wikipedia.org/wiki/%D0%9D%D0%BE%D1%80%D0%BC%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_URL.
      * Распарсить ссылку на элементы можно с помощью действия "Парсить URL".
      * Создать ссылку из элементов можно с помощью действия "Создать URL".
      * Если указан недействительный URL, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие "Игнорировать ошибки", или деактивируйте соответствующий параметр в дополнительных настройках.
      *
      * @param {string} url URL
      Строка, содержащая URL, который нужно изменить.
      Примеры :
      https://en.wikipedia.org/wiki/URL
      https://fingerprints.bablosoft.com/#testing
      https://rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page/
      * @param {Object} params {
      *  protocol: string - Протокол/Схема. Может быть пустым
      Необязательный параметр. Схема обращения к ресурсу, в большинстве случаев, имеется в виду сетевой протокол.
      Примеры :
      https
      http
      ws
      ftp
      Пустая строка - Не добавлять этот элемент в итоговый URL
      username: string - Логин. Может быть пустым
      Необязательный параметр. Имя пользователя, используемое для доступа к ресурсу.
      Примеры :
      user1
      login321
      myname
      Пустая строка - Не добавлять этот элемент в итоговый URL
      password: string - Пароль. Может быть пустым
      Необязательный параметр. Пароль указанного пользователя.
      Примеры :
      pass123
      mypassword111
      goodpass
      Пустая строка - Не добавлять этот элемент в итоговый URL
      host: string - Хост. Может быть пустым
      Необязательный параметр. Имя хоста или ip (IPv4 или IPv6).
      Примеры :
      en.wikipedia.org
      fingerprints.bablosoft.com
      rucaptcha.com
      127.0.0.1
      [2a00:1450:4025:401::67]
      Пустая строка - Не добавлять этот элемент в итоговый URL
      port: string - Порт. Может быть пустым
      Необязательный параметр. Порт ресурса.
      Примеры :
      80
      443
      21
      Пустая строка - Не добавлять этот элемент в итоговый URL
      pathname: string - Путь. Может быть пустым
      Необязательный параметр. Путь, уточняющий информацию о месте нахождения ресурса.
      Примеры :
      /wiki/URL
      /
      /in.php
      Пустая строка - Не добавлять этот элемент в итоговый URL
      query: string - Запрос. Может быть пустым
      Необязательный параметр. Объект или строка запроса. Запрос - это часть URL-адреса, начинающаяся с символа "?", параметры разделяются знаком "&", а имя параметра и его значение разделяются знаком "=".
      Примеры :
      {"foo":"bar"}
      {"query":"string"}
      sitekey=10000000-ffff-ffff-ffff-000000000001&pageurl=http://mysite.com/register
      Пустая строка - Не добавлять этот элемент в итоговый URL
      hash: string - Фрагмент/Якорь. Может быть пустым
      Необязательный параметр. Фрагмент/Якорь - это часть URL-адреса, начинающаяся с символа "#", он может указывать заголовок внутри документа или id атрибут элемента. По ссылке с фрагментом/якорем браузер откроет страницу и переместит окно к указанному элементу.
      Примеры :
      info
      testing
      solving_recaptcha_enterprise
      Пустая строка - Не добавлять этот элемент в итоговый URL
      * }
      @param {Object} settings {
      normalize: boolean - Нормализовать URL перед изменением
      base_url: string - Базовый URL
      Необязательный параметр. URL используемый в случае, если основной URL является относительным.
      Примеры :
      https://en.wikipedia.org
      https://fingerprints.bablosoft.com
      https://rucaptcha.com
      rfail: boolean - Завершить действие ошибкой, если указан недействительный URL
      clear_query: boolean - Очистить старую строку запроса
      Если активирован, то при указании параметра "Запрос" его значение будет полностью заменять старую строку запроса. Если деактивирован, то при указании параметра "Запрос" его значение будет объединено со значением старой строки запроса.
      Примеры :
      Активирован - URL "https://site.com/?a=b&c=d" будет изменена до "https://site.com/?f=g", если указан запрос "f=g" или {"f":"g"}
      Деактивирован - URL "https://site.com/?a=b&c=d" будет изменена до "https://site.com/?a=b&c=d&f=g", если указан запрос "f=g" или {"f":"g"}
      }
      * @returns итоговый URL.
      Примеры :
      https://en.wikipedia.org/wiki/URL
      http://fingerprints.bablosoft.com/#testing
      http://rucaptcha.com/in.php?key=1abc234de56fab7c89012d34e56fa7b8
      &method=userrecaptcha&version=enterprise&action=verify
      &min_score=0.3
      &googlekey=6LfZil0UAAAAAAdm1Dpzsw9q0F11-bmervx9g5fE&pageurl=http://mysite.com/page
      */
      function BAS_change_url(url, params) {
      const url = _function_argument('url') || url
      const params = _function_argument('params') || params
      VAR_CHANGED_URL = _change_url("URL", {protocol:("Протокол"), username:("Логин"), password:("Пароль"), host:("Хост"), port:("Порт"), pathname:("Путь"), query:("Запрос"), hash:("Фрагмен")}, {normalize: true, base_url: "Базовый URL", rfail: true, clear_query: true});
      const result = _change_url(url, params)
      _function_return(result)
      return result
      }
      /**
      * Парсить User-Agent
      * Распарсить строку User-Agent на элементы.
      * Это действие сохранит каждый элемент User-Agent в свою переменную.
      * User-agent - эта строка, содержащая информацию о используемом браузере, операционной системе, девайсе. Подробнее об User-agent можно узнать из Wiki https://ru.wikipedia.org/wiki/User_agent.
      *
      * @param {string} user_agent
      * @returns Object {
      *  platform_type: string - Тип платформы
      Эта переменная будет содержать тип платформы.
      Примеры :
      desktop
      mobile
      tablet
      tv
      car
      bot
      browser_name: string - Название браузера
      Эта переменная будет содержать название браузера.
      Примеры :
      Chrome
      Firefox
      Safari
      browser_version: string - Версия браузера
      Эта переменная будет содержать версию браузера.
      Примеры :
      86.0.4240.198
      82.0
      14.0
      browser_major_version: string - Основная версия браузера
      Эта переменная будет содержать основную версию браузера.
      Примеры :
      86
      82
      14
      engine_name: string - Название движка
      Эта переменная будет содержать название движка браузера.
      Примеры :
      Blink
      Gecko
      WebKit
      engine_version: string - Версия движка
      Эта переменная будет содержать версию движка браузера.
      Примеры :
      86.0.4240.198
      82.0
      605.1.15
      os_name: string - Название ОС
      Эта переменная будет содержать название операционной системы.
      Примеры :
      Android
      Windows
      Mac OS
      os_version: string - Версия ОС
      Эта переменная будет содержать версию операционной системы.
      Примеры :
      11
      10
      11.0.1
      device_vendor: string - Производитель устройства
      Эта переменная будет содержать название производителя устройства.
      Примеры :
      Samsung
      Asus
      Apple
      device_model: string - Модель устройства
      Эта переменная будет содержать модель устройства.
      Примеры :
      SM-T865
      ASU2JS
      iPhone
      device_type: string - Тип устройства
      Эта переменная будет содержать тип устройства.
      Примеры :
      tablet
      desktop
      mobile
      cpu_architecture: string - Архитектура процессора
      Эта переменная будет содержать архитектуру процессора.
      Примеры :
      amd64
      ia[32/64]
      arm[64]
      * }
      */
      function BAS_parse_user_agent(user_agent) {
      const user_agent = _function_argument('user_agent') || user_agent
      const parse_res = new _ua(user_agent);
      VAR_PARSED_UA_PLATFORM_TYPE = _avoid_nil(parse_res["platform"]["type"]);
      VAR_PARSED_UA_BROWSER_NAME = _avoid_nil(parse_res["browser"]["name"]);
      VAR_PARSED_UA_BROWSER_VERSION = _avoid_nil(parse_res["browser"]["version"]);
      VAR_PARSED_UA_BROWSER_MAJOR_VERSION = _avoid_nil(parse_res["browser"]["major"]);
      VAR_PARSED_UA_ENGINE_NAME = _avoid_nil(parse_res["engine"]["name"]);
      VAR_PARSED_UA_ENGINE_VERSION = _avoid_nil(parse_res["engine"]["version"]);
      VAR_PARSED_UA_OS_NAME = _avoid_nil(parse_res["os"]["name"]);
      VAR_PARSED_UA_OS_VERSION = _avoid_nil(parse_res["os"]["version"]);
      VAR_PARSED_UA_DEVICE_VENDOR = _avoid_nil(parse_res["device"]["vendor"]);
      VAR_PARSED_UA_DEVICE_MODEL = _avoid_nil(parse_res["device"]["model"]);
      VAR_PARSED_UA_DEVICE_TYPE = _avoid_nil(parse_res["device"]["type"]);
      VAR_PARSED_UA_CPU_ARCHITECTURE = _avoid_nil(parse_res["cpu"]["architecture"]);
      const result = {
      platform_type: VAR_PARSED_UA_PLATFORM_TYPE,
      browser_name: VAR_PARSED_UA_BROWSER_NAME,
      browser_version: VAR_PARSED_UA_BROWSER_VERSION,
      browser_major_version: VAR_PARSED_UA_BROWSER_MAJOR_VERSION,
      engine_name: VAR_PARSED_UA_ENGINE_NAME,
      engine_version: VAR_PARSED_UA_ENGINE_VERSION,
      os_name: VAR_PARSED_UA_OS_NAME,
      os_version: VAR_PARSED_UA_OS_VERSION,
      device_vendor: VAR_PARSED_UA_DEVICE_VENDOR,
      device_model: VAR_PARSED_UA_DEVICE_MODEL,
      device_type: VAR_PARSED_UA_DEVICE_TYPE,
      cpu_architecture: VAR_PARSED_UA_CPU_ARCHITECTURE
      }
      _function_return(result)
      return result
      }
      /**
      * Punycode кодировать/декодировать
      * Кодирует или декодирует строку в punycode.
      * Punycode - это метод преобразования последовательностей Unicode-символов в последовательность ASCII-символов, разрешенных в доменных именах. Подробнее о Punycode можно узнать в Wiki https://ru.wikipedia.org/wiki/Punycode.
      * Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо закодированая punycode строка, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      * Например, если указана строка "кто.рф" и активирован режим encode, то действие вернет "xn--j1ail.xn--p1ai". А если указана строка "https://xn--80aswg.xn--p1ai/index.html" и активирован режим decode, то действие вернет "https://сайт.рф/index.html".
      * Это действие работает как с доменами так и с ссылками.
      *
      * @param {string} str Строка
      В зависимости от режима, входным параметром будет либо закодированая punycode строка, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
      Примеры :
      https://сайт.рф/index.html - Любая строка. Работает в режиме encode
      https://xn--80aswg.xn--p1ai/index.html - Закодированная строка. Работает в режиме decode
      * @param {boolean} encode Шифровать или расшифровывать
      * @returns закодированная строка в случае использования режима encode и результат декодирования при использовании режима decode.
      */
      function BAS_url_punycode(str, encode) {
      const str = _function_argument('str') || str
      const encode = _function_argument('encode') || encode
      const result = encode ? _punycode.urlToASCII(str) : _punycode.urlToUnicode(str)
      _function_return(result)
      return result
      }
      /**
      * Url компонент кодировать/декодировать
      * Кодирует или декодирует строку содержащую Url компонент.
      * Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая Url компонент, которая должна быть закодирована.
      * Например, если указана строка "?x=test" и активирован режим encode, то действие вернет "%3Fx%3Dtest". А если указана строка "%D1%82%D0%B5%D1%81%D1%82" и активирован режим decode, то действие вернет "тест".
      * Получить из строки список ссылок можно с помощью действия "Извлечь все ссылки" из модуля "Строка".
      * Распарсить ссылку на элементы можно с помощью действия "Парсить URL".
      *
      * @param {string} str Строка
      В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая Url компонент, которая должна быть закодирована.
      Примеры :
      ?x=test - Любая строка. Работает в режиме encode
      %3Fx%3Dtest - Закодированная строка. Работает в режиме decode
      * @param {boolean} encode Шифровать или расшифровывать
      * @returns закодированная строка в случае использования режима encode и результат декодирования при использовании режима decode.
      */
      function BAS_url_component(str, encode) {
      const str = _function_argument('str') || str
      const encode = _function_argument('encode') || encode
      const result = encode ? _encode_url_component(str) : _decode_url_component(str)
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022user_interaction\u0022\u007d", 165478116)!
      /*Dat:eyJzIjoiY3VzdG9tIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkNvZGUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6Ii8qKlxyXG4gKiDQoNGD0YfQvdC+0LUg0YPQv9GA0LDQstC70LXQvdC40LUg0LHRgNCw0YPQt9C10YDQvtC8IChhc3luYylcclxuICog0J/QtdGA0LXQtNCw0YLRjCDQutC+0L3RgtGA0L7Qu9GMINC90LDQtCDQsdGA0LDRg9C30LXRgNC+0Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOLlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQstGA0LXQvNC10L3QvdC+INC/0LXRgNC10LTQsNGB0YIg0LrQvtC90YLRgNC+0LvRjCDQvdCw0LQg0LHRgNCw0YPQt9C10YDQvtC8INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRji4g0JrQsNC20LTQvtC1INC00LLQuNC20LXQvdC40LUg0LzRi9GI0Lgg0Lgg0YHQvtCx0YvRgtC40LUg0LrQu9Cw0LLQuNCw0YLRg9GA0Ysg0LHRg9C00YPRgiDQvtGC0L/RgNCw0LLQu9C10L3RiyDQsiDQsdGA0LDRg9C30LXRgCDQvdCw0L/RgNGP0LzRg9GOLlxyXG4gKiDQmtC+0LPQtNCwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQt9Cw0LrQvtC90YfQuNGCINGA0LDQsdC+0YLRgyDRgSDQsdGA0LDRg9C30LXRgNC+0LwsINC+0L0g0LzQvtC20LXRgiDQvdCw0LbQsNGC0Ywg0L3QsCDRgdGB0YvQu9C60YMg0LLQvdC40LfRgyDRgdGC0YDQsNC90LjRhtGLLCDRh9GC0L7QsdGLINC/0LXRgNC10LTQsNGC0Ywg0YPQv9GA0LDQstC70LXQvdC40LUg0LHRgNCw0YPQt9C10YDQvtC8INC+0LHRgNCw0YLQvdC+INCyINC/0YDQuNC70L7QttC10L3QuNC1LiAoIHNjcmVlbiApLlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QviDQtNC70Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LIg0YDQtdC20LjQvNC1INC30LDQv9GD0YHQutCwLCDQtdGB0LvQuCDQstGLINGF0L7RgtC40YLQtSDRg9C/0YDQsNCy0LvRj9GC0Ywg0LHRgNCw0YPQt9C10YDQvtC8INCyINGA0LXQttC40LzQtSDQt9Cw0L/QuNGB0LgsINC90LDQttC80LjRgtC1INGB0LvQtdC00YPRjtGJ0YPRjiDQutC90L7Qv9C60YMgKCBzY3JlZW4gKS5cclxuICog0KDQsNC30YDQsNCx0L7RgtGH0LjQuiDQvNC+0LbQtdGCINC/0YDQuNC60YDQtdC/0LjRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQv9GA0Lgg0L/RgNC10LTQvtGB0YLQsNCy0LvQtdC90LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y4g0LrQvtC90YLRgNC+0LvRjywg0YfRgtC+0LHRiyDQvtC9INC/0L7QvdGP0LssINC60LDQutC40LUg0LTQtdC50YHRgtCy0LjRjyDQtdC80YMg0L3Rg9C20L3QviDQstGL0L/QvtC70L3QuNGC0YwuINCh0L7QvtCx0YnQtdC90LjQtSDQvNC+0LbQtdGCINGB0L7QtNC10YDQttCw0YLRjCDQv9C10YDQtdC80LXQvdC90YvQtSDQuNC70Lgg0YDQtdGB0YPRgNGB0YsuXHJcbiAqINCi0LjQv9C40YfQvdGL0Lwg0LLQsNGA0LjQsNC90YLQvtC8INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINC80L7QttC10YIg0LHRi9GC0Ywg0YPQv9GA0LDQstC70LXQvdC40LUg0LHRgNCw0YPQt9C10YDQvtC8INCyINGC0LXRh9C10L3QuNC1INCx0L7Qu9GM0YjQtdC5INGH0LDRgdGC0Lgg0LLRgNC10LzQtdC90Lgg0YDQsNCx0L7RgtGLINC/0YDQuNC70L7QttC10L3QuNGPLCDQsiDRgtC+INC20LUg0LLRgNC10LzRjyDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0Y8g0YPQv9GA0LDQstC70LXQvdC40LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOINGC0L7Qu9GM0LrQviDQtNC70Y8g0L3QtdCx0L7Qu9GM0YjQvtC5INC30LDQtNCw0YfQuCwg0L3QsNC/0YDQuNC80LXRgCwg0LTQu9GPINGA0LXRiNC10L3QuNGPINGC0LjQv9CwINC60LDQv9GH0LgsINC60L7RgtC+0YDQsNGPINC40LfQvdCw0YfQsNC70YzQvdC+INC90LUg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGC0YHRjyBCQVMuXHJcbiAqINCV0YHQu9C4INCy0Ysg0YXQvtGC0LjRgtC1INC/0L7Qu9GD0YfQuNGC0Ywg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L7RgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8sINC40YHQv9C+0LvRjNC30YPQudGC0LUg0LTQtdC50YHRgtCy0LjQtSAn0JfQsNC/0YDQvtGB0LjRgtGMINCy0LLQvtC0INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjycg0LjQu9C4INGB0LjRgdGC0LXQvNGDINGA0LXRgdGD0YDRgdC+0LIuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGV4dCDQotC10LrRgdGCLCDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINC/0L7QutCw0LfQsNC9INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjlxyXG4gINCS0Ysg0LzQvtC20LXRgtC1INC/0YDQuNC60YDQtdC/0LjRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQv9GA0Lgg0L/RgNC10LTQvtGB0YLQsNCy0LvQtdC90LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y4g0LrQvtC90YLRgNC+0LvRjywg0YfRgtC+0LHRiyDQvtC9INC/0L7QvdGP0LssINC60LDQutC40LUg0LTQtdC50YHRgtCy0LjRjyDQtdC80YMg0L3Rg9C20L3QviDQstGL0L/QvtC70L3QuNGC0YwuINCh0L7QvtCx0YnQtdC90LjQtSDQvNC+0LbQtdGCINGB0L7QtNC10YDQttCw0YLRjCDQv9C10YDQtdC80LXQvdC90YvQtSDQuNC70Lgg0YDQtdGB0YPRgNGB0YsuXHJcbiAg0J/RgNC40LzQtdGA0YsgOlxyXG4gINCf0YPRgdGC0LDRjyDRgdGC0YDQvtC60LBcclxuICDQn9C+0LbQsNC70YPQudGB0YLQsCwg0YDQtdGI0LjRgtC1INC60LDQv9GH0YMgLSDQn9C+0L/RgNC+0YHQuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGA0LXRiNC40YLRjCDQutCw0L/Rh9GDXHJcbiAg0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC00LDQvdC90YvQtSDQtNC70Y8gW1tBQ0NPVU5UXV0gLSDQmNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0L/QtdGA0LXQvNC10L3QvdGD0Y4g0LLQvdGD0YLRgNC4INGB0L7QvtCx0YnQtdC90LjRj1xyXG4gKiBAcGFyYW0gY2FsbGJhY2sg0KTRg9C90LrRhtC40Y9cclxuICovXHJcbmZ1bmN0aW9uIEJBU19tYW51YWxfYnJvd3Nlcl9jb250cm9sKCkge1xyXG4gICAgY29uc3QgdGV4dCA9IF9mdW5jdGlvbl9hcmd1bWVudCgndGV4dCcpIHx8ICcnXHJcbiAgICBjb25zdCBjYWxsYmFjayA9IF9mdW5jdGlvbl9hcmd1bWVudCgnY2FsbGJhY2snKVxyXG4gICAgX21hbnVhbF9icm93c2VyX2NvbnRyb2wodGV4dCwgY2FsbGJhY2spIVxyXG59XHJcblxyXG4vKipcclxuICog0JLQvtGB0L/RgNC+0LjQt9Cy0LXRgdGC0Lgg0JfQstGD0LpcclxuICog0JLQvtGB0L/RgNC+0LjQt9Cy0LXRgdGC0Lgg0LfQstGD0LrQvtCy0L7QtSDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1LlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQvNC+0LbQtdGCINC/0YDQuNCy0LvQtdGH0Ywg0LLQvdC40LzQsNC90LjQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0Log0LLQsNC20L3Ri9C8INGB0L7QsdGL0YLQuNGP0Lwg0LLQviDQstGA0LXQvNGPINCy0YvQv9C+0LvQvdC10L3QuNGPINGB0LrRgNC40L/RgtCwLlxyXG4gKi9cclxuZnVuY3Rpb24gQkFTX3VzZXJfcGxheV9zb3VuZCgpIHtcclxuICBuYXRpdmUoXCJ1c2Vybm90aWZpY2F0aW9uXCIsIFwicGxheXNvdW5kXCIsIFwiXCIpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDQl9Cw0L/RgNC+0YHQuNGC0Ywg0LLQstC+0LQg0L7RgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cclxuICog0J/QvtC60LDQt9Cw0YLRjCDQv9C+0LvQtSDQtNC70Y8g0LLQstC+0LTQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y4sINC00L7QttC00LDRgtGM0YHRjywg0L/QvtC60LAg0L7QvSDQstCy0LXQtNC10YIg0LrQsNC60L7QtS3RgtC+INC30L3QsNGH0LXQvdC40LUg0Lgg0YHQvtGF0YDQsNC90LjRgtGMINGN0YLQviDQt9C90LDRh9C10L3QuNC1INCyINC/0LXRgNC10LzQtdC90L3QvtC5LlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDRgNCw0LHQvtGC0LDQtdGCINC60LDQuiDQutCw0L/Rh9CwLCDQvdC+INCy0LzQtdGB0YLQviDQuNC30L7QsdGA0LDQttC10L3QuNGPINC+0YLQvtCx0YDQsNC20LDQtdGC0YHRjyDRgtC10LrRgdGCLlxyXG4gKiDQrdGC0L4g0LTQtdC50YHRgtCy0LjQtSDQvdC1INC40LzQtdC10YIg0L7Qs9GA0LDQvdC40YfQtdC90LjQuSDQv9C+INCy0YDQtdC80LXQvdC4INC4INC/0YDQvtC00LvQuNGC0YHRjyDQtNC+INGC0LXRhSDQv9C+0YAsINC/0L7QutCwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvdC40YfQtdCz0L4g0L3QtSDQstCy0LXQtNC10YIuXHJcbiAqINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvNC+0LbQtdGCINCy0LLQtdGB0YLQuCDQutCw0LrQvtC5LdC70LjQsdC+INGC0LXQutGB0YIsINC70LjQsdC+INC+0YLQvNC10L3QuNGC0Ywg0LLQstC+0LQuINCSINC/0LXRgNCy0L7QvCDRgdC70YPRh9Cw0LUg0LTQtdC50YHRgtCy0LjQtSDQstC10YDQvdC10YIg0LLQstC10LTQtdC90L3QvtC1INC30L3QsNGH0LXQvdC40LUsINCy0L4g0LLRgtC+0YDQvtC8INGB0LvRg9GH0LDQtSDQv9C+0YLQvtC6INC30LDQstC10YDRiNC40YLRgdGPINGBINC+0YjQuNCx0LrQvtC5LiDQktGLINC80L7QttC10YLQtSDQuNC30LHQtdC20LDRgtGMINC30LDQstC10YDRiNC10L3QuNGPINGA0LDQsdC+0YLRiyDQv9C+0YLQvtC60LAsINC40YHQv9C+0LvRjNC30YPRjyDQtNC10LnRgdGC0LLQuNC1ICfQmNCz0L3QvtGA0LjRgNC+0LLQsNGC0Ywg0L7RiNC40LHQutC4Jy5cclxuICog0JXRgdC70Lgg0LLRiyDRhdC+0YLQuNGC0LUg0L/QvtC70YPRh9C40YLRjCDQt9C90LDRh9C10L3QuNGPINC+0YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC/0LXRgNC10LQg0LfQsNC/0YPRgdC60L7QvCDRgdC60YDQuNC/0YLQsCDQuNC70Lgg0YHQvtC30LTQsNGC0Ywg0L/RgNC+0LTQstC40L3Rg9GC0YvQuSDQv9C+0LvRjNC30L7QstCw0YLQtdC70YzRgdC60LjQuSDQuNC90YLQtdGA0YTQtdC50YEsINGC0L4g0LvRg9GH0YjQtSDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YHQuNGB0YLQtdC80YMg0YDQtdGB0YPRgNGB0L7Qsi5cclxuICogXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0INCi0LXQutGB0YIsINC60L7RgtC+0YDRi9C5INCx0YPQtNC10YIg0L/QvtC60LDQt9Cw0L0g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOXHJcbiAg0KLQtdC60YHRgiwg0LrQvtGC0L7RgNGL0Lkg0LHRg9C00LXRgiDQvtGC0L7QsdGA0LDQttCw0YLRjNGB0Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOINCy0LzQtdGB0YLQtSDRgSDQv9C+0LvQtdC8INC00LvRjyDQstCy0L7QtNCwLiDQrdGC0L7RgiDRgtC10LrRgdGCINC00L7Qu9C20LXQvSDQvtCx0YrRj9GB0L3Rj9GC0YwsINC60LDQutC+0LUg0LjQvNC10L3QvdC+INC30L3QsNGH0LXQvdC40LUg0L3Rg9C20L3QviDQstCy0LXRgdGC0LguXHJcblxyXG4gIEByZXR1cm5zINCg0LXQt9GD0LvRjNGC0LDRgiwg0LrQvtGC0L7RgNGL0Lkg0LHRi9C7INCy0LLQtdC00LXQvSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvC5cclxuICovXHJcbmZ1bmN0aW9uIEJBU191c2VyX2lucHV0KCkge1xyXG4gIGNvbnN0IGFyZ3MgPSBfYXJndW1lbnRzKClcclxuICBjb25zdCB0ZXh0ID0gYXJncy50ZXh0XHJcbiAgc29sdmVfYmFzZTY0KFwibWFudWFsXCIsXCJCQVNfVVNFUl9BU0tcIiArIFwi0KLQtdC60YHRglwiKSFcclxuICBWQVJfVVNFUl9JTlBVVCA9IF9yZXN1bHQoKVxyXG4gIF9mdW5jdGlvbl9yZXR1cm4oVkFSX1VTRVJfSU5QVVQpXHJcbiAgcmV0dXJuIFZBUl9VU0VSX0lOUFVUXHJcbn0iLCJjbGFzcyI6ImV4cHJlc3Npb24ifV19*/
      /**
      * Ручное управление браузером (async)
      * Передать контроль над браузером пользователю.
      * Это действие временно передаст контроль над браузером пользователю. Каждое движение мыши и событие клавиатуры будут отправлены в браузер напрямую.
      * Когда пользователь закончит работу с браузером, он может нажать на ссылку внизу страницы, чтобы передать управление браузером обратно в приложение. ( screen ).
      * Это действие предназначено для использования в режиме запуска, если вы хотите управлять браузером в режиме записи, нажмите следующую кнопку ( screen ).
      * Разработчик может прикрепить сообщение при предоставлении пользователю контроля, чтобы он понял, какие действия ему нужно выполнить. Сообщение может содержать переменные или ресурсы.
      * Типичным вариантом использования может быть управление браузером в течение большей части времени работы приложения, в то же время предоставляя управление пользователю только для небольшой задачи, например, для решения типа капчи, которая изначально не поддерживается BAS.
      * Если вы хотите получить информацию от пользователя, используйте действие 'Запросить ввод пользователя' или систему ресурсов.
      *
      * @param text Текст, который будет показан пользователю
      Вы можете прикрепить сообщение при предоставлении пользователю контроля, чтобы он понял, какие действия ему нужно выполнить. Сообщение может содержать переменные или ресурсы.
      Примеры :
      Пустая строка
      Пожалуйста, решите капчу - Попросить пользователя решить капчу
      Пожалуйста, введите данные для VAR_ACCOUNT - Использовать переменную внутри сообщения
      * @param callback Функция
      */
      function BAS_manual_browser_control() {
      const text = _function_argument('text') || ''
      const callback = _function_argument('callback')
      _manual_browser_control(text, callback)!
      }
      /**
      * Воспроизвести Звук
      * Воспроизвести звуковое уведомление.
      * Это действие может привлечь внимание пользователя к важным событиям во время выполнения скрипта.
      */
      function BAS_user_play_sound() {
      native("usernotification", "playsound", "")
      }
      /**
      * Запросить ввод от пользователя
      * Показать поле для ввода пользователю, дождаться, пока он введет какое-то значение и сохранить это значение в переменной.
      * Это действие работает как капча, но вместо изображения отображается текст.
      * Это действие не имеет ограничений по времени и продлится до тех пор, пока пользователь ничего не введет.
      * Пользователь может ввести какой-либо текст, либо отменить ввод. В первом случае действие вернет введенное значение, во втором случае поток завершится с ошибкой. Вы можете избежать завершения работы потока, используя действие 'Игнорировать ошибки'.
      * Если вы хотите получить значения от пользователя перед запуском скрипта или создать продвинутый пользовательский интерфейс, то лучше использовать систему ресурсов.
      *
      * @param {string} text Текст, который будет показан пользователю
      Текст, который будет отображаться пользователю вместе с полем для ввода. Этот текст должен объяснять, какое именно значение нужно ввести.
      @returns Результат, который был введен пользователем.
      */
      function BAS_user_input() {
      const args = _arguments()
      const text = args.text
      solve_base64("manual","BAS_USER_ASK" + "Текст")!
      VAR_USER_INPUT = _result()
      _function_return(VAR_USER_INPUT)
      return VAR_USER_INPUT
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022xpath\u0022\u007d", 388344745)!
      /*Dat:*/
      /**
      * Xpath получить xml
      * Выполнить xpath запрос и найти xml первого элемента, который соответствует запросу.
      * Это действие, в отличие от 'Xpath получить текст', ищет xml элемента(html-код).
      * Если элемент не будет найден, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу после ошибки, используйте действие 'Игнорировать ошибки' или уберите флажок 'Завершать работу после ошибки'.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} shutdownAfterError Завершать работу после ошибки
      * @returns xml первого элемента, который соответствует xpath запросу.
      */
      function BAS_xpath_get_first_xml(text, xpath_query, shutdownAfterError) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      const shutdownAfterError = _function_argument('shutdownAfterError') || shutdownAfterError
      html_parser_xpath_parse(text)
      if (shutdownAfterError && !html_parser_xpath_exist(xpath_query))
      fail("Can't resolve query " + xpath_query)
      const result = html_parser_xpath_xml(xpath_query)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить каждый xml
      * Выполнить xpath запрос и найти xml каждого элемента, соответствующего запросу.
      * Это действие, в отличие от 'Xpath получить каждый текст', ищет именно xml элементов (html-код).
      * Результатом этого действия является список, вы можете обработать его с помощью модуля 'Список'.
      * Если ни один элемент не будет найден, то список будет пустым.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @returns список, который состоит из xml каждого найденного элемента.
      */
      function BAS_xpath_get_xml_list(text, xpath_query) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      html_parser_xpath_parse(text)
      const result = html_parser_xpath_xml_list(xpath_query)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить текст
      * Выполнить xpath запрос и найти текст первого элемента, который соответствует запросу.
      * Результатом этого действия является текст. Например, если элемент имеет xml <div>word</div>, то его текст - 'word'.
      * Если вы хотите получить xml элемента, используйте действие 'Xpath получить xml'.
      * Если элемент не будет найден, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу после ошибки, используйте действие 'Игнорировать ошибки' или уберите флажок 'Завершать работу после ошибки'.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @param {boolean} shutdownAfterError Завершать работу после ошибки
      * @returns текст первого элемента, который соответствует xpath запросу.
      */
      function BAS_xpath_get_first_text(text, xpath_query, shutdownAfterError) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      const shutdownAfterError = _function_argument('shutdownAfterError') || shutdownAfterError
      html_parser_xpath_parse(text)
      if (shutdownAfterError && !html_parser_xpath_exist(xpath_query))
      fail("Can't resolve query " + xpath_query)
      const result = html_parser_xpath_text(xpath_query)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить каждый текст
      * Выполнить xpath запрос и найти текст всех элементов, соответствующих запросу.
      * Результатом этого действия является список, каждый элемент которого текст. Например, если элемент имеет xml <div>word</div>, то его текст - 'word'.
      * Результатом этого действия является список, поэтому вы можете обработать его с помощью модуля 'Список'.
      * Если ни один элемент не будет найден, то список будет пустым.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @returns список, который состоит из текста каждого найденного элемента.
      */
      function BAS_xpath_get_text_list(text, xpath_query) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      html_parser_xpath_parse(text)
      const result = html_parser_xpath_text_list(xpath_query)
      _function_return(result)
      return result
      }
      /**
      * Xpath получить количество элементов
      * Выполнить xpath запрос и получить число элементов, которое ему соответствует.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @returns количество элементов, соответствующих xpath запросу.
      Примеры :
      0 - Нет элементов, которые соответствуют запросу.
      3 - Есть три элемента, которые соответствуют запросу.
      */
      function BAS_xpath_get_count(text, xpath_query) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      html_parser_xpath_parse(text)
      const result = html_parser_xpath_count(xpath_query)
      _function_return(result)
      return result
      }
      /**
      * Xpath проверить существование
      * Проверить, существует ли хотя бы один элемент, соответствующий xpath запросу.
      * Html для применения xpath запроса получается из настройки 'Текст для применения xpath'.
      * Если вы хотите применить xpath запрос к последнему ответу http клиента, вам нужно использовать модуль 'HTTP-Клиент'.
      *
      * @param {string} text Текст для применения xpath
      Текст, к которому будет применяться xpath запрос. В это поле вы можете поместить любой xml или html. Есть возможность использовать поврежденный xml.
      * @param {string} xpath_query Xpath Запрос
      Запрос Xpath
      Примеры :
      //title - Получить заголовок страницы.
      //a - Получить все ссылки.
      //img - Найти изображение.
      //img/@src - Найти ссылку на изображение.
      //*[@id='ID'] - Найти элемент по id.
      //*[contains(@class,'CLASS')] - Найти элемент по классам. Элемент может иметь несколько классов, поэтому необходимо использовать функцию contains.
      //*[contains(@class,'CLASS') and @id='ID'] - Найти элемент по классам и id.
      //div[@id='ID_PARENT']/div[@id='ID_CHILD'] - Найдите элемент, содержащий родительский элемент.
      * @returns true или false в зависимости от наличия элемента, который соответствует запросу.
      Примеры :
      true - Существует по крайней мере один элемент, который соответствует запросу.
      false - Нет элементов, которые соответствуют запросу.
      */
      function BAS_xpath_exists(text, xpath_query) {
      const text = _function_argument('text') || text
      const xpath_query = _function_argument('xpath_query') || xpath_query
      html_parser_xpath_parse(text)
      const result = html_parser_xpath_exist(xpath_query)
      _function_return(result)
      return result
      }
      section_end()!

      section_start("\u007b\u0022n\u0022:\u0022html_element\u0022\u007d", 898396583)!
      /*Dat:*/
      /**
      * Переключиться на вкладку (async)
      * Переключиться на вкладку с указанным индексом.
      * @param index Номер Вкладки
      * @param callback Функция
      */
      function BAS_popupselect() {
      const index = _function_argument('index')
      const callback = _function_argument('callback')
      popupselect(index, callback)!
      }
      /**
      * Двигать Мышь И Кликнуть На Элемент (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_buttons_and_links
      * Навести курсор и кликнуть на данный элемент.
      * Конечные координаты всегда случайны, но расположены близко к центру.
      * Отключение эмуляции мыши превратит это действие в выполнение javascript функции click на элементе.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если вы нажмете на какой-либо элемент, который вызывает загрузку страницы, выберите "ждать полной загрузки страницы". Использование этой опции заставит браузер ждать загрузки страницы после клика.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      *
      * @param {string} selector Селектор элемента https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {Object} settings =>
      *  @param {boolean} disableMouseEmulation = false Отключить эмуляцию мыши.
      *  @param {boolean} isCtrlClick = false Зажать клавишу ctrl. Открыть ссылку в новой вкладке.
      *  @param {string} typeClick = '<MOUSELEFT>' '<MOUSELEFT>' | '<MOUSERIGHT>' | '<MOUSEDOUBLE>' Тип клика
      *  @param {Object} mouse =>
      *    @param {number} speed = 100 Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity = 6 Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation = 2.5 Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден.
      @param {boolean} wait_full_load = false Ждать полной загрузки страницы после этого действия
      @param {number} timeout Максимальное время выполнения задания (мс)
      *
      */
      function BAS_mouse_move_and_click_element() {
      const args = _arguments()
      const selector = args.selector || ""
      const disableMouseEmulation = args.disableMouseEmulation || false
      const isCtrlClick = args.isCtrlClick || false
      const typeClick = args.typeClick || '<MOUSELEFT>'
      const mouseSettings = args.mouse
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const wait_full_load = args.wait_full_load || false
      const timeout = args.timeout
      _SELECTOR = selector
      if (noWait)
      waiter_timeout_next(1000)
      if (!stopThread)
      waiter_nofail_next()
      wait_element_visible(_SELECTOR)!
      if (disableMouseEmulation) {
      get_element_selector(_SELECTOR, false).script("self.click()")!
      } else {
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      move( mouseSettingsObj )!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      }
      _call(_clarify, mouseSettingsObj )!
      if (typeClick === '<MOUSELEFT>' && !isCtrlClick) {
      mouse(X,Y)!
      } else {
      const typeStr = (isCtrlClick ? '<CONTROL>' : '') + ((isCtrlClick && typeClick === '<MOUSEDOUBLE>') ? '<CONTROL><MOUSELEFT>' : typeClick)
      _type(typeStr, 100)!
      }
      })!
      }
      if (wait_full_load) {
      if (timeout) waiter_timeout_next(timeout)
      wait_async_load()!
      }
      }
      /**
      * Кликнуть На Элемент (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_buttons_and_links
      * Кликнуть на заданный элемент.
      * Конечные координаты всегда случайны, но расположены близко к центру.
      * Отключение эмуляции мыши превратит это действие в выполнение javascript функции click на элементе.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Если вы нажмете на какой-либо элемент, который вызывает загрузку страницы, выберите "ждать полной загрузки страницы". Использование этой опции заставит браузер ждать загрузки страницы после клика.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {boolean} disableMouseEmulation = false Отключить эмуляцию мыши.
      * @param {boolean} noWait = false Не ждать появления элемента.
      * @param {boolean} stopThread = true Остановить поток, если элемент не найден.
      * @param {boolean} wait_full_load = false Ждать полной загрузки страницы после этого действия
      * @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_click_element() {
      const args = _arguments()
      const selector = args.selector || ''
      const disableMouseEmulation = args.disableMouseEmulation || false
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const wait_full_load = args.wait_full_load || false
      const timeout = args.timeout
      _SELECTOR = selector
      if (noWait) {
      waiter_timeout_next(1000)
      }
      if (!stopThread) {
      waiter_nofail_next()
      }
      wait_element_visible(_SELECTOR)!
      if (disableMouseEmulation) {
      get_element_selector(_SELECTOR, false).script("self.click()")!
      } else {
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      X = parseInt(_result().split(",")[0])
      Y = parseInt(_result().split(",")[1])
      mouse(X,Y)!
      })!
      }
      if (wait_full_load) {
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_async_load()!
      }
      }
      /**
      * Двигать Мышь Над Элементом (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_buttons_and_links
      * Навести курсор на элемент.
      * Конечные координаты всегда случайны, но расположены близко к центру.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {boolean} noWait Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден.
      * @param {Object} mouse =>
      *  @param {number} speed Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_mouse_move_over_element() {
      const args = _arguments()
      const selector = args.selector || ""
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const timeout = args.timeout
      _SELECTOR = selector
      if (noWait || timeout) {
      waiter_timeout_next(noWait ? 1000 : timeout)
      }
      if (!stopThread) {
      waiter_nofail_next()
      }
      wait_element_visible(_SELECTOR)!
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      move( mouseSettingsObj )!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      }
      _call(_clarify, mouseSettingsObj )!
      })!
      }
      /**
      * Двигать Мышь И Кликнуть (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_x_y_coordinates
      * Переместить мышь и кликнуть по заданным координатам.
      * Если вы хотите кликнуть по элементу, выберите его в браузере и нажмите на "Двигать Мышь И Кликнуть На Элемент".
      * Это действие работает с абсолютными координатами.
      * Если координаты не видны, страница будет прокручена так, чтобы они стали видимы.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если вы нажмете на какой-либо элемент, который вызывает загрузку страницы, выберите "ждать полной загрузки страницы". Использование этой опции заставит браузер ждать загрузки страницы после клика.
      *
      * @param {number} x Х координата
      Целое число, смещение от левого края страницы
      @param {number} y Y координата
      Целое число, смещение от верхнего края страницы
      @param {boolean} isCtrlClick = false Зажать клавишу ctrl. Открыть ссылку в новой вкладке.
      @param {'<MOUSELEFT>' | '<MOUSERIGHT>' | '<MOUSEDOUBLE>'} Тип клика
      @param {Object} mouse =>
      @param {number} speed = 100 Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity = 6 Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation = 2.5 Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      @param {boolean} wait_full_load Ждать полной загрузки страницы после этого действия
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_mouse_move_and_click() {
      const args = _arguments()
      const x = args.x
      const y = args.y
      const isCtrlClick = args.isCtrlClick || false
      const typeClick = args.typeClick || '<MOUSELEFT>'
      const mouseSettings = args.mouse
      const wait_full_load = args.wait_full_load || false
      const timeout = args.timeout
      if (mouseSettings) {
      move(x, y, {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      })!
      } else {
      move(x, y)!
      }
      if (!isCtrlClick && typeClick === '<MOUSELEFT>') {
      mouse(x, y)!
      } else {
      const key = isCtrlClick ? '<CONTROL><MOUSELEFT>' : typeClick
      _type(key, 100)!
      }
      if (wait_full_load) {
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_async_load()!
      }
      }
      /**
      * Кликнуть (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_x_y_coordinates
      * Кликнуть по заданным координатам.
      * Если вы хотите кликнуть по элементу, выберите его в браузере и нажмите на "Кликнуть На Элемент".
      * Это действие работает с абсолютными координатами.
      * Если координаты не видны, страница будет прокручена так, чтобы они стали видимы.
      * Если вы нажмете на какой-либо элемент, который вызывает загрузку страницы, выберите "ждать полной загрузки страницы". Использование этой опции заставит браузер ждать загрузки страницы после клика.
      * @param {number} x Х координата
      Целое число, смещение от левого края страницы
      @param {number} y У координата
      Целое число, смещение от верхнего края страницы
      @param {boolean} wait_full_load = false Ждать полной загрузки страницы после этого действия
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_click() {
      const args = _arguments()
      const x = args.x
      const y = args.y
      const wait_full_load = args.wait_full_load || false
      const timeout = args.timeout
      mouse(x, y)!
      if (wait_full_load) {
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_async_load()!
      }
      }
      /**
      * Двигать Мышь (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_move_mouse
      * Двигать курсор к заданным координатам.
      * Если вы хотите двигать мышь к элементу, выберите его в браузере и нажмите на "Двигать Мышь Над Элементом".
      * Это действие работает с абсолютными координатами.
      * Если координаты не видны, страница будет прокручена так, чтобы они стали видимы.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * @param {number} x Х координата
      Целое число, смещение от левого края страницы
      @param {number} y У координата
      Целое число, смещение от верхнего края страницы
      @param {Object} mouse =>
      @param {number} speed = 100 Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity = 6 Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation = 2.5 Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      */
      function BAS_mouse_move() {
      const args = _arguments()
      const x = args.x
      const y = args.y
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      move(x, y, mouseSettingsObj)!
      }
      /**
      * Ввод текста (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_type_text
      * Ввод текста в заданный элемент.
      * Это действие может вводить любые символы включая специальные клавиши, такие как enter, backspace, insert, delete и т. д.
      * Если вы хотите ввести большой текст, используйте 0 интервал или действие "Запись В Буфер Обмена" и ввод <CONTROL>V
      * Отключение эмуляции мыши и клавиатуры превратит это действие в выполнение javascript кода self.value = "value" на элементе.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Перед вводом текста будет передвинут курсор мыши в место близкое к центру элемента.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector = '' Селектор элемента https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {string} text Текст для ввода
      Это может быть любая последовательность символов.
      Примеры :
      hello world! - Ввести hello world!
      <CONTROL>V - Вставить значение из буфера обмена
      <CONTROL>A<DELETE> - Очистить поле
      <ESCAPE> - Нажать escape
      @param {number} interval = 100 Интервал в миллисекундах
      Интервал между каждым нажатием в миллисекундах. BAS использует разные интервалы для каждой кнопки, близкие к этому параметру. Например, если вы установите интервал в 100, это может дать такую последовательность: кнопка №1, ждать 91 миллисекунду, кнопка №2, ждать 117 миллисекунд, кнопка №3 и т. д.
      Примеры :
      100 - Стандартное значение. Похоже на ввод реальным человеком.
      0 - Текст вводится мгновенно.
      @param {boolean} disableEmulation = false Отключить эмуляцию мыши и клавиатуры.
      @param {Object} mouse =>
      @param {number} speed = 100 Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity = 6 Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation = 2.5 Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      @param {boolean} noWait = false Не ждать появления элемента.
      @param {boolean} stopThread = true Остановить поток, если элемент не найден.
      @param {boolean} wait_full_load = false Ждать полной загрузки страницы после этого действия
      @param {number} timeout Максимальное время выполнения задания (мс).
      */
      function BAS_input_text() {
      const args = _arguments()
      const selector = args.selector || ''
      const text = args.text
      const interval = args.interval || 100
      const disableEmulation = args.disableEmulation || false
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const wait_full_load = args.wait_full_load || false
      const timeout = args.timeout
      _SELECTOR = selector
      if (noWait)
      waiter_timeout_next(1000)
      if (!stopThread)
      waiter_nofail_next()
      wait_element_visible(_SELECTOR)!
      if (disableEmulation) {
      get_element_selector(_SELECTOR, false).script("self.click()")!
      } else {
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      move( mouseSettingsObj )!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      }
      _call(_clarify, mouseSettingsObj )!
      mouse(X, Y)!
      if (timeout) {
      general_timeout_next(timeout)
      }
      _type(text, interval)!
      })!
      }
      if (wait_full_load) {
      if (timeout) waiter_timeout_next(timeout)
      wait_async_load()!
      }
      }
      /**
      * Очистить Поле (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_click_on_buttons_and_links
      * Очистить поле. Работает только на текстовых полях.
      * Это действие эквивалентно вводу <CONTROL>A<BACK>.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector = '' Селектор элемента.
      * @param {Object} mouse =>
      *  @param {number} speed = 100 Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity = 6 Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation = 2.5 Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      @param {boolean} noWait = false Не ждать появления элемента.
      @param {boolean} stopThread = true Остановить поток, если элемент не найден.
      @param {boolean} wait_full_load = false Ждать полной загрузки страницы после этого действия
      @param {number} timeout Максимальное время выполнения задания (мс).
      */
      function BAS_clear_field() {
      const args = _arguments()
      _call_function(BAS_input_text, {
      selector: args.selector,
      text: '<CONTROL>a<BACK>',
      interval: 30,
      mouse: args.mouse,
      noWait: args.noWait,
      stopThread: args.stopThread,
      wait_full_load: args.wait_full_load,
      timeout: args.timeout
      })!
      }
      /**
      * Получить Код Элемента (BAS-функция)
      * Получить html код элемента и сохранить его в перменную.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      * @return string
      html код выбранного элемента в виде строки
      */
      function BAS_get_xml() {
      const args = _arguments()
      const selector = args.selector || ''
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).xml()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().xml()!
      }
      const result = _result()
      _function_return(result)
      return result
      }
      /**
      * Добавить вкладку (BAS-функция)
      * Добавить новую вкладку с указанным Url.
      * @param {string} url Url
      Url для загрузки. Протокол может быть опущен.
      Примеры :
      google.com - Загрузить google.com
      instagram.com - Загрузить instagram.com
      @param {boolean} is_silent Отложенная загрузка
      В режиме отложенной загрузки вкладка будет добавлена сразу же, а заданный url загружен только после первого переключения на эту вкладку.
      Примеры :
      true - Создать новую вкладку, загрузить указанный url только после того, как она станет активной.
      false - Создать новую вкладку, переключиться на нее и сразу же загрузить указанный url.
      @param {string} referrer = "" Referrer. Может быть пустым.
      Referrer, используемый для загрузки данной страницы.
      Примеры :
      https://google.com - Страница загружается при нажатии на результат поиска Google.
      Пустая строка - Страница загружается путем ввода url в адресной строке.
      @param {boolean} is_instant false Не ждать полной загрузки страницы после этого действия
      @param {nubmer} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_add_tab() {
      const args = _arguments()
      const referrer = args.referrer || ''
      if (args.timeout) {
      general_timeout_next(args.timeout)
      }
      _popupcreate2(args.is_silent, args.url, referrer, args.is_instant, args.callback)!
      }
      /**
      * Получить информацию о вкладках (BAS-функция)
      * Получить список вкладок и индекс текущей вкладки, сохранить информацию в переменных.
      * Переменная VAR_URL_LIST будет содержать список url. Каждый url соответствует одной вкладке. Используйте модуль "Список" для его обработки. Например, с помощью действия "Первый элемент" можно получить url первой вкладки, а с помощью действия "Получить элемент" можно получить url вкладки с заданным индексом.
      * Переменная VAR_TAB_INDEX будет содержать индекс активной вкладки. Индексация начинается с 0, поэтому первая вкладка будет иметь индекс 0, вторая - индекс 1 и т. д.
      * @returns Object => {
      *  @param {Array<string>} url_list Список url
      Список url. Каждый url соответствует одной вкладке.
      @param {number} current_tab_index Индекс текущей вкладки
      Индекс текущей вкладки. Индексация начинается с 0.
      @param {number} total_tabs Количество вкладок
      Общее количество вкладок.
      * }
      */
      function BAS_popupinfo() {
      _popupinfo()!
      var json = JSON.parse(_result())
      VAR_TAB_INDEX = json["index"]
      VAR_URL_LIST = json["urls"]
      VAR_TOTAL_TABS = json["urls"].length
      const result = {
      url_list: VAR_URL_LIST,
      current_tab_index: VAR_TAB_INDEX,
      total_tabs: VAR_TOTAL_TABS
      }
      _function_return(result)
      return result
      }
      /**
      * Проверить Существование (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_check_if_page_element_exists
      * Проверяет существует ли элемент на странице.
      * Это действие завершается мгновенно.
      * Оно записывает результат в переменную, который может быть true или false, используйте if чтобы обработать его.
      * Если галка "Проверять, виден ли элемент на экране" установлена, действие возвращает true только если элемент существует и он видимый.
      * @param {string} selector Селектор элемента
      * @param {boolean} checkVisibility Проверять, виден ли элемент на экране
      * @returns Результат проверки с типом boolean. Может иметь значение true или false. Используйте действие "if" чтобы обработать результат.
      Примеры :
      true - Элемент найден
      false - Элемент не найден
      */
      function BAS_element_is_exists() {
      const args = _arguments()
      const selector = args.selector || ''
      const checkVisibility = args.checkVisibility || false
      _SELECTOR = selector
      get_element_selector(_SELECTOR, false).nowait().exist()!
      VAR_IS_EXISTS = _result() == 1
      if (checkVisibility) {
      _if(VAR_IS_EXISTS, function(){
      get_element_selector(_SELECTOR, false).nowait().script("document.readyState!='loading' && Math.round(self.getBoundingClientRect().height) > 0 && Math.round(self.getBoundingClientRect().width) > 0&& window.getComputedStyle(self)['display']!='none'&&window.getComputedStyle(self)['visibility'] != 'hidden'")!
      VAR_IS_EXISTS = _result().indexOf("true")>=0
      })!
      }
      _function_return(VAR_IS_EXISTS)
      return VAR_IS_EXISTS
      }
      /**
      * Получить Текст (BAS-функция)
      * Получить текст элемента видимого на экране.
      * Например, если вы примените это действие ко всей странице, то получите весь видимый на странице текст.
      * Это действие может быть применено к полю для ввода чтобы получить введенное значения.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      * @return текст выбранного элемента
      */
      function BAS_element_get_text() {
      const args = _arguments()
      const selector = args.selector || ''
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).text()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().text()!
      }
      const result = _result()
      _function_return(result)
      return result
      }
      /**
      * Скриншот (BAS-функция)
      * Это действие делает скриншот выбранного элемента и сохраняет его в изображении в формате png, закодированном как строка base64.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      * @return данные изображения в кодировке base64, вы можете использовать ее как captcha или сохранить в файл.
      */
      function BAS_element_screenshot() {
      const args = _arguments()
      const selector = args.selector || ''
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(5000)
      }
      wait_element(_SELECTOR)!
      const cond = !(!noWait && stopThread)
      if (cond) {
      get_element_selector(_SELECTOR, false).exist()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().exist()!
      }
      _if(_result() == "1", function(){
      if (cond) {
      get_element_selector(_SELECTOR, false).render_base64()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().render_base64()!
      }
      VAR_SCREENSHOT_BASE64 = _result()
      _function_return(VAR_SCREENSHOT_BASE64)
      })!
      return VAR_SCREENSHOT_BASE64
      }
      /**
      * Решить Капчу (BAS-функция)
      * Это действие решает капчу с изображением(а не recaptcha). Изображение капчи получается в результате рендеринга элемента.
      * Текст капчи сохраняется в переменной и может быть использован позже.
      * Если вы хотите взять изображение из кеша, из файла или из любой строки base64, вы должны использовать действие "Решить Капчу" из модуля "Браузер".
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Если вы хотите решить recaptcha, нажмите на флажок recaptcha внутри браузера и выберите "Решить Recaptcha 2.0".
      После рендеринга изображение может содержать дополнительную границу или немного изменить цвет некоторых пикселей из-за неточностей рендеринга, и, таким образом, этот метод хорош только в том случае, если капча будет решаться человеком. В случае автоматического машинного решения важно, чтобы изображение было точно таким же, как и сгенерированное на сервере, поэтому, если вы используете capmonster, captchasniper или xevil, это действие будет искать изображение в кеше. Взятие данных из кеша не производится автоматическим при первом запуске вы получите ошибку, которая дает url капчи и имя действия, которое вам нужно использовать - "Разрешить кэш". Важно разделять постоянную часть и переменную часть url. Вы должны заменить меняющуюся часть на *, а постоянную часть оставить как есть. Например, если url капчи /image?id=1234, то маска может быть /image?id=*. Разумеется, вы можете добавить абсолютно все данне в кеш с помощью маски *, но это увеличит потребление памяти и может вызвать другие ошибки. Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector = '' Селектор элемента
      * @param {string} method Метод решения. Метод решения - это строка, вы можете установить значение напрямую или использовать переменную или ресурс. Примеры:
      * manual - Капча решается вручную человеком, который использует БАС.
      * antigate - Решить с помощью сервиса http://anti-captcha.com/
      * rucaptcha - Решить с помощью сервиса http://rucaptcha.com/
      * 2captcha - Решить с помощью сервиса http://2captcha.com/
      * capmonster - Решить с помощью capmonster
      * dbc - Решить с помощью сервиса http://deathbycaptcha.com/
      * @param {string} key Ключ Антигейт/Рукапча/2капча/dbc. Может быть пустым. Этот ключ необходим только в том случае, если вы спользуете сервисы для решения капчи. Он не нужен в режимах manual, capmonster и captchasniper. В случае deathbycaptcha это поле должно содержать dbc_login:dbc_password.
      * @param {string} serverUrl Url сервера. Может быть пустым. Примеры:
      * http://127.0.0.3:8083/
      * Пустая строка - Использовать url по умолчанию, например, http://rucaptcha.com для rucaptcha.
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      * @return Строка с результатом решения капчи
      */
      function BAS_element_solve_captcha() {
      const args = _arguments()
      const selector = args.selector || ''
      const method = args.method || 'manual'
      const key = args.key
      const serverUrl = args.serverUrl
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      solver_properties_clear(method)
      BAS_SolveRecaptcha_Serverurl = serverUrl
      if(BAS_SolveRecaptcha_Serverurl.length > 0 && BAS_SolveRecaptcha_Serverurl.substr(BAS_SolveRecaptcha_Serverurl.length - 1) != "/")
      BAS_SolveRecaptcha_Serverurl += "/"
      if(method === "rucaptcha")
      {
      if(BAS_SolveRecaptcha_Serverurl)
      solver_property("rucaptcha","serverurl",BAS_SolveRecaptcha_Serverurl)
      rucaptcha(key)
      }
      if(method === "antigate")
      {
      if(BAS_SolveRecaptcha_Serverurl)
      solver_property("antigate","serverurl",BAS_SolveRecaptcha_Serverurl)
      antigate(key)
      }
      if(method == "dbc")
      {
      if(BAS_SolveRecaptcha_Serverurl)
      solver_property("dbc","serverurl",BAS_SolveRecaptcha_Serverurl)
      dbc(key)
      }
      if(method == "2captcha")
      {
      if(BAS_SolveRecaptcha_Serverurl)
      solver_property("2captcha","serverurl",BAS_SolveRecaptcha_Serverurl)
      twocaptcha(key)
      }
      if(method == "capmonster" || method == "capmonsterimage" || method == "capmonsteraudio")
      {
      solver_property("capmonster","serverurl",BAS_SolveRecaptcha_Serverurl)
      capmonster(key)
      }
      if(method == "xevil")
      {
      solver_property("xevil","serverurl",((BAS_SolveRecaptcha_Serverurl).length == 0) ? "http://rucaptcha.com/" : (BAS_SolveRecaptcha_Serverurl))
      xevil(key)
      }
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      get_element_selector(_SELECTOR, false).nowait().exist()!
      _if(_result() == "1", function(){
      const cond = !(!noWait && stopThread)
      _if_else("antigate" == "xevil" || "antigate" == "capmonster" || "antigate" == "capmonsterimage" || "antigate" == "capmonsteraudio" || "antigate" == "captchasniper", function(){
      get_element_selector(_SELECTOR, false).nowait().attr("src")!
      VAR_CAPTCHA_RESULT = _result()
      _if(VAR_CAPTCHA_RESULT.length == 0, function(){
      if (cond) {
      get_element_selector(_SELECTOR, false).css("img").attr("src")!
      } else {
      get_element_selector(_SELECTOR, false).nowait().css("img").attr("src")!
      }
      VAR_CAPTCHA_RESULT = _result()
      })!
      if(VAR_CAPTCHA_RESULT.length == 0) {
      fail(tr("Image tag not found. Is this element captcha?"))
      }
      wait_load(VAR_CAPTCHA_RESULT)!
      cache_get_base64(VAR_CAPTCHA_RESULT)!
      if(_result().length == 0) {
      fail(tr("Url ") + VAR_CAPTCHA_RESULT + tr(" is not present in cache. Please enable cache before page load with Cache Mask Allow action"))
      }
      _if_else("antigate" == "captchasniper", function(){
      _switch_http_client_internal()
      http_client_post(BAS_SolveRecaptcha_Serverurl, ["file","base64://" + _result()], {"content-type":("multipart"), "encoding":("UTF-8"), "method":("POST")})!
      {var split = http_client_content().split("|");VAR_CAPTCHA_RESULT = split[split.length-1]}
      _switch_http_client_main()
      }, function(){
      if (timeout) {
      solver_timeout_next(timeout)
      }
      solve_base64(("antigate" == "xevil") ? "xevil" : "capmonster", _result())!
      VAR_CAPTCHA_RESULT = _result()
      _function_return(VAR_CAPTCHA_RESULT)
      })!
      },function(){
      if (cond) {
      get_element_selector(_SELECTOR, false).render_base64()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().render_base64()!
      }
      if (timeout) {
      solver_timeout_next(timeout)
      }
      solve_base64("antigate", _result())!
      VAR_CAPTCHA_RESULT = _result()
      _function_return(VAR_CAPTCHA_RESULT)
      })!
      })!
      return VAR_CAPTCHA_RESULT
      }
      /**
      * Решить капчу кликами (BAS-функция)
      * Решить любой тип капчи, который требует кликать по изображениям.
      * Для решения ReCaptcha и HCaptcha рекомендуется использовать действия Решить Recaptcha 2.0 и Решить HCaptcha из контекстного меню браузера, если это возможно. С ними проще работать, и капча может решиться быстрее. Также эти действия позволяют выполнять автоматическую валидацию решения. Используйте это действие, если другие варианты не подходят вам по каким-либо причинам.
      * Это действие позволяет вам решить любую капчу, которая требует, чтобы вы нажимали на изображения в соответствии с определенными инструкциями. Это может быть ReCaptcha, HCaptcha и другие типы. Для решения таких капч необходимо отправить на сервис изображение, содержащее элементы, по которым нужно выполнить клики. Если на капче или рядом с ней присутствует описание, рекомендуется отправлять его вместе с изображением, чтобы избежать неверных решений.
      * Для всех сервисов требуется сервисный ключ, который должен быть получен на сайте сервиса и введён в поле Ключ сервиса.
      * Данное действие, в отличие от действия Решить капчу кликами из модуля Браузер, выполняет клики автоматически, и вам не нужно вручную расчитывать координаты для кликов относительно положения элемента на странице. Рекомендуется использовать именно это действие.
      * Важный момент - данное действие не выполняет автоматического подтверждения решения капчи. Вы должны сделать это сами. Например, если вы решаете ReCaptcha2 используя данный метод, то вам нужно самостоятельно выполнить клик по чекбоксу, а после выполнения кликов по координатам - нажать на кнопку Далее или Готово.
      * Параметр Интервал проверки решения задачи отвечает за частоту отправки запросов на сервис для проверки решения капчи. Чем больше вы выставите значение, тем дольше BAS будет ожидать перед тем, как отправить очередной запрос. Рекомендуется использовать задержку не менее 5 секунд.
      * Параметр Задержка проверки решения задачи отвечает за длительность ожидания перед тем, как BAS начнет проверку капчи. Сначала капча отправляется на сервис, после этого BAS будет ожидать указанное время, по прошествии которого начнется непосредственно проверка состояния задачи. Большинство сервисов рекомендуют подождать не менее 5 секунд.
      * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, вы можете указать необходимый URL сервера в поле URL сервиса, находящееся в дополнительных настройках.
      * Если вы используете такие программы, как CapMonster, XEvil или аналоги, вы должны заполнить поле URL сервиса в соответствии с документацией к данному ПО.
      * Подробную документацию по решению подобных капч можно посмотреть здесь https://rucaptcha.com/api-rucaptcha#solving_clickcaptcha.
      * @param {string} textInstructions Описание капчи. Может быть пустым.
      Если у captcha есть какое-либо описание, его можно добавить в это поле.
      Примеры :
      Выберите все изображения, на которых есть самолёт
      Выберите все изображения, на которых есть лодка
      @param {number} taskWaitTimeout Интервал проверки решения задачи
      Интервал проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между каждой новой проверкой решения капчи.
      Примеры :
      600 - Ждать в течение 600 миллисекунд
      10000 - Ждать в течение 10 секунд
      5000 - Ждать в течение 5 секунд
      @param {number} taskWaitDelay Задержка проверки решения задачи
      Задержка проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между отправкой капчи на сервис и началом ожидания решения. Чаще всего, сервисы решения капчи указывают необходимое время ожидания, в остальных случаях вы можете указать любое удобное для вас значение.
      Примеры :
      600 - Ждать в течение 600 миллисекунд
      10000 - Ждать в течение 10 секунд
      5000 - Ждать в течение 5 секунд
      @param {boolean} emulateMouse Имитировать движения мыши
      @param {string} serviceName Название сервиса
      Название сервиса для решения капчи
      Примеры :
      rucaptcha - Решить капчу используя сервис https://rucaptcha.com/
      2captcha - Решить капчу используя сервис https://2captcha.com/
      @param {string} serviceUrl URL сервиса
      URL сервиса. Может быть пустым. Вы можете использовать этот параметр, если нужного вам сервиса нет в списке доступных. В таком случае укажите название сервиса, который работает по аналогичному API, и используйте нужный вам адрес.
      Примеры :
      Пустая строка - Использовать стандартный URL сервиса, http://rucaptcha.com для RuCaptcha и так далее
      http://127.0.0.1:8083 - Использовать кастомный URL сервиса с портом 8083
      http://127.0.0.3:8080 - Использовать кастомный URL сервиса с портом 8080
      @param {string} serviceKey Ключ сервиса
      Ключ от сервиса решения капчи. Вы можете получить его в личном кабинете выбранного сервиса решения капчи
      @param {string} selector Селектор элемента
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread Остановить поток, елси элемент не найден
      */
      function BAS_element_solve_captcha_clicks() {
      const args = _arguments()
      const textInstructions = args.textInstructions || ''
      const taskWaitTimeout = args.taskWaitTimeout || 5000
      const taskWaitDelay = args.taskWaitDelay || 5000
      const emulateMouse = args.emulateMouse || true
      const serviceName = args.serviceName || 'rucaptcha'
      const serviceUrl = args.serviceUrl
      const serviceKey = args.serviceKey
      const query = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      _call_function(BASCaptchaSolver.solveCoordinatesCaptcha, {
      textInstructions: textInstructions,
      taskWaitTimeout: taskWaitTimeout,
      taskWaitDelay: taskWaitDelay,
      emulateMouse: emulateMouse,
      serviceName: serviceName,
      serviceUrl: serviceUrl,
      serviceKey: serviceKey,
      query: query,
      waiter: function() {
      _SELECTOR = query
      if (noWait) {
      waiter_timeout_next(1000)
      }
      if (!stopThread) {
      waiter_nofail_next()
      }
      wait_element(_SELECTOR)!
      },
      path: function() {
      if (!(!noWait && stopThread)) {
      return get_element_selector(_SELECTOR, false).nowait()
      } else {
      return get_element_selector(_SELECTOR, false)
      }
      }
      })!
      }
      /**
      * Ждать Появления Элемента (BAS-функция)
      * Ждать, пока соответствующий элемент появится на странице.
      * Если галка "Проверять, виден ли элемент на экране" установлена, действие завершается только если элемент существует и он видимый.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} checkVisibility Проверять, виден ли элемент на экране
      * @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_wait_element() {
      const args = _arguments()
      const selector = args.selector
      const checkVisibility = args.checkVisibility || false
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      if (checkVisibility) {
      wait_element_visible(_SELECTOR)!
      } else {
      wait_element(_SELECTOR)!
      }
      }
      /**
      * Прокрутка К Элементу (BAS-функция)
      * Это действие гарантирует, что определенный элемент будет виден на экране.
      * Если элемент уже виден, то это действие ничего не сделает, иначе оно будет прокручивать окно таким образом, чтобы элемент располагался как можно ближе к центру.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_element_focus() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).focus()!
      } else {
      get_element_selector(_SELECTOR, false).nowait().focus()!
      }
      }
      /**
      * Получить координаты (BAS-функция)
      * Получить координаты элемента относительно текущей позиции окна.
      * Например, если координаты элемента 200,200, а положение окна - 50,50, то это действие вернет 150,150. Если позиция окна равна 0,0, то это действие вернет абсолютные координаты элемента.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания (мс)
      * @returns Object => {
      *  @param {number} x X
      Целое значение, смещение относительно текущей позиции окна.
      @param {number} y Y
      Целое значение, смещение относительно текущей позиции окна.
      @param {number} width Ширина
      Целое значение, ширина элемента.
      @param {number} height Высота
      Целое значение, высота элемента.
      * }
      */
      function BAS_element_get_coordinates() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      const script = "(function(){var rect = self.getBoundingClientRect();return (rect.left + positionx).toString() + '|' + (rect.top + positiony).toString() + '|' + (rect.right - rect.left).toString() + '|' + (rect.bottom - rect.top).toString()})();"
      if (!(!nowait && stopThread)) {
      get_element_selector(_SELECTOR, false).script(script)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().script(script)!
      }
      if(_result().length > 0)
      {
      const split = _result().split("|")
      VAR_X = parseInt(split[0])
      VAR_Y = parseInt(split[1])
      VAR_WIDTH = parseInt(split[2])
      VAR_HEIGHT = parseInt(split[3])
      const result = {
      x: VAR_X,
      y: VAR_Y,
      width: VAR_WIDTH,
      height: VAR_HEIGHT
      }
      _function_return(result)
      return result
      }
      }
      /**
      * Получить Количество Элементов (BAS-функция)
      * Получить количество элементов соответствующее запросу.
      * Чтобы сгенерировать запрос, нажмите на элемент внутри браузера и выберите действие "Получить Количество Элементов". BAS автоматически составит запрос, в который будут включены все элементы похожие на выбранный вами элемент. Этот запрос не всегда будет содержать необходимые элементы, поэтому вы можете настроить его следующим образом. Добавьте элемент, который необходимо включить в запрос, выбрав его и нажав левую кнопку
      * Это задаст зеленый фон для элемента, и он всегда будет включен в выделение. В качестве альтернативы нажмите на элемент, который был включен в выделение (элемент с синим фоном). Это задаст красный фон для элемента, и он всегда будет исключен из выделения. Постоянно уточняя, какие элементы будут в запросе, а какие нет, вы можете постепенно достичь приемлемого результата.
      * Это действие всегда возвращается мгновенно и не ждет, если элемент не существует.
      * В случае отсутствия элемента оно возвращает ноль.
      * Вы можете перебирать все элементы, которые соответствуют определенному селектору, возьмем для примера селектор по классу "c". Для этого вы должны получить количество элементов с помощью этого действия, потом начать цикл for от 0 до количества элементов - 1. И, наконец, получить элемент с помощью селектора >CSS> .c >AT> VAR_CYCLE_INDEX внутри цикла.
      * Режим мультипарсинга включен. Нажмите на элементы внутри браузера, чтобы добавить элементы, которые обязательно должны быть включены или исключены из выделения.
      * Как это работает? https://www.youtube.com/watch?v=PQSQmJRVKvk&feature=youtu.be
      * @param {stirng} selector Селектор элемента
      * @returns количество элементов, соответствующих селектору.
      */
      function BAS_elements_count() {
      const args = _arguments()
      const selector = args.selector
      ;_SELECTOR = selector
      get_element_selector(_SELECTOR, true).length()!
      VAR_ELEMENT_LENGTH = _result()
      _function_return(VAR_ELEMENT_LENGTH)
      return VAR_ELEMENT_LENGTH
      }
      /**
      * Получить Стиль Элемента (BAS-функция)
      * Получить css стиль элемента.
      * Используйте "display", чтобы проверить, виден ли элемент, "width" чтобы получить ширину элемента и т. д.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {string} style Стиль
      Css стиль для получения. Это действие вызывает javascript код window.getComputedStyle(self).
      Примеры :
      display - Проверить видимость
      width - Получить ширину
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      @returns Значение стиля в виде строки.
      */
      function BAS_get_element_style() {
      const args = _arguments()
      const selector = args.selector
      const style = args.style
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      const script = 'window.getComputedStyle(self)[' + JSON.stringify("color") + ']'
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).script(script)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().script(script)!
      }
      VAR_SAVED_STYLE = _result()
      _function_return(VAR_SAVED_STYLE)
      return VAR_SAVED_STYLE
      }
      /**
      * Начать Перетаскивание На Элементе (BAS-функция)
      * Начать перетягивание из выбранного элемента.
      * Конечные координаты всегда случайны, но расположены близко к центру.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * После вызова этого действия, нужно также использовать "Закончить Перетаскивание" или "Закончить Перетаскивание На Элементе".
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread = true Остановить поток, если элемент не найден
      * @param {Object} mouse Object => {
      *  @param {number} speed Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      * }
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_element_drag_start() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element_visible(_SELECTOR)!
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      move( mouseSettingsObj )!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      }
      _call(_clarify, mouseSettingsObj )!
      mouse_down(X,Y)!
      })!
      }
      /**
      * Закончить Перетаскивание На Элементе (BAS-функция)
      * Закончить перетягивание в заданный элемент.
      * Конечные координаты всегда случайны, но расположены близко к центру.
      * Если элемент не виден, страница будет прокручена так, чтобы он стал видимым.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * Перед вызовом этого действия, нужно также использовать "Начать Перетаскивание" или "Начать Перетаскивание На Элементе".
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread = true Остановить поток, если элемент не найден
      * @param {Object} mouse Object => {
      *  @param {number} speed Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      * }
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_element_drag_finish() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element_visible(_SELECTOR)!
      _call(_random_point, {})!
      _if(_result().length > 0, function(){
      move( mouseSettingsObj )!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      }
      _call(_clarify, mouseSettingsObj )!
      mouse_up(X,Y)!
      })!
      }
      /**
      * Начать Перетаскивание (BAS-функция)
      * Начать перетягивание из заданных координат.
      * Если вы хотите начать перетягивание от элемента, выберите его в браузере и нажмите на "Начать Перетаскивание На Элементе".
      * Это действие работает с абсолютными координатами.
      * Если координаты не видны, страница будет прокручена так, чтобы они стали видимы.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * После вызова этого действия, нужно также использовать "Закончить Перетаскивание" или "Закончить Перетаскивание На Элементе".
      * Если вы хотите перетащить файл из файловой системы в браузер, то воспользуйтесь действием "Начать Перетягивать Файл".
      * @param {number} x X Координата
      Целое число, смещение от левого края страницы
      @param {number} y Y Координата
      Целое число, смещение от верхнего края страницы
      @param {Object} mouse Object => {
      *  @param {number} speed Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      * }
      */
      function BAS_coords_drag_start() {
      const args = _arguments()
      const x = args.x
      const y = args.y
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      move(x, y, mouseSettingsObj)!
      mouse_down(x, y)!
      }
      /**
      * Закончить Перетаскивание (BAS-функция)
      * Закончить перетягивание в заданные координаты.
      * Если вы хотите закончить перетягивание в элемент, выберите его в браузере и нажмите на "Закончить Перетаскивание На Элементе".
      * Это действие работает с абсолютными координатами.
      * Если координаты не видны, страница будет прокручена так, чтобы они стали видимы.
      * Траектория перемещения мыши всегда случайна и напоминает выполненную человеком, вы можете изменить параметры перемещения кнопкой настройки, расположенной рядом с "Отмена".
      * Перед вызовом этого действия, нужно также использовать "Начать Перетаскивание" или "Начать Перетаскивание На Элементе".
      * @param {number} x X Координата
      Целое число, смещение от левого края страницы
      @param {number} y Y Координата
      Целое число, смещение от верхнего края страницы
      @param {Object} mouse Object => {
      *  @param {number} speed Скорость
      Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
      @param {number} gravity Притяжение
      Значение плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
      @param {number} deviation Отклонение
      Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
      * }
      */
      function BAS_coords_drag_finish() {
      const args = _arguments()
      const x = args.x
      const y = args.y
      const mouseSettings = args.mouse
      const mouseSettingsObj = mouseSettings ? {
      speed: mouseSettings.speed || 100,
      gravity: mouseSettings.gravity || 6,
      deviation: mouseSettings.deviation || 2.5
      } : {}
      const move_settings = mouseSettingsObj
      move_seetings["do_mouse_up"] = "true"
      move(x, y, move_settings)!
      }
      /**
      * Получить адрес ссылки (BAS-функция)
      * Получить адрес ссылки и сохранить его в переменной.
      * Если элемент, соответствующий селектору, не является ссылкой, будет получен адрес ближайшей ссылки.
      * Вы всегда можете изменить выбранный элемент с помощью клавиш вверх и вниз. Это полезно, если несколько элементов перекрывают друг друга и имеют одинаковые координаты.
      * В случае, если ссылка, ближайшая к выбранному элементу, не может быть найдена, будет возвращена пустая строка.
      * Это действие получает атрибут "href" из ссылки. Иногда данный атрибут может отсутствовать, а сайты обрабатывают клики по ссылкам с помощью javascript. В этом случае данное действие не будет иметь пользы.
      * @param {string} selector Селектор элемента
      * @param {boolean} noWait = false Не ждать появления элемента
      * @param {boolean} stopThread = true Остановить поток, если элемент не найден
      * @param {number} timeout Максимальное время выполнения задания
      * @returns адрес ближайшей ссылки после выполнения
      */
      function BAS_element_get_url() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      const script = "(function(){var link = self;while(link && link.tagName.toLowerCase() != 'a'){link = link.parentNode};if(link && link.hasAttribute('href')){return link.getAttribute('href')} else {return ''};}());"
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).script(script)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().script(script)!
      }
      VAR_LINK_URL = _result()
      _function_return(VAR_LINK_URL)
      return VAR_LINK_URL
      }
      /**
      * Получить Атрибут Элемента (BAS-функция)
      * Получить html атрибут выбранного элемента.
      * Например, если элемент содержит такую разметку <a href="https://google.com">google</a>, тогда вы можете найти адрес ссылки получая атрибут href.
      * Если элемент содержит разметку <div id="message">text</a>, вы можете получить идентиификатор элемента через атрибут id.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {string} attributeName Имя атрибута
      Имя атрибута как строка.
      Примеры :
      id - Получить id элемента
      style - Получить стили элемента
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      @returns значение атрибута элемента как строка
      */
      function BAS_element_get_attribute() {
      const args = _arguments()
      const selector = args.selector
      const attributeName = args.attributeName
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).attr(attributeName)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().attr(attributeName)!
      }
      VAR_SAVED_ATTRIBUTE = _result()
      _function_return(VAR_SAVED_ATTRIBUTE)
      return VAR_SAVED_ATTRIBUTE
      }
      /**
      * Установить Атрибут Элемента (BAS-функция)
      * Установить html атрибут заданного элемента.
      * Например, можно поменять атрибут id элемента с разметкой <div id="message-old">text</a> если использовать это действие с параметрами id и message-new.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента
      * @param {stirng} attributeName Имя атрибута
      Имя атрибута как строка.
      @param {string} attributeValue Значение атрибута
      Эта переменная содержит значение атрибута элемента как строку
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_element_set_attribute() {
      const args = _arguments()
      const selector = args.selector
      const attributeName = args.attributeName
      const attributeValue = args.attributeValue
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element(_SELECTOR)!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).set_attr(attributeName, attributeValue)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().set_attr(attributeName, attributeValue)!
      }
      }
      /**
      * Установить Значение Комбобокса (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_set_combobox
      * Установить значение выпадающего списка. Работает только на выпадающих списках(не на текстовых полях для ввода).
      * Если выпадающий список имеет нестандартную разметку, эта функция не будет работать, в этом случае используйте действие "Установить Индекс Комбобокса".
      * Вы можете использовать действие "Ввод текста" для установки значения выпадающего списка. Для этого кликните на выпадающий список внутри браузера и выберите "Ввод текста", потом установите текст для ввода в желаемое значение или несколько первых символов с <RETURN> в конце. Например, если выпадающий список содержит два значения: мужчина и женщин, то вы можете выбрать первое значения введя мужчина<RETURN> или муж<RETURN>.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента. Как найти элемент: https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {string} Строка
      Строка, которая содежит точное значение присутствующее в выпадающем списке
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_combobox_set_value() {
      const args = _arguments()
      const selector = args.selector
      const value = args.value
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element_visible(_SELECTOR)!
      get_element_selector(_SELECTOR, false).script2("VAR_RESULT='';if(self.tagName.toLowerCase() != 'select')throw 'wrong type';var option_list = self.querySelectorAll('option');VAR_RESULT = -1;for(var i = 0;i<option_list.length;i++){var option = option_list.item(i);if(option.innerHTML == " + JSON.stringify(value) + "){VAR_RESULT = i;break;}}",JSON.stringify({}))!
      _SELECT_INDEX = JSON.parse(JSON.parse(_result()).variables)["RESULT"]
      _call(_random_point, {})!
      _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){
      move({})!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      }
      _call(_clarify,{})!
      mouse(X,Y)!
      if (timeout) {
      general_timeout_next(timeout)
      }
      sleep(rand(2000,3000))!
      _set_combobox_index(_SELECT_INDEX)!
      sleep(rand(1000,1200))!
      })!
      }
      /**
      * Установить Индекс Комбобокса (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_set_combobox
      * Установить номер значения выпадающего списка в заданное число. Работает только на выпадающих списках(не на текстовых полях для ввода).
      * Вы можете использовать действие "Ввод текста" для установки значения выпадающего списка. Для этого кликните на выпадающий список внутри браузера и выберите "Ввод текста", потом установите текст для ввода в желаемое значение или несколько первых символов с <RETURN> в конце. Например, если выпадающий список содержит два значения: мужчина и женщин, то вы можете выбрать первое значения введя мужчина<RETURN> или муж<RETURN>.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента. Как найти элемент: https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      * @param {number} Индекс
      Целое число, содержащее индекс выпадающего списка начиная с нуля
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_combobox_set_index() {
      const args = _arguments()
      const selector = args.selector
      const index = args.index
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element_visible(_SELECTOR)!
      _call(_random_point, {})!
      _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){
      move({})!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      }
      _call(_clarify,{})!
      mouse(X,Y)!
      if (timeout) {
      general_timeout_next(timeout)
      }
      sleep(rand(2000,3000))!
      _set_combobox_index(index)!
      sleep(rand(1000,1200))!
      })!
      }
      /**
      * Выбрать Случайный Элемент Из Комбобокса (BAS-функция)
      * Ссылка на вики: https://wiki.bablosoft.com/doku.php?id=ru:how_to_set_combobox
      * Установить номер значения выпадающего списка в случайное число. Работает только на выпадающих списках(не на текстовых полях для ввода).
      * Если выпадающий список имеет нестандартную разметку, эта функция не будет работать, в этом случае используйте действие "Установить Индекс Комбобокса".
      * Вы можете использовать действие "Ввод текста" для установки значения выпадающего списка. Для этого кликните на выпадающий список внутри браузера и выберите "Ввод текста", потом установите текст для ввода в желаемое значение или несколько первых символов с <RETURN> в конце. Например, если выпадающий список содержит два значения: мужчина и женщин, то вы можете выбрать первое значения введя мужчина<RETURN> или муж<RETURN>.
      * Если элемент не будет найден после первой попытки, BAS продолжит ожидать его на протяжении минуты. Если на протяжении 10 секунд элемент не будет найден, в лог будет добавлено сообщение, если элемент не появится на протяжении минуты, поток завершится с ошибкой. Вы можете обработать эту ошибку если уберете настройку "Остановить поток, если элемент не найден" (вверху страницы) или если обернете данное действие в блок игнорирования ошибок. Вы также можете настроить максимальное время ожидания если нажмете на иконку песочных часов.
      * @param {string} selector Селектор элемента. Как найти элемент: https://wiki.bablosoft.com/doku.php?id=ru:how_to_search_for_element
      @param {boolean} noWait = false Не ждать появления элемента
      @param {boolean} stopThread = true Остановить поток, если элемент не найден
      @param {number} timeout Максимальное время выполнения задания (мс)
      */
      function BAS_combobox_get_random_element() {
      const args = _arguments()
      const selector = args.selector
      const noWait = args.noWait || false
      const stopThread = args.stopThread || true
      const timeout = args.timeout
      _SELECTOR = selector
      if (timeout) {
      waiter_timeout_next(timeout)
      }
      wait_element_visible(_SELECTOR)!
      get_element_selector(_SELECTOR, false).script2("VAR_RESULT=-1;if(self.tagName.toLowerCase() != 'select')throw 'wrong type';var option_list = self.querySelectorAll('option');VAR_RESULT = -1;VAR_RESULT = Math.floor((Math.random() * (option_list.length + 1)));",JSON.stringify({}))!
      _SELECT_INDEX = JSON.parse(JSON.parse(_result()).variables)["RESULT"]
      _call(_random_point, {})!
      _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){
      move({})!
      if (!(!noWait && stopThread)) {
      get_element_selector(_SELECTOR, false).clarify(X,Y)!
      } else {
      get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!
      }
      _call(_clarify,{})!
      mouse(X,Y)!
      if (timeout) {
      general_timeout_next(timeout)
      }
      sleep(rand(2000,3000))!
      _set_combobox_index(_SELECT_INDEX)!
      sleep(rand(1000,1200))!
      })!
      }
      section_end()!

      section_start("", 681023648)!
      /*Dat:eyJzIjoiRW1iZWRkZWRMYW5ndWFnZXNOb2RlSnMiLCJ2IjoxLCJmIjpbXSwidXciOiIwIiwidXQiOiIwIiwidXRvIjoiMCIsInVtIjoiMCIsImQiOlt7ImlkIjoiTm9kZVZlcnNpb25MaXN0IiwidHlwZSI6InNlbGVjdCIsImRhdGEiOiIxMi4xOC4zIn0seyJpZCI6Ik5hbWUiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6ImFuY3JyMzNyNm9jIiwiY2xhc3MiOiJzdHJpbmcifV19*/
      _embedded("ancrr33r6oc", "Node", "12.18.3", "", 60000 )!
      section_end()!

      section_start("", 501142926)!
      /*Dat:eyJzIjoibG9nIiwidiI6MSwiZiI6W10sInV3IjoiMCIsInV0IjoiMCIsInV0byI6IjAiLCJ1bSI6IjAiLCJkIjpbeyJpZCI6IkxvZ1RleHQiLCJ0eXBlIjoiY29uc3RyIiwiZGF0YSI6ItCa0L7QvdC10YYg0YTRg9C90LrRhtC40LgiLCJjbGFzcyI6InN0cmluZyJ9XX0=*/
      log("Конец функции")
      section_end()!

   ", "PATH_DIRECTORY", 60000 )!
   section_end()!

   _call(_on_start, null)!

   section_start("", 874929631)!
   /*Dat:eyJzIjoicHJvamVjdF9kaXJlY3RvcnkiLCJ2IjoxLCJmIjpbXSwidXciOiIwIiwidXQiOiIwIiwidXRvIjoiMCIsInVtIjoiMCIsImQiOlt7ImlkIjoiU2F2ZSIsInR5cGUiOiJ2YXIiLCJkYXRhIjoiUFJPSkVDVF9ESVJFQ1RPUlkifV19*/
   VAR_PROJECT_DIRECTORY = project_directory();
   section_end()!

   section_start("", 240452625)!
   /*Dat:eyJzIjoicGF0aF9kaXJlY3RvcnlfbmFtZSIsInYiOjEsImYiOltdLCJ1dyI6IjAiLCJ1dCI6IjAiLCJ1dG8iOiIwIiwidW0iOiIwIiwiZCI6W3siaWQiOiJwYXRoIiwidHlwZSI6ImNvbnN0ciIsImRhdGEiOiJbW1BST0pFQ1RfRElSRUNUT1JZXV0iLCJjbGFzcyI6InN0cmluZyJ9LHsiaWQiOiJTYXZlIiwidHlwZSI6InZhciIsImRhdGEiOiJQQVRIX0RJUkVDVE9SWSJ9XX0=*/
   VAR_PATH_DIRECTORY = _path.dirname(VAR_PROJECT_DIRECTORY);
   section_end()!

})!]]></Script>
     <ModuleInfo><![CDATA[{
}
]]></ModuleInfo>
     <Modules/>
     <EmbeddedData><![CDATA[[{"data":"module.exports = async function(){\n    \n}","data_name":"test","data_type":1,"language_name":"Node","language_version":"12.18.3"},{"data":"// const cookies = await BAS_FUNCTION('BAS_save_cookies', {})\r\n\r\nconst path = [[PATH_DIRECTORY]] + '/test'\r\n\r\n// const func = require(path)\r\n\r\n// func()\r\n\r\nconst result = await BAS_FUNCTION('BAS_random(1, 100)', {})\r\n\r\nconsole.log(result)","data_name":"zf1tjxi74m","data_type":0,"language_name":"Node","language_version":"12.18.3"},{"data":"const func = async () => {\r\n    const result = await BAS_random(1, 100)\r\n\r\n    console.log(await BAS_FUNCTION('_is_string', { data: 11 }))\r\n\r\n    // console.log(result)\r\n}\r\n\r\nconst get_api_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/api\")\r\nconst {\r\n\tBAS_log,\r\n\tignore_errors,\r\n\tBAS_if,\r\n\tBAS_while,\r\n\tBAS_for,\r\n\tBAS_foreach,\r\n\tBAS_break,\r\n\tBAS_continue,\r\n\tBAS_set_global,\r\n\tBAS_get_global,\r\n\tBAS_inc_global,\r\n\tBAS_cvs_parse,\r\n\tBAS_random\r\n} = get_api_functions(BAS_FUNCTION)\r\nconst get_browser_api_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/browser_api\")\r\nconst {\r\n\tget_html_script,\r\n\tget_browser_screen_settings,\r\n\tBAS_proxy,\r\n\tBAS_javascript,\r\n\tBAS_onLoadJavascript,\r\n\tBAS_render,\r\n\tBAS_solveCaptcha,\r\n\tBAS_solve_coordinates_captcha,\r\n\tBAS_settings\r\n} = get_browser_api_functions(BAS_FUNCTION)\r\nconst get_network_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/network\")\r\nconst {\r\n\tBAS_save_cookies,\r\n\tget_cookies,\r\n\tBAS_load_cookies,\r\n\tBAS_load_cookies_from_http_client,\r\n\tBAS_cache_get_status,\r\n\tBAS_is_load,\r\n\tBAS_get_cache,\r\n\tBAS_cache_get_all\r\n} = get_network_functions(BAS_FUNCTION)\r\nconst get_waiting_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/waiting\")\r\nconst {\r\n\twait_load_files\r\n} = get_waiting_functions(BAS_FUNCTION)\r\nconst get_email_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/email\")\r\nconst {\r\n\tproxy_set_hash,\r\n\tBAS_imap_client_set_proxy,\r\n\tBAS_imap_client_messages_length,\r\n\tBAS_parse_message,\r\n\tBAS_imap_client_search,\r\n\tBAS_imap_client_search_all,\r\n\tBAS_imap_client_get_message,\r\n\tBAS_imap_client_delete_message\r\n} = get_email_functions(BAS_FUNCTION)\r\nconst get_http_client_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/http-client\")\r\nconst {\r\n\tBAS_http_client_set_proxy,\r\n\tBAS_http_client_reset,\r\n\tBAS_http_client_get,\r\n\tBAS_http_client_post,\r\n\tBAS_http_client_download,\r\n\tBAS_http_client_url,\r\n\tBAS_http_client_encoded_content,\r\n\tBAS_http_client_status,\r\n\tBAS_http_client_header,\r\n\tBAS_http_client_set_header,\r\n\tBAS_http_client_clear_header,\r\n\tBAS_http_client_save_cookies,\r\n\tBAS_http_client_restore_cookies,\r\n\tBAS_http_client_restore_cookies_from_browser,\r\n\tBAS_http_client_set_fail_on_error,\r\n\tBAS_http_client_was_error,\r\n\tBAS_http_client_error_string,\r\n\tBAS_http_client_xpath_xml,\r\n\tBAS_http_client_xpath_xml_list,\r\n\tBAS_http_client_xpath_text,\r\n\tBAS_http_client_xpath_text_list,\r\n\tBAS_http_client_xpath_count,\r\n\tBAS_http_client_xpath_exists\r\n} = get_http_client_functions(BAS_FUNCTION)\r\nconst get_date_and_time_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/date_and_time\")\r\nconst {\r\n\tBAS_parse_milliseconds,\r\n\tBAS_milliseconds_from_date,\r\n\tBAS_create_date,\r\n\tBAS_change_date,\r\n\tBAS_add_time,\r\n\tBAS_difference_between_dates,\r\n\tBAS_current_date,\r\n\tBAS_date_change_timezone,\r\n\tBAS_date_get_timezone,\r\n\tBAS_get_day_of_month,\r\n\tBAS_get_day_of_week,\r\n\tBAS_get_day_of_year,\r\n\tBAS_get_year_from_date,\r\n\tBAS_get_month_from_date,\r\n\tBAS_get_hours_from_date,\r\n\tBAS_get_minutes_from_date,\r\n\tBAS_get_seconds_from_date,\r\n\tBAS_get_milliseconds_from_date\r\n} = get_date_and_time_functions(BAS_FUNCTION)\r\nconst get_filesystem_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/filesystem\")\r\nconst {\r\n\tBAS_read_file,\r\n\tBAS_write_file,\r\n\tBAS_file_info,\r\n\tBAS_create_dir,\r\n\tBAS_remove_file,\r\n\tBAS_move_file,\r\n\tBAS_copy_file,\r\n\tBAS_search_files,\r\n\tBAS_read_file_to_array,\r\n\tBAS_write_file_array\r\n} = get_filesystem_functions(BAS_FUNCTION)\r\nconst get_fingersprint_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/fingersprint\")\r\nconst {\r\n\tBAS_get_fingerprint,\r\n\tBAS_apply_fingerprint,\r\n\tBAS_fingerprint_performance\r\n} = get_fingersprint_functions(BAS_FUNCTION)\r\nconst get_async_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/async\")\r\nconst {\r\n\tBAS_async,\r\n\tBAS_thread_wait,\r\n\tBAS_thread_get_status\r\n} = get_async_functions(BAS_FUNCTION)\r\nconst get_inactivity_emulation_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/inactivity_emulation\")\r\nconst {\r\n\tBAS_inactivity_emulation\r\n} = get_inactivity_emulation_functions(BAS_FUNCTION)\r\nconst get_image_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/image\")\r\nconst {\r\n\tBAS_load_image,\r\n\tBAS_delete_image,\r\n\tBAS_create_image,\r\n\tBAS_convert_image,\r\n\tBAS_get_image_data,\r\n\tBAS_image_get_pixel,\r\n\tBAS_image_set_pixel,\r\n\tBAS_image_get_size,\r\n\tBAS_image_resize,\r\n\tBAS_image_insert,\r\n\tBAS_image_find,\r\n\tBAS_image_fill,\r\n\tBAS_image_sub,\r\n\tBAS_image_text\r\n} = get_image_functions(BAS_FUNCTION)\r\nconst get_json_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/json\")\r\nconst {\r\n\tBAS_json_value,\r\n\tBAS_json_values,\r\n\tBAS_json_key,\r\n\tBAS_json_keys,\r\n\tBAS_json_count,\r\n\tBAS_json_change,\r\n\tBAS_json_remove,\r\n\tBAS_json_check_format,\r\n\tBAS_json_change_format\r\n} = get_json_functions(BAS_FUNCTION)\r\nconst get_array_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/array\")\r\nconst {\r\n\tlastListElement,\r\n\trandomListElement,\r\n\tsetListElement,\r\n\tdeleteListValue,\r\n\tlistContains,\r\n\tsubList,\r\n\tlistRemoveDuplicates,\r\n\tlistCopy,\r\n\tlistShuffle,\r\n\tlistMerge,\r\n\tlistCompare\r\n} = get_array_functions(BAS_FUNCTION)\r\nconst get_path_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/path\")\r\nconst {\r\n\tBAS_filename_from_path,\r\n\tBAS_dirname_from_path,\r\n\tBAS_extname_from_path,\r\n\tBAS_path_is_absolute,\r\n\tBAS_path_join,\r\n\tBAS_path_normalize,\r\n\tBAS_path_parse,\r\n\tBAS_get_system_path\r\n} = get_path_functions(BAS_FUNCTION)\r\nconst get_phone_confirm_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/phone_confirm\")\r\nconst {\r\n\tBAS_phone_get_number,\r\n\tBAS_phnoe_get_activation_code,\r\n\tBAS_phone_change_activation_status,\r\n\tBAS_phone_get_balance,\r\n\tBAS_phone_get_numbers_count,\r\n\tBAS_phone_get_sites,\r\n\tBAS_phone_get_countries,\r\n\tBAS_phone_set_debug\r\n} = get_phone_confirm_functions(BAS_FUNCTION)\r\nconst get_process_manage_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/process_manage\")\r\nconst {\r\n\tBAS_process_run\r\n} = get_process_manage_functions(BAS_FUNCTION)\r\nconst get_profile_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/profile\")\r\nconst {\r\n\tBAS_create_or_switch_permanent_profile,\r\n\tBAS_switch_to_temporary_profile,\r\n\tBAS_profile_copy,\r\n\tBAS_delete_profile,\r\n\tBAS_current_profile_info\r\n} = get_profile_functions(BAS_FUNCTION)\r\nconst get_regular_expressions_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/regular_expressions\")\r\nconst {\r\n\tBAS_regexp_first,\r\n\tBAS_regexp_scan,\r\n\tBAS_regexp_is_match,\r\n\tBAS_regexp_split,\r\n\tBAS_regexp_replace\r\n} = get_regular_expressions_functions(BAS_FUNCTION)\r\nconst get_resources_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/resources\")\r\nconst {\r\n\tBAS_create_resource,\r\n\tBAS_delete_resource,\r\n\tBAS_resource_add,\r\n\tBAS_get_resource_location,\r\n\tBAS_resource_as_list,\r\n\tBAS_list_to_resource,\r\n\tBAS_reload_resource,\r\n\tBAS_resource_length\r\n} = get_resources_functions(BAS_FUNCTION)\r\nconst get_smtp_settings_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/smtp_settings\")\r\nconst {\r\n\tBAS_smtp_client_set_proxy,\r\n\tBAS_send_email,\r\n\tBAS_smtp_debug_enable\r\n} = get_smtp_settings_functions(BAS_FUNCTION)\r\nconst get_string_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/string\")\r\nconst {\r\n\tBAS_base64,\r\n\tBAS_template,\r\n\tBAS_join_strings,\r\n\tBAS_csv_parse,\r\n\tBAS_csv_generate,\r\n\tBAS_trim,\r\n\tBAS_clean,\r\n\tBAS_html\r\n} = get_string_functions(BAS_FUNCTION)\r\nconst get_telegram_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/telegram\")\r\nconst {\r\n\tBAS_telegram_send_message\r\n} = get_telegram_functions(BAS_FUNCTION)\r\nconst get_timezone_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/timezone\")\r\nconst {\r\n\tBAS_timezone_set_geo_location,\r\n\tBAS_set_timezone,\r\n\tBAS_timezone_set_coordinates,\r\n\tBAS_timezone_get_ip_info\r\n} = get_timezone_functions(BAS_FUNCTION)\r\nconst get_url_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/url\")\r\nconst {\r\n\tBAS_url_normalize,\r\n\tBAS_url_parse,\r\n\tBAS_generate_url,\r\n\tBAS_change_url,\r\n\tBAS_parse_user_agent,\r\n\tBAS_url_punycode,\r\n\tBAS_url_component\r\n} = get_url_functions(BAS_FUNCTION)\r\nconst get_user_interaction_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/user_interaction\")\r\nconst {\r\n\tBAS_user_play_sound,\r\n\tBAS_user_input\r\n} = get_user_interaction_functions(BAS_FUNCTION)\r\nconst get_xpath_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/xpath\")\r\nconst {\r\n\tBAS_xpath_get_first_xml,\r\n\tBAS_xpath_get_xml_list,\r\n\tBAS_xpath_get_first_text,\r\n\tBAS_xpath_get_text_list,\r\n\tBAS_xpath_get_count,\r\n\tBAS_xpath_exists\r\n} = get_xpath_functions(BAS_FUNCTION)\r\nconst get_html_element_functions = require(\"C:/Users/WriteCoin/Projects/BrowserAutomationStudio/nodeBAS/API ForNode/html_element\")\r\nconst {\r\n\tBAS_mouse_move_and_click_element,\r\n\tBAS_click_element,\r\n\tBAS_mouse_move_over_element,\r\n\tBAS_mouse_move_and_click,\r\n\tBAS_click,\r\n\tBAS_mouse_move,\r\n\tBAS_input_text,\r\n\tBAS_clear_field,\r\n\tBAS_get_xml,\r\n\tBAS_add_tab,\r\n\tBAS_popupinfo,\r\n\tBAS_element_is_exists,\r\n\tBAS_element_get_text,\r\n\tBAS_element_screenshot,\r\n\tBAS_element_solve_captcha,\r\n\tBAS_element_solve_captcha_clicks,\r\n\tBAS_wait_element,\r\n\tBAS_element_focus,\r\n\tBAS_element_get_coordinates,\r\n\tBAS_elements_count,\r\n\tBAS_get_element_style,\r\n\tBAS_element_drag_start,\r\n\tBAS_element_drag_finish,\r\n\tBAS_coords_drag_start,\r\n\tBAS_coords_drag_finish,\r\n\tBAS_element_get_url,\r\n\tBAS_element_get_attribute,\r\n\tBAS_element_set_attribute,\r\n\tBAS_combobox_set_value,\r\n\tBAS_combobox_set_index,\r\n\tBAS_combobox_get_random_element\r\n} = get_html_element_functions(BAS_FUNCTION)\r\n\r\nawait func()","data_name":"ancrr33r6oc","data_type":0,"language_name":"Node","language_version":"12.18.3"}]]]></EmbeddedData>
     <DatabaseId>Database.31443</DatabaseId>
     <Schema></Schema>
     <ConnectionIsRemote>false</ConnectionIsRemote>
     <ConnectionServer></ConnectionServer>
     <ConnectionPort></ConnectionPort>
     <ConnectionLogin></ConnectionLogin>
     <ConnectionPassword></ConnectionPassword>
     <ScriptName>ScriptName</ScriptName>
     <ProtectionStrength>4</ProtectionStrength>
     <UnusedModules>String;JSON;URL;ClickCaptcha;PhoneVerification</UnusedModules>
     <ScriptIcon>iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gUYCTcMXHU3uQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAANRElEQVR42u2dbWwU5drHfzM7O7sLbc5SWmlrJBxaIB00ES0QDr6kp4Km+qgt0aZ+sIQvT63HkKrED2z0QashIQHjMasfDAfxJWdzDpzHNxBINSCJVkvSWBg1WgIRTmtog6WlnZ3dnXk+0J2npXDY0naZ3b3/X9ptuy8z1+++ruu+e93XLXENaZqGruvJ7/8ArAKWAnkIuUUWcAb4Vtf1E5N5onQtw2uaVgKEgP8GPOJeZ4SOAn/TdX3ndQGgaRqAAvwTeASw/xMsQq7VRWC9ruv/HOvJx0q+yhP/DJjAw9fyFEKu1mzgH5qmtY1682t7AE3TaoG94t5llWzgtK7rf7zcE0iXuf0/A23ifmUtBN26ri8a+0PPZTH/Z+Hus1YSUFBUVOQ9d+7cF1fyAP87GvMFANmvUqBH13Wk0dFfAvxb3JecCQX/0nV9HYA8mhCERn8hlBuhoE7TNCkZ9+HSIs+kXL9lWRiGgWVZ7sTctsnPz5/y65imiWmarrWmLMv4/X5kWZ7sU/8C/FUZXd71TObGFhcXU19fT3V1NYWFhdi2+5xHXl4eZWVlU4agqamJDRs2uBaAgYEBDhw4QCQSobe3F0lKeRwvS3qAVZMx/sqVK9mxYweDg4NIksTQ0JB7fZ0kTYsHuHjxomuvUVEUampqqK+vp6Wlhfb29lSv+09waSVwaapvVlxczI4dOxgaGpqWmys0faAPDQ2xY8cOiouLU33akqQHSOm/epZlUV9f74z8yz2Doiioqno9sWjGQsB0hCZVVZk9e7ZrjG1ZFqZpEo/HJ9hhcHCQ+vp6Xn/99ZTtIGma9hLwP9f6w+HhYQ4dOoTf759AX09PD+FwmI6ODgYGBkQSOIPXFAwGqayspLm5mZKSkgmQG4bBmjVrmDVr1jVfT9d1SZkMeYWFheNiviRJHDx4kNbWVgeMvLzsKhNQVRVVVV3zeRKJBO3t7Rw+fJhQKMTatWvHQVBYWDipmZk8WQLHft/T0zPO+ELpk9/vp7W1lZ6engl2mdQ0cirZZzgcFsa/wRCEw2EURbnu17huAFRVpaOjQ1jhBqujo2NKIeq6AZBl2TUJXy5rYGBgSjMvWdzC3JYAQAAgJAAQEgAICQCEBABCAgAhAYCQAEAoR6S4+cNdqfgkXZIkCVmWkWUZj8eDx+PJyiooxc3G7+7uviE1h7FYDNM0GRwcpL+/nzNnznDq1CmOHz9OZ2cnhmGgqmpWAOFaAJJ1bjeyIDM/P5/8/HwWLFjAXXfdhaIoeL1eOjs7OXDgAJ9++im2bbumDC7rQkBStm3j9XrTNuK8Xq/zvolEgng87nyNx+MsXryYiooKnn32WSKRCO+88w6JRCIjPUJGAODz+XjyySf58ccf0wacqqoEg0FKSkqYP38+FRUVrFixgoULFzobYizLYt26ddTW1rJ161YOHTrkqvKxrAEALlW/pLs6d3h4mO7ubrq7u2lrayMajXLTTTfx0EMP0dDQQCAQcEb+Sy+9xMqVK2ltbc0oCMQ0MNUbJcsEAgEGBwf58MMPuf/++wmHw3g8HidxvO+++9i+fburt5IJAKYpQfX5fOzdu5dHH32UM2fOOKHjjjvuYNOmTcRiMQFALoBw8eJFGhsbnbYrtm1TW1vL8uXLBQC5Iq/XyzPPPMO5c+ewbRvDMAiFQhiGIQDIFSmKwgsvvEAgEECSJILBINXV1QKAXNKpU6c4cuQItm0Tj8d55JFHXJ8QCgCmORR89NFHzqJVJuQBAoBp1tdffz1uHWDx4sUCgFxSPB53poWJRIIFCxYIAHJJsixz/vx54NKO6mAwKADItbWB5CKQbdsEAgEBQC7JsqxxPRLi8bgAIJeUSCSYP38+AB6Ph76+PgFALqm8vNypJ1AUhe7ubgFArsi2bdasWUM0GgVgZGQkbTUMAgCXTAEbGhqcx/v378fn8wkAckGxWIznnnvOqQ/0+/3s2rXLqRdwq1KuCLJte1x2O119+LIl8Vu7di21tbWYpokkSezevZvz58/POABTtUvKAOTn51NWVuYUPk5XH75Ml2EYrFu3jueff96J/SdPniQcDqfF/U/VLspk30zo/+f7qqqybds2Vq9eTTQaRZIkzp49y1NPPZXW2D8Vu4gc4DpivcfjYf369Xz++eesWLEC0zRRVZVvvvmGxsbGjLoeRZj06rHVsiwSiQSxWIyioiJWrlxJVVUV99xzD9Fo1KkIjsVivPbaaxw6dMj1WX9GApBIJFizZg3Lli1Ly/t5vV78fj9z5syhtLSUhQsXUlBQ4BjdMAwURcE0Td577z3ef/99ZFnOOONnDADJ6pobqZGRkUsxU5Y5duwYH3/8MV9++SU+n8/1U72MB8BNW64sy+LOO+9k1qxZlJaWcvDgQfr7+zNuR1BGAeDxePjkk0/o7+9PC2xerxefz0cwGKSoqIibb76Z0tJSYrEYsVgM27ZZsmQJFRUVbNy4ke+++46dO3dy7NixjOudnDEA7Nu3j59//jktyd/YJDCZCPp8Pmd/YFVVFeXl5YyMjDAyMsLSpUt588036ezsZMuWLZw/fz5jNoqKaeAVPECyOUTyFJRAIIAsy/z000/s3r2bhoYG6urq2Ldvn+P6TdOkoqKCPXv2cO+994qdQdkMSCAQoK+vj+3bt/Pggw+O69gdi8XYsmULTzzxREZAIACYYmgaHh5m06ZNhEIhpw7ANE2efvrpCad5CACyVD6fj6NHj9LY2Igsy872sBdffJGCggIBQK6Ehl9//ZWNGzfi9/uRJIloNMrmzZudfxIJAHIAgq6uLiKRiPN4+fLlLFq0SACQK0qepZQsDDEMg7q6OhKJhAAgV2TbNnv37nUeV1VVuXareMoLQaZp0tTU5Ox2VVWVt99+O2OXQGd0VMkyX3zxBY899hixWIxgMEhpaemMnLE0VbtMCoANGzY4fftmz57NG2+8IQC4ir7//nsURSEWixGPx1m0aNGMnLI2VbuIEDBDsixr3CbRefPmiRwg18LAhQsXnJzATQdQCwDSNCUcO/93a82AAGAGQ0DyBO9kNzEBQA5pbNyXZZnff/9dAJBLCgaDzJkz59JUS1H45ZdfBAC5pLvvvttZ/EkkEpw8edKVn1OUhc+ADMPg4YcfdpZ/v/rqqykd8S48QIZJ0zRuv/12p77ws88+EwDkiqLRKK2trRiGgW3b9Pb2cvjwYdd+XhECplEjIyNs27aNuXPnApcKRV555RVnOig8QJaP/K1bt7Jq1Spn6rdnzx66urpc/bkFANMw3y8oKOCDDz5g9erVWJaFJEl0dnaybds2p05QhIAsUzwex+fz0dTUxOOPP45pmti2jcfj4ejRo2zevDkjNokIAFJUsgN4PB5nxYoV1NTU8MADD2CaplP+raoqb731Frt3786YHUIZA4BhGGlbT0+O5GAwyNy5c7nlllsoLy/n1ltvpbKyEo/Hg2mazqj3+XwcP36cl19+md9++y2jtodlBADRaJRdu3albbuVoijIsjxua1iy42fysSzL+P1+2tvbeffdd+no6MDv92fcIZIZszs4nS1XL9/RkzwdVFEUPB4PXV1dHDlyhP379zs7gzNtU6jrAbi8+1U6k7tYLMbQ0BADAwOcO3eOs2fPcvr0aX744QdOnDhBPB53zg7O9JI41wJweferdHucK50eDoz7Phvk6hAgupLNvMRCkABASAAgJAAQEgAICQCEBABCAgAhAYCQAEBIACAkABASAFxV4tCoG6+p2uC6AciEk7FzQcFgEMuy0g+AaZpUVlYKC9xgVVZWOg2i0gpAPB6nubnZte3PckGGYdDc3DylcrlJATC2OkeSJEpKSgiFQgKCG2T8UChESUnJBLtMRilXBMmyTF9f37jiR9u2Wbt2LbfddhvhcJiOjo4Z6YV3vcnRdFQUJcu/3XJNwWCQyspKmpubKSkpmZAE9vX1TaoyWQFSyiD8fj9tbW3U1NSMo8y2bebNm8err76KqqquKYvOy8ujrKxsyhA0NTWxYcMG14x8y7IwTZN4PD7B+LZt09bWNqkKZQU4k6oHiEQi1NfXMzQ0NCE0JBIJ52Qtt2g6CkpN03Rlg6crXVt+fj6RSCTVQXghmQN8m+qb9vb20tLSIg6OduFaQF5eHi0tLfT29qb6tG8BFF3XT2ialjJ17e3t1NXVUV9fT3V1NYWFha6EYbogVVXVtU0eAQYGBjhw4ACRSITe3t5UvZ4NdAJIAJqmfQXcNdlYZBjGlBYhRBI4dSW3qF1H7lUJHEvOAv42WQBkWXZ154vpkqqq2dgQ+4Ku68ecdQBd13cCFxHKFb1wpYWg9eK+ZH++CPxb1/W3nbxu7G81TWsDqi7/uVBWqQw4qev6eA+gaRq6rlcDp0dJEco+/Zeu647xxwGg63oSgj8C3eJeZZXbTxr/0wnJ/NgHYyBYBLx62QsIZaZ6gLIrGX8CAEkIRr+GgFLgX+IeZuSIvwA8pev6zcBVO1X/x2Rv1BugaZoE/AVYBvwJWCLus/vm9lxa3u0E/p6c5wvloFJd2gf4P8Hwf+/uucowAAAAAElFTkSuQmCC</ScriptIcon>
     <IsCustomIcon>false</IsCustomIcon>
     <HideBrowsers>false</HideBrowsers>
     <IntegrateScheduler>false</IntegrateScheduler>
     <SingleInstance>false</SingleInstance>
     <CopySilent>false</CopySilent>
     <IsEnginesInAppData>false</IsEnginesInAppData>
     <CompileType>NoProtection</CompileType>
     <ScriptVersion>1.0.0</ScriptVersion>
     <AvailableLanguages>en,ru</AvailableLanguages>
     <EngineVersion>24.7.1</EngineVersion>
     <SettingsWorker>EnableFlash=false
EnableWidevine=false
AutostartDebug=false
SaveBrowserLog=false
ProfilesCaching=true
ToolboxHeight=544
MaxBrowserStartSimultaneously=3
MinFreeMemoryToStartBrowser=1500
MinUnusedCpu=35
ScenarioWidth=500
Zoom=100
IsMaximized=false
Restart=true
UseHumanLikeMouseMoves=true
DebugToolbox=false
DebugScenario=false
Languages=&quot;Node,12.18.3&quot;
Modules=&quot;&quot;
Canvas=&quot;enable&quot;
CanvasNoise=&quot;&quot;
Audio=&quot;enable&quot;
QUIC=&quot;disable&quot;
AudioNoise=&quot;&quot;
MaxFPS=30
Webrtc=&quot;enable&quot;
WebrtcIps=&quot;&quot;
Webgl=&quot;enable&quot;
WebglNoise=&quot;&quot;
WebglRenderer=&quot;&quot;
WebglVendor=&quot;&quot;
Detector=true
</SettingsWorker>
     <ChromeCommandLine>--disk-cache-size=1
--disable-gpu-program-cache
--disable-gpu-shader-disk-cache
--disable-component-update
--disable-features=GpuProcessHighPriorityWin,GpuUseDisplayThreadPriority
--lang=en
--disable-auto-reload</ChromeCommandLine>
     <ModulesMetaJson>{
    &quot;Archive&quot;: false,
    &quot;Checksum&quot;: false,
    &quot;Excel&quot;: false,
    &quot;FTP&quot;: false,
    &quot;FunCaptcha&quot;: false,
    &quot;HCaptcha&quot;: false,
    &quot;ReCaptcha&quot;: false,
    &quot;SQL&quot;: false,
    &quot;SmsReceive&quot;: false
}
</ModulesMetaJson>
     <OutputTitle1 en="First Results" ru="First Results"/>
     <OutputTitle2 en="Second Results" ru="Second Results"/>
     <OutputTitle3 en="Third Results" ru="Third Results"/>
     <OutputTitle4 en="Fourth Results" ru="Fourth Results"/>
     <OutputTitle5 en="Fifth Results" ru="Fifth Results"/>
     <OutputTitle6 en="Sixth Results" ru="Sixth Results"/>
     <OutputTitle7 en="Seventh Results" ru="Seventh Results"/>
     <OutputTitle8 en="Eighth Results" ru="Eighth Results"/>
     <OutputTitle9 en="Ninth Results" ru="Ninth Results"/>
     <OutputVisible1>1</OutputVisible1>
     <OutputVisible2>1</OutputVisible2>
     <OutputVisible3>1</OutputVisible3>
     <OutputVisible4>0</OutputVisible4>
     <OutputVisible5>0</OutputVisible5>
     <OutputVisible6>0</OutputVisible6>
     <OutputVisible7>0</OutputVisible7>
     <OutputVisible8>0</OutputVisible8>
     <OutputVisible9>0</OutputVisible9>
     <ModelList/>
</BrowserAutomationStudioProject>
