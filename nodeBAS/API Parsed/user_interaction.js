/**
* Ручное управление браузером (async)
* Передать контроль над браузером пользователю.
* Это действие временно передаст контроль над браузером пользователю. Каждое движение мыши и событие клавиатуры будут отправлены в браузер напрямую.
* Когда пользователь закончит работу с браузером, он может нажать на ссылку внизу страницы, чтобы передать управление браузером обратно в приложение. ( screen ).
* Это действие предназначено для использования в режиме запуска, если вы хотите управлять браузером в режиме записи, нажмите следующую кнопку ( screen ).
* Разработчик может прикрепить сообщение при предоставлении пользователю контроля, чтобы он понял, какие действия ему нужно выполнить. Сообщение может содержать переменные или ресурсы.
* Типичным вариантом использования может быть управление браузером в течение большей части времени работы приложения, в то же время предоставляя управление пользователю только для небольшой задачи, например, для решения типа капчи, которая изначально не поддерживается BAS.
* Если вы хотите получить информацию от пользователя, используйте действие 'Запросить ввод пользователя' или систему ресурсов.
*
* @param text Текст, который будет показан пользователю
Вы можете прикрепить сообщение при предоставлении пользователю контроля, чтобы он понял, какие действия ему нужно выполнить. Сообщение может содержать переменные или ресурсы.
Примеры :
Пустая строка
Пожалуйста, решите капчу - Попросить пользователя решить капчу
Пожалуйста, введите данные для VAR_ACCOUNT - Использовать переменную внутри сообщения
* @param callback Функция
*/
function BAS_manual_browser_control(text, callback) {
const text = _function_argument('text') || (text || '')
const callback = _function_argument('callback') || (callback || function() {})
_manual_browser_control(text, callback)!
}
/**
* Воспроизвести Звук
* Воспроизвести звуковое уведомление.
* Это действие может привлечь внимание пользователя к важным событиям во время выполнения скрипта.
*/
function BAS_user_play_sound() {
native("usernotification", "playsound", "")
}
/**
* Запросить ввод от пользователя
* Показать поле для ввода пользователю, дождаться, пока он введет какое-то значение и сохранить это значение в переменной.
* Это действие работает как капча, но вместо изображения отображается текст.
* Это действие не имеет ограничений по времени и продлится до тех пор, пока пользователь ничего не введет.
* Пользователь может ввести какой-либо текст, либо отменить ввод. В первом случае действие вернет введенное значение, во втором случае поток завершится с ошибкой. Вы можете избежать завершения работы потока, используя действие 'Игнорировать ошибки'.
* Если вы хотите получить значения от пользователя перед запуском скрипта или создать продвинутый пользовательский интерфейс, то лучше использовать систему ресурсов.
*
* @param {string} text Текст, который будет показан пользователю
Текст, который будет отображаться пользователю вместе с полем для ввода. Этот текст должен объяснять, какое именно значение нужно ввести.
@returns Результат, который был введен пользователем.
*/
function BAS_user_input() {
const args = _arguments()
const text = args.text
solve_base64("manual","BAS_USER_ASK" + "Текст")!
VAR_USER_INPUT = _result()
_function_return(VAR_USER_INPUT)
return VAR_USER_INPUT
}
