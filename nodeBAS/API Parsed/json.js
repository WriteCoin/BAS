/**
* Получить значение
* Выполнить запрос JPath и получить одно значение (первое подходящее).
* Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
* Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - m1. С помощью JSONPath мы можем просто указать нужный путь - $.messages[0] и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа $, обращаемся к дочернему элементу messages через символ точки, и указываем индекс нужного нам элемента.
* Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений, но действия Получить значение или Получить ключ вернут только первый элемент из списка, т.е m1, а не [m1, m2, m3]. Если вам нужен именно список, используйте действия Получить все значения или Получить все ключи.
* Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида age и получить значение этого свойства - 100.
* Вы также можете использовать упрощённый синтаксис для запросов. Например, результат запросов $.messages[*] и messages[*] будет одинаковым. Модуль сам добавит необходимые символы в начале строки запроса. Это также касается поиска любых элементов (не только корневого), т.е. для запросов вида $..messages[*] и ..messages[*] результат также будет одинаковым.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html
* @param {string | Object} json JSON строка или объект для парсинга
JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для парсинга
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns Результат парсинга (Первое подходящее значение)
*/
function BAS_json_value(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.value(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Получить все значения
* Выполнить запрос JPath и получить все подходящие значения.
* Если результатом действия будет одно значение, будет возвращён список, содержащий это значение.
* Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
* Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. В обычной ситуации, нам придётся писать код, чтобы получить, например, первое сообщение - m1. С помощью JSONPath мы можем просто указать нужный путь - $.messages[0] и получить в результате то, что нам было необходимо. Если кратко описать, что именно значит такой запрос, то получится следующее: берём корневой элемент с помощью символа $, обращаемся к дочернему элементу messages через символ точки, и указываем индекс нужного нам элемента.
* Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений, но действия Получить значение или Получить ключ вернут только первый элемент из списка, т.е m1, а не [m1, m2, m3]. Если вам нужен именно список, используйте действия Получить все значения или Получить все ключи.
* Вы можете использовать простые названия параметров, чтобы получить необходимое значение. Например, имея строку из предыдущего примера вы можете указать в качестве пути запрос вида age и получить значение этого свойства - 100.
* Вы также можете использовать упрощённый синтаксис для запросов. Например, результат запросов $.messages[*] и messages[*] будет одинаковым. Модуль сам добавит необходимые символы в начале строки запроса. Это также касается поиска любых элементов (не только корневого), т.е. для запросов вида $..messages[*] и ..messages[*] результат также будет одинаковым.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html
*
* @param {string | Object} json JSON строка или объект для парсинга
JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для парсинга
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns результат парсинга (Все значения или список, состоящий из одного значения).
*/
function BAS_json_values(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.values(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Получить ключ
* Выполнить запрос JPath и получить один ключ (первый подходящий).
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
* Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"Kate":{"rating":5,"count":6},"John":{"rating":1,"count":2}}. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида $.[?(@.rate >= 1)]. Таким образом, в результате мы получим первое имя, удволетворяющее нашему запросу.
* Обратите внимание, если вы используете это действие - результатом всегда будет одно значение, но действие Получить все ключи вернёт все подходящие элементы в виде списка.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json JSON строка или объект для парсинга
JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для парсинга
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns результат парсинга (Первый подходящий ключ).
*/
function BAS_json_key(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.key(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Получить все ключи
* Выполнить запрос JPath и получить все подходящие ключи.
* Если результатом действия будет один ключ, будет возвращён список, содержащий этот ключ.
* Если во время парсинга произойдёт ошибка, будет возвращена пустая строка.
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
* Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"Kate":{"rating":5,"count":6},"John":{"rating":1,"count":2}}. Мы хотим получить имена людей, у которых рейтинг (rating) больше или равен 1. Это легко можно сделать с помощью запроса вида $.[?(@.rate >= 1)]. Таким образом, в результате мы получим список имён, удволетворяющих нашему запросу.
* Обратите внимание, если вы используете это действие - результатом всегда будет список значений, но действие Получить ключ вернёт только первый подходящий элемент из списка.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json JSON строка или объект для парсинга
JSON строка или объект для парсинга. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для парсинга
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns результат парсинга (Все ключи или список, состоящий из одного ключа).
*/
function BAS_json_keys(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.keys(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Количество элементов
* Выполнить запрос JPath и получить количество элементов.
* Если объект по указанному запросу не будет найден или не будет содержать элементов, результатом будет ноль.
* JSONPath запрос может быть пустым в этом действии. В этом случае будет подсчитано общее количество ключей объекта или строки в формате JSON.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Типичные примеры применения данной функции - это работа с API какого-либо веб-сайта или, что бывает чаще в контексте BAS, работа с Cookies. В BAS куки представлены для пользователя в формате JSON строки. Это зачастую вызывает трудности. Но с помощью JSONPath, вы с лёгкостью сможете достать нужные данные.
* Рассмотрим пример. Допустим, мы получили от определенного сайта строку вида {"age":100, "name":"John", "messages": ["m1", "m2", "m3"]}. Мы хотим узнать, сколько новых сообщений было получено от пользователя. С помощью JSONPath мы можем просто указать нужный путь - $.messages[*] и получить точное число входящих сообщений.
* Обратите внимание, если использовать путь $.messages[*] - на выходе получится список значений и число элементов будет равно 3, но если вы укажете запрос вида $.messages число элементов будет равно 1, потому что данный запрос указывает на объект в целом, а не на его элементы.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json JSON строка или объект для подсчёта
JSON строка или объект для подсчёта. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для подсчёта
Любой нужный вам запрос JSONPath. Может быть пустым.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns результат подсчёта (Количество элементов).
Примеры :
0 - Нет элементов, удовлетворяющих запросу.
6 - Есть шесть элементов, удовлетворяющих запросу.
*/
function BAS_json_count(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.count(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Изменить значение
* Выполнить запрос JPath и изменить значение объекта.
* Тип возвращаемого объекта будет таким же, как и у оригинальной переменной. Это означает, что если вы укажете строку, будет возвращена строка; если вы вы укажете объект, будет возвращён объект.
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Обратите внимание, в данном действии нельзя использовать сложные пути. Например, изменить или удалить значение с помощью запроса вида $.data[?(@.price == 10)] не получится, так как распознать дочерний элемент в таком виде не представляется возможным.
* Вместо этого, используйте простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида {"name":"John", "data":{"score": 10, "tries": 5}} и мы хотим изменить значение у data.score. Чтобы сделать это, в качестве запроса возьмём строку вида $.data.score или data.score и в качестве значения число, например, 40. В результате мы получим строку вида {"name":"John", "data":{"score": 40, "tries": 5}}. Это также работает с массивами. Например, если вы имеете массив array и хотите изменить первый элемент, используйте запрос вида $.array[0].
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json JSON строка или объект для изменения
JSON строка или объект для изменения значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для изменения значения
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @param {string} value Новое значение для объекта
Новое значение для объекта, удовлетворяющего запросу.
* @returns результат изменения (Модифицированный объект или строка).
*/
function BAS_json_change(json, json_path_query, value) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
const value = _function_argument('value') || value
try {
const result = JPath.change(json, json_path_query, value)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Удалить значение
* Выполнить запрос JPath и удалить значение объекта.
* Тип возвращаемого объекта будет таким же, как и у оригинальной переменной. Это означает, что если вы укажете строку, будет возвращена строка; если вы вы укажете объект, будет возвращён объект.
* JSONPath запрос не должен быть пустым. Если вы хотите изменить формат данных, испольуйте действие Изменить формат.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* JSONPath (JPath) - мощный инструмент для работы с типом данных JSON. Он построен на основе логики, которая очень похожа на XPath, но имеет некоторые ограничения, т.к. сам тип данных намного проще Xml.
* С помощью данной технологии, мы можем быстро получать данные из JavaScript объектов или строк в формате JSON. Кроме того, это сильно упрощает работу, т.к. обычно, чтобы распарсить JSON, требуется писать код.
* Обратите внимание, в данном действии нельзя использовать сложные пути. Например, изменить или удалить значение с помощью запроса вида $.data[?(@.price == 10)] не получится, так как распознать дочерний элемент в таком виде не представляется возможным.
* Вместо этого, используйте простые запросы, как будто вы сами изменяете или удаляете значения в коде. Например, у нас есть строка вида {"name":"John", "data":{"score": 10, "tries": 5}} и мы хотим удалить значение data.score. Чтобы сделать это, в качестве запроса возьмём строку вида $.data.score или data.score. В результате мы получим строку вида {"name":"John", "data":{"tries": 5}}. Это также работает с массивами. Например, если вы имеете массив array и хотите удалить первый элемент, используйте запрос вида $.array[0].
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json JSON строка или объект для удаления
JSON строка или объект для удаления значения. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} json_path_query JSONPath запрос для удаления значения
Любой нужный вам запрос JSONPath.
Примеры :
$.dialogs[*].title - Заголовки всех диалогов.
dialogs[*].title - Заголовки всех диалогов.
$.user.age - Возраст пользователя.
user.age - Возраст пользователя.
$..cart[2] - Третий товар в корзине.
..cart[2] - Третий товар в корзине.
$..cart[-2] - Второй с конца товар в корзине.
..cart[-2] - Второй с конца товар в корзине.
$..* - Все возможные элементы.
..* - Все возможные элементы.
* @returns результат удаления (Модифицированный объект или строка).
*/
function BAS_json_remove(json, json_path_query) {
const json = _function_argument('json') || json
const json_path_query = _function_argument('json_path_query') || json_path_query
try {
const result = JPath.remove(json, json_path_query)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Подходит ли строка под парсинг JSON
* Проверить, что выбранная переменная является допустимой строкой JSON и сохранить результат в переменную.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* С помощью этого действия вы можете убедиться, можно ли использовать строку для парсинга JSON и получения данных, чтобы избежать возможных ошибок.
* Обратите внимание, если вы укажете в качестве переменной для проверки не строку, а переменную любого другого типа - результатом всегда будет false. В этом плане данное действие отличается от JavaScript функции JSON.parse(), так как происходит дополнительная проверка на подходящие типы.
* Например, проверка для строки {"name":"John"} вернет true, т.к. она имеет валидный формат JSON. Строка "name":"John" будет имеет неверную структуру, у неё отсутствуют фигурные скобки, поэтому результатом будет false.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string} json_str JSON строка для проверки
* @returns результат проверки формата (true или false).
*/
function BAS_json_check_format(json_str) {
const json_str = _function_argument('json_str') || json_str
try {
const result = JPath.checkFormat(json_str)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
/**
* Изменить формат
* Изменить формат выбранной JSON строки или объекта и сохранить результат в переменную.
* JSON - текстовый формат обмена данными, сериализации (хранения) объектов, массивов, чисел, строк, логических значений и значения null. Он основывается на синтаксисе JavaScript, однако всё же отличается от него: не каждый код на JavaScript является JSON, и не каждый JSON является кодом на JavaScript.
* Если вы укажете объект неподходящего типа, либо неверный формат, результатом будет тот же объект.
* Используйте действие Подходит ли строка под парсинг JSON, чтобы проверить, что преобразование из строки возможно. Или просто используйте Игнорировать ошибки, чтобы обработать возможные исключения.
* С помощью этого действия вы можете преобразовать строку в формате JSON в объект JavaScript и наоборот.
* Например, при изменении формата строки вида {"name":"John"} будет возвращён объект, содеражий одно свойство - name со значением John
* одобным образом мы можем сделать и обратное преобразование, т.е. сделать из объекта строку в формате JSON. Например, у нас есть объект с двумя параметрами. Один из них - это массив из трёх чисел, другой - это обычная строка. Пусть это будет информация об успеваемости студента за предмет. После преобразования, мы получим JSON строку подобного вида - {"name":"John","grades":[5,5,4]}.
* Помните, что данная функция используется для простого преобразования. Вы можете использовать другие действия как с объектом, так и со строкой. Но всё же рекомендутся сразу обращаться к функциям Получить значение или Получить все значения, если вы хотите собрать особую информацию об объекте или строке в формате JSON.
* Смотрите полную документацию и примеры здесь https://cheshirecaat.github.io/bas-docs/json-path/json-path-ru.html.
* @param {string | Object} json_str JSON строка или объект для изменения
JSON строка или объект для изменения формата. Вы можете указать здесь валидную JSON строку либо объект, тип которого не является простым. К простым типам относятся числа, булевы значения, значение null.
* @param {string} new_format Новый формат данных
Новый формат данных для вашей переменной. Вы можете использовать только два варианта: String или JSON.
* @returns результат изменения формата (объект или строка).
*/
function BAS_json_change_format(json_str, new_format) {
const json_str = _function_argument('json_str') || json_str
const new_format = _function_argument('new_format') || new_format
try {
const result = JPath.changeFormat(json_str, new_format)
_function_return(result)
return result
} catch (e) {
fail(e)
}
}
