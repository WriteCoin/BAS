const get_string_functions = (f) => {
	/**
* Является ли строкой
* Проверить, являются ли указанные данные строкой.
* Это действие вернет true или false в зависимости от того, являются ли указанные данные строкой. Результат может быть использован вместе с действием "If".
* Например, если указано "Тестовый текст", то действие вернет true, а если укзано 123 или true, то действие вернет false.
*
* @param data Данные
Данные, которые нужно проверить на то являются ли они строкой.
Примеры :
Просто пример текста - Строка
Пустая строка - Строка
123 - Не строка
null - Не строка
* @returns true или false в зависимости от того, являются ли указанные данные строкой.
Примеры :
true - Данные являются строкой.
false - Данные не являются строкой.
*/
const BAS_is_string = async (data) => await f("BAS_is_string", { data })

	/**
* Не пустая строка
* Проверить, являются ли указанные данные не пустой строкой.
* Это действие вернет true или false в зависимости от того, являются ли указанные данные не пустой строкой. Результат может быть использован вместе с действием "If".
* Например, если указано "Тестовый текст", то действие вернет true, а если укзано "" или 123, то действие вернет false.
*
* @param data Данные
Данные, которые нужно проверить на то являются ли они не пустой строкой.
Примеры :
Просто пример текста - Не пустая строка
"" - Пустая строка
@returns true или false в зависимости от того, являются ли указанные данные не пустой строкой.
Примеры :
true - Не пустая строка.
false - Пустая строка или не строка.
*/
const BAS_is_not_empty_string = async (data) => await f("BAS_is_not_empty_string", { data })

	/**
* В строку
* Преобразовать указанные данные в строку.
* Это действие вернет строковое представление указанных данных.
* Это действие работает с любым типом данных.
* Например, если указано 123, то действие вернет "123", а если укзано true, то действие вернет "true".
* @param data Данные
Данные, которые нужно преобразовать в строку.
Примеры :
123 - Число
true - Булевый тип
{"text":"Test text","num":123} - Объект
Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time) - Дата
@returns строковое представление указанных данных.
Примеры :
123
true
{"text":"Test text","num":123}
Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time)
*/
const BAS_to_string = async (data) => await f("BAS_to_string", { data })

	/**
* В число
* Преобразовать указанную строку в число.
* Это действие вернет числовое представление указанной строки.
* Например, если указано "123", то действие вернет 123, а если укзано "123.45", то действие вернет 123.45.
* Итоговое число можно округлить, указав параметр "Количество знаков в дробной части", находящийся в дополнительных настройках.
* Это действие может преобразовывать числа в нестандартном формате для этого нужно указать параметры "Разделитель целой и дробной части" и "Разделитель тысячных" находящиеся в дополнительных настройках.
* Например, строка "1 967 567,3245" будет преобразована в число 1967567.3245, если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
*
* @param str Строка
Строка, которую нужно преобразовать в число.
Примеры :
123
100,000
1,456.578
* @param dec Количество знаков в дробной части
Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
Примеры :
4 - 156.6439
2 - 21.78
0 - Округлить до целого числа
-1 - Не округлять число
Пустая строка - Не округлять число
* @param dsep Разделитель целой и дробной части
Необязательный параметр. Разделитель между целой и дробной частями числа.
Примеры :
"." - 156.6439
"," - 156,6439
Пустая строка - "." - 156.6439
* @param tsep Разделитель тысячных
Необязательный параметр. Разделитель между тысячными.
Примеры :
" " - 1 000 000.01
"," - 1,000,000.01
Пустая строка - "," - 1,000,000.01
* @returns числовое представление указанной строки.
Примеры :
123
100000
1456.578
*/
const BAS_to_number = async (str, dec, dsep, tsep) => await f("BAS_to_number", { str, dec, dsep, tsep })

	/**
* Форматировать число
* Форматировать и преобразовать в строку указанное число.
* Данным действием можно привести число в более читабельный вид, например, для дальнейшего вывода в лог.
* Перед форматирование число можно округлить, указав параметр "Количество знаков в дробной части".
* Это действие вернет форматированное строковое представление указанного числа.
* Например, число 1967567.3245 будет преобразована в строку "1 967 567,3245", если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
*
* @param num Число
Число, которое нужно форматировать и преобразовать в строку.
Примеры :
123
100000
1456.578
* @param dec Количество знаков в дробной части. Может быть пустым
Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
Примеры :
4 - 156.6439
2 - 21.78
0 - Округлить до целого числа
-1 - Не округлять число
Пустая строка - Не округлять число
* @param digits Минимальное количество символов в числе. Может быть пустым
Необязательный параметр. Минимальное количество символов в числе. Если количество символов меньше указанного числа, то в место недостающих символов перед числом будут добавлены нули.
Примеры :
4 - 0321
2 - 01
0 - Не изменять количество символов
Пустая строка - Не изменять количество символов
* @param dsep Разделитель целой и дробной части. Может быть пустым
Необязательный параметр. Разделитель между целой и дробной частями числа.
Примеры :
"." - 156.6439
"," - 156,6439
Пустая строка - "." - 156.6439
* @param tsep Разделитель тысячных. Может быть пустым
Необязательный параметр. Разделитель между тысячными.
Примеры :
" " - 1 000 000.01
"," - 1,000,000.01
Пустая строка - "," - 1,000,000.01
* @returns форматированное строковое представление указанного числа.
Примеры :
123
100,000
1,456.578
*/
const BAS_number_format = async (num, dec, digits, dsep, tsep) => await f("BAS_number_format", { num, dec, digits, dsep, tsep })

	/**
* Количество подстрок
* Получить количество подстрок в строке.
* Это действие вернет число, равное количеству подстрок в строке.
* Например, если указана строка "Тестовый текст" и подстрока "те", то действие вернет 2, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет 1.
*
* @param str Строка
Строка, из которой нужно получить количество подстрок.
Примеры :
Просто пример текста
Test text
string
* @param sub Подстрока
Непустая связная часть строки.
Примеры :
пример
text
str
@returns количество подстрок в строке.
Примеры :
5
2
0 - Подстрока отсутствует в строке.
*/
const BAS_count_substrings = async (str, sub) => await f("BAS_count_substrings", { str, sub })

	/**
* Получить подстроку
* Получить подстроку из строки.
* Это действие вернет полученную подстроку.
* Например, чтобы получить из строки "Просто пример строки" подстроку "пример", нужно в параметр "С индекса" указать 7, а в парамет "До индекса" указть 13.
* Если параметры "С индекса" и "До индекса" не указаны, будут получена вся строка.
* Если параметр "С индекса" указан, а параметр "До индекса" не указан, будут получены все символы с указанного до конца строки.
* Если параметр "С индекса" не указан, а параметр "До индекса" указан, будут получены все символы с первого до указанного.
* Если оба параметра "С индекса" и "До индекса" указаны, будут получены все символы с указанного до указанного.
* Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
*
* @param str Строка
Строка, из которой нужно получить подстроку.
Примеры :
Просто пример текста
Test text
string
* @param from С индекса. Может быть пустым
Индекс символа, с которого начинается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
Примеры :
1 - С второго символа
0 - С первого символа
-1 - С последнего символа
Пустая строка - С начала строки
* @param to До индекса. Может быть пустым
Индекс символа, которым заканчивается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
Примеры :
1 - До второго символа
0 - До первого символа
-1 - До последнего символа
Пустая строка - До конца строки
@returns подстрока.
Примеры :
пример
text
str
*
*/
const BAS_get_substring = async (str, from, to) => await f("BAS_get_substring", { str, from, to })

	/**
* Получить подстроку между
* Получить подстроку между двумя подстроками.
* Это действие вернет полученную подстроку.
* Например, чтобы получить из строки "<h1>Заголовок текста</h1>" подстроку "Заголовок текста", нужно в параметр "Левая подстрока" указать "<h1>", а в парамет "Правая подстрока" указть "</h1>".
* Если параметры "Левая подстрока" и "Правая подстрока" не указаны, будут получена вся строка.
* Если параметр "Левая подстрока" указан, а параметр "Правая подстрока" не указан, будут получены все символы от указанной подстроки до конца строки.
* Если параметр "Левая подстрока" не указан, а параметр "Правая подстрока" указан, будут получены все символы с первого до указанной подстрки.
* Если оба параметра "Левая подстрока" и "Правая подстрока" указаны, будут получены все символы от указанной подстроки до указанной подстрки.
*
* @param str Строка
Строка, из которой нужно получить подстроку.
Примеры :
Просто пример текста
Test text
string
* @param left Левая подстрока. Может быть пустым
Подстрока находящаяся слева от подстроки которую нужно получить.
Примеры :
(
<a>
<p>
<span>
Пустая строка - С начала строки
* @param right Правая подстрока. Может быть пустым
Подстрока находящаяся справа от подстроки которую нужно получить.
Примеры :
)
</a>
</p>
</span>
Пустая строка - До конца строки
@returns подстрока.
Примеры :
пример
text
str
*/
const BAS_get_substring_between = async (str, left, right) => await f("BAS_get_substring_between", { str, left, right })

	/**
* Удалить часть строки
* Удалите часть строки и/или вставьте новую.
* Это действие может либо удалить часть строки, либо вставить новую часть, либо все одновременно.
* Это действие вернет строку, полученную в итоге выполнения всех манипуляций.
* Чтобы только удалить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, а параметр "Вставляемая подстрока" не указывать.
* Например, если указана строка "Тест текст", индекс 0 и количество символов 5, то действие вернет "текст".
* Чтобы только вставить, нужно указать параметр "Вставляемая подстрока", а в параметр "Количество удаляемых символов" указать ноль.
* Например, если указана строка "Просто строки", индекс 7, количество символов 0 и подстрока "пример ", то действие вернет "Просто пример строки".
* Чтобы удалить и вставить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, и указать параметр "Вставляемая подстрока".
* Например, если указана строка "Тест не текст", индекс 5, количество символов 2 и подстрока "новый", то действие вернет "Тест новый текст".
* Если вам нужно только вставить подстроку, то вы можете использовать действие "Вставить в".
*
* @param str Строка
Строка, из которой нужно удалить часть и/или добавить новую.
Примеры :
Просто пример текста
Test text
string
* @param from С индекса. Может быть пустым
Индекс символа, с которого начинается изменение строки. Если отрицателен, то указывает смещение от конца строки.
Примеры :
1 - С второго символа
0 - С первого символа
-1 - С последнего символа
Пустая строка - С начала строки
* @param count Количество удаляемых символов
Количество символов, которые будут удалены.
Примеры :
4
2
0 - Не удалять символы
* @param add Вставляемая подстрока. Может быть пустым
Необязательный параметр. Подстрока, которая будет вставлена вместо удаленной части.
Примеры :
пример
text
str
Пустая строка - Не вставить подстроку
@returns итоговая строка.
Примеры :
пример текста
New text
Test string
*/
const BAS_splice_string = async (str, from, count, add) => await f("BAS_splice_string", { str, from, count, add })

	/**
* В нижний регистр
* Преобразовать все буквы строки в нижний регистр.
* Это действие вернет строку, в которой все буквы будут иметь нижний регистр, а остальные символы останутся без изменений.
* Например строка "ТЕСТ" будет преобразована в строку "тест", а строка "Пример Строки" будет преобразована в строку "пример строки".
* Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
*
* @param str Строка
Строка, которую нужно преобразовать в нижний регистр.
Примеры :
Просто пример текста
Test Text
STRING
@returns преобразованная строка.
Примеры :
просто пример текста
test text
string
*/
const BAS_to_lower_case = async (str) => await f("BAS_to_lower_case", { str })

	/**
* В верхний регистр
* Преобразовать все буквы строки в верхний регистр.
* Это действие вернет строку, в которой все буквы будут иметь верхний регистр, а остальные символы останутся без изменений.
* Например строка "тест" будет преобразована в строку "ТЕСТ", а строка "пример строки" будет преобразована в строку "ПРИМЕР СТРОКИ".
* Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
*
* @param str Строка
Строка, которую нужно преобразовать в верхний регистр.
Примеры :
Просто пример текста
Test text
string
@returns преобразованная строка.
Примеры :
ПРОСТО ПРИМЕР ТЕКСТА
TEST TEXT
STRING
*/
const BAS_to_upper_case = async (str) => await f("BAS_to_upper_case", { str })

	/**
* Содержит
* Проверить, содержит ли строка подстроку.
* Это действие вернет true или false в зависимости от того, содержит ли строка подстроку. Результат может быть использован вместе с действием "If".
* Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет false.
* По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
*
* @param str Строка
Строка, в которой нужно проверить содержание подстроки.
Примеры :
Просто пример текста
Test text
string
* @param sub Подстрока
Подстрока, содержание которой нужно проверить.
Примеры :
пример
text
str
* @param from С индекса
Необязательный параметр. Индекс символа, с которого следует начать поиск.
Примеры :
1 - С второго символа
0 - С первого символа
Пустая строка - С начала строки
@returns true или false в зависимости от того, содержит ли строка подстроку.
Примеры :
true - Строка содержит подстроку.
false - Строка не содержит подстроку.
*/
const BAS_string_contains = async (str, sub, from) => await f("BAS_string_contains", { str, sub, from })

	/**
* Получить длину
* Получить количество символов из строки.
* Это действие вернет число, равное количеству символов в строке.
* Например, если указана строка "Тестовый текст", то действие вернет 14, а если указана строка "Просто пример строки", то действие вернет 20.
*
* @param str Строка
Строка, из которой нужно получить количество символов.
Примеры :
Просто пример текста
Test text
string
@returns количество символов, содержащихся в строке.
Примеры :
5
2
0 - Пустая строка
*/
const BAS_string_length = async (str) => await f("BAS_string_length", { str })

	/**
* Слово с большой буквы
* Преобразовать первую букву слова в верхний регистр.
* Это действие вернет строку, в которой первая буква будут иметь верхний регистр, а остальные останутся без изменений.
* Например, если указана строка "тестовый текст", то действие вернет "Тестовый текст", а если указана строка "просто пример строки", то действие вернет "Просто пример строки".
* Если активирован параметр "Сделать все слова заглавными", то первые буквы во всех словах будут иметь верхний регистр.
* Например, если указана строка "тестовый текст", то действие вернет "Тестовый Текст", а если указана строка "просто пример строки", то действие вернет "Просто Пример Строки".
* Если активирован параметр "Все остальные буквы в нижний регистр", то все буквы, которые не были преобразованы в верхний регистр, будут преобразованы в нижний регистр.
* Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто пример строки".
* Если активированы оба параметра "Сделать все слова заглавными" и "Все остальные буквы в нижний регистр", то первые буквы во всех словах будут иметь верхний регистр, а все остальные нижний регистр.
* Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый Текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто Пример Строки".
*
* @param str Строка
Строка, в которой нужно преобразовать слова.
Примеры :
просто пример текста
test text
string
* @param all Сделать все слова заглавными
* @param lower Все остальные буквы в нижний регистр
* @returns преобразованная строка.
Примеры :
Просто пример текста
Test Text
String
*/
const BAS_capitalize = async (str, all, lower) => await f("BAS_capitalize", { str, all, lower })

	/**
* Количество слов
* Получить количество слов из строки.
* Это действие вернет число, равное количеству слов в строке.
* Например, если указана строка "Тестовый текст", то действие вернет 2, а если указана строка "Просто пример строки", то действие вернет 3.
*
* @param str Строка
Строка, из которой нужно получить количество слов.
Примеры :
Просто пример текста
Test text
string
@returns количество слов, содержащихся в строке.
Примеры :
5
2
0 - Строка не содержит слов
*/
const BAS_count_words = async (str) => await f("BAS_count_words", { str })

	/**
* Разделить предложение на слова
* Разделить строку на слова.
* Это действие вернет список, содержащий слова, полученные из строки.
* Например, если указана строка "Тестовый текст", то действие вернет ["Тестовый","текст"], а если указана строка "Просто пример строки.", то действие вернет ["Просто","пример","строки"].
* Это действие игнорирует любые символы, кроме букв и цифр.
* Например, если указана строка "Вкусный 100% сок.", то действие вернет ["Вкусный", "100", "сок"].
* Список можно обработать с помощью действий из модуля "Список".
*
* @param str Строка
Строка, содержащая предложение, которое нужно разделить на слова.
Примеры :
Просто пример текста
Test text
string
@returns список слов.
Примеры :
["Просто", "пример", "текста"]
["Test", "text"]
["string"]
*/
const BAS_words = async (str) => await f("BAS_words", { str })

	/**
* Разделить текст на предложения
* Разделить строку на предложения.
* Это действие вернет список, содержащий предложения, полученные из строки.
* Например, если указана строка "Просто пример текста. Тестовый текст, строка", то действие вернет ["Просто пример текста.","Тестовый текст, строка"], а если указана строка "Тестовый текст! Тестовый текст! Тестовый текст!", то действие вернет ["Тестовый текст!","Тестовый текст!","Тестовый текст!"].
* Список можно обработать с помощью действий из модуля "Список".
*
* @param str Строка
Строка, содержащая текст, который нужно разделить на предложения.
Примеры :
Просто пример текста. Тестовый текст, строка
Test text! Test text! Test text!
string
@returns список предложений.
Примеры :
["Просто пример текста.", "Тестовый текст, строка"]
["Test text!", "Test text!", "Test text!"]
["string"]
*/
const BAS_sentences = async (str) => await f("BAS_sentences", { str })

	/**
* Найти подстроку
* Найти подстроку в строке.
* Это действие вернет число, равное индексу начала первой найденной подстроки, или -1, если подстрока не найдена.
* Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет 9, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет -1.
* По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
*
* @param str Строка
Строка, в которой нужно найти подстроку.
Примеры :
Просто пример текста
Test text
string
* @param sub Подстрока
Подстрока, которую нужно найти в строке.
Примеры :
пример
text
str
* @param from С индекса
Необязательный параметр. Индекс символа, с которого следует начать поиск.
Примеры :
1 - С второго символа
0 - С первого символа
Пустая строка - С начала строки
@returns индекс начала подстроки.
Примеры :
0
3
5
-1 - Строка не содержит указанную подстроку
*/
const BAS_find_substring = async (str, sub, from) => await f("BAS_find_substring", { str, sub, from })

	/**
* Начинается с
* Проверить, начинается ли строка с указанной подстроки.
* Это действие вернет true или false в зависимости от того, начинается ли строка с указанной подстроки. Результат может быть использован вместе с действием "If".
* Например, если указана строка "Тестовый текст" и подстрока "Тестовый", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
* По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
*
* @param str Строка
Строка, которую нужно проверить.
Примеры :
Просто пример текста
Test text
string
* @param sub Подстрока
Подстрока, с которой должна начинатся строка.
Примеры :
пример
text
str
* @param from С индекса
Необязательный параметр. Индекс символа, с которого следует начать поиск.
Примеры :
1 - С второго символа
0 - С первого символа
Пустая строка - С начала строки
@returns true или false в зависимости от того, начинается ли строка с указанной подстроки.
Примеры :
true - Строка начинается с подстроки.
false - Строка не начинается с подстроки.
*/
const BAS_starts_with = async (str, sub, from) => await f("BAS_starts_with", { str, sub, from })

	/**
* Заканчивается на
* Проверить, заканчивается ли строка указанной подстрокой.
* Это действие вернет true или false в зависимости от того, заканчиваться ли строка указанной подстрокой. Результат может быть использован вместе с действием "If".
* Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
* По умолчанию поиск производится с конца строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "Длина", находящийся в дополнительных настройках.
*
* @param str Строка
Строка, которую нужно проверить.
Примеры :
Просто пример текста
Test text
string
* @param sub Подстрока
Подстрока, которой должна заканчиваться строка.
Примеры :
пример
text
str
* @param length Длина
Необязательный параметр. Длина, до которой будет обрезана строка при поиске подстроки, позволяет искать внутри строки.
Примеры :
10
5
Пустая строка - Длина строки
@returns true или false в зависимости от того, заканчиваться ли строка указанной подстрокой.
Примеры :
true - Строка заканчивается подстрокой.
false - Строка не заканчивается подстрокой.
*/
const BAS_ends_with = async (str, sub, length) => await f("BAS_ends_with", { str, sub, length })

	/**
* Вставить в
* Вставить подстроку в строку.
* Это действие вернет строку, полученную в итоге вставки подстроки.
* Например, если указана строка "Просто строки", подстрока "пример " и индекс 7, то действие вернет "Просто пример строки".
* Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
* Если вам нужно не только вставить подстроку, но и удалить часть исходной строки, то используйте действие "Удалить часть строки".
*
* @param str Строка
Строка, в которую нужно вставить подстроку.
Примеры :
Просто пример текста
Test text
string
* @param index Индекс. Может быть пустым
Индекс символа, после которого будет вставлена подстрока. Если отрицателен, то указывает смещение от конца строки.
Примеры :
1 - После второго символа
0 - После первого символа
-1 - После последнего символа
Пустая строка - В начало строки
* @param sub Вставляемая подстрока
Подстрока, которую нужно вставить.
Примеры :
не
good
New
Пустая строка - Не вставить подстроку
@returns итоговая строка.
Примеры :
Просто не пример текста
Test good text
New string
*/
const BAS_insert_substring = async (str, index, sub) => await f("BAS_insert_substring", { str, index, sub })

	/**
* Base64 кодировать
* Кодирует строку в base64.
* Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
*
* @param string Данные
В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
Примеры :
any text - Любая строка. Работает в режиме encode
YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
@returns строка в формате base64
*/
const BAS_base64_encode = async (string) => await f("BAS_base64_encode", { string })

	/**
* Base64 декодировать
* Декодирует строку в base64.
* Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
* В большинстве случаев вам не нужно декодировать base64 строки, некоторые действия принимают входные данные прямо в формате base64, это такие действия как: "Запись В Файл", "Начать работу с изображением". Более того, если вы попытаетесь декодировать бинарные данные, закодированные как base64, результат может быть поврежден, поэтому лучше использовать строку в формате base64 без декодирования.
*
* @param string Данные
В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
Примеры :
any text - Любая строка. Работает в режиме encode
YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
@returns результат декодирования
*/
const BAS_base64_decode = async (string) => await f("BAS_base64_decode", { string })

	/**
* Шаблон
* Создать новую переменную или изменить существующую на многострочный текст. Может заменять спинтакс, ресурсы, переменные на их значения. Действие может использоваться для загрузки шаблона из файла или его динамической генерации. Оно лучше всего подходит, если нужно генерировать текст для постинга.
* Это действие получает текст из многострочного текстового поля "Шаблон" и сохраняет его в переменную, определенной в параметре "Переменная, в которую сохранять результат". И это все, что делает это действие, если только текст не содержит специальных значений. Вот их список:
* Переменные VAR_VARIABLE будут заменены на их значения.
* Ресурсы \{\{resource\}\} также будут заменены на их значения.
* Спинтакс {value1|value2} будет заменен на одно из значений value1 или value2.
* <AnyLetter> - будет заменено на любую букву.
* <AnyDigit> - будет заменено на любую цифру.
* <ELowVow> - тоже самое, что {a|e|i|o|u}
* <EUpVow> - тоже самое, что {a|e|i|o|u}
* <ELowCons> - тоже самое, что {b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z}
* <EUpCons> - тоже самое, что {B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z}
* <EUp> - тоже самое, что {<EUpVow>|<EUpCons>}
* <ELow> - тоже самое, что {<ELowVow>|<ELowCons>}
* <EFemName> - английские женские имена начинающиеся с заглавной буквы.
* <EFemNameLow> - английские женские имена.
* <EMaleName> - английские мужские имена начинающиеся с заглавной буквы.
* <EMaleNameLow> - английские мужские имена.
* <ESurname> - английские фамилии имена начинающиеся с заглавной буквы.
* <ESurnameLow> - английские фамилии.
* Если выбрана установка "Дополнительная обработка", то это действие будет работать с динамическим шаблоном, т. е. шаблон будет взят из переменной. Рассмотрим следующий пример: у вас есть файл с содержанием "{Hello|Hi}, <EMaleName> {!|}" и вам нужно его обработать с помощью BAS. Сначала нужно загрузить файл в переменную VAR_FILE_CONTENT. Если вы поместите VAR_FILE_CONTENT в действие "шаблон" и не устанавливаете флаг "Дополнительная обработка", то результат будет таким же, как и исходное содержимое файла. Но если вы установите этот флаг, BAS сначала заменит переменную VAR_FILE_CONTENT на содержание файла, а затем проведет замену переменых, спинтакса и ресурсов уже в содержании файла. Наконец, результат будет похож на "Hi, John!".
*
* @param text Шаблон
Значение переменной
Примеры :
any string - Любая строка
VAR_LOGIN:VAR_PASSWORD - Соеденить 2 строки
{Hi|Hello}, John! - Спинтакс
<EMaleName> - Будет заменено мужским именем
{a{1|2|3}|} - a1, a2, a3 или пустая строка
*/
const BAS_spintax = async (text) => await f("BAS_spintax", { text })

	/**
* Заменить строку
* Это действие ищет в строке, определенной с помощью параметра "Оригинальная Строка", значения, определенные с помощью параметра "Заменить Из", и заменяет их на значение определенное с помощью параметра "Заменить На".
* Это действие заменяет все вхождения, а не только самое первое.
* Используйте действие "Заменить строку" из модуля "Регулярные выражения" для замены с помощью регулярного выражения.
*
* @param str Оригинальная Строка
Строка, в которой будет выполнена замена
* @param from Заменить Из
Строка для поиска
* @param to Заменить На
Новое значение
@returns копия оригинальной строки с проведенной заменой
*/
const BAS_replace_string = async (str, from, to) => await f("BAS_replace_string", { str, from, to })

	/**
* Случайная строка
* Сгенерировать случайную строку с заданной длиной и разрешенными символами.
* @param length Длина Генерируемой Строки
* @param chars Разрешенные Символы
*/
const BAS_random_string = async (length, chars) => await f("BAS_random_string", { length, chars })

	/**
* Латинизировать
* Преобразуйте все буквы в латиницу.
* Это действие вернет строку, в которой все буквы будут латинизированы, а остальные символы останутся без изменений.
* Например строка "ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů" будет преобразована в строку "ExAmPlE aeiouycdenrstzu", а строка "Привет мир!" будет преобразована в строку "Privet mir!".
* По умолчанию кириллица тоже латинизируется, но это можно изменить, отключив параметр "Латинизировать кириллицу".
*
* @param str Строка
Строка, которую нужно латинизировать.
Примеры :
ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů
Привет мир!
Просто пример текста
* @param ciryllic Латинизировать кириллицу
@returns преобразованная строка.
Примеры :
ExAmPlE aeiouycdenrstzu
Privet mir!
Prosto primer teksta
*/
const BAS_latinize = async (str, ciryllic) => await f("BAS_latinize", { str, ciryllic })

	/**
* Склонять
* Склонять слово в зависимости от указанного числа.
* Это действие вернет одно из трех слов, подходящее по склонению к указанному числу.
* Например, если указаны слова "аккаунт", "аккаунта", "аккаунтов" и число равно 5, то действие вернет "аккаунтов", а если число равно 22, то действие вернет "аккаунта".
*
* @param num Число
Число, по которому будет определяется склонение возвращаемого слова.
Примеры :
123
100000
1456.578
* @param words [
Слово при 1
Слово, если число равно 1.
Примеры :
минута
год
аккаунт,
Слово при 2
Слово, если число равно 2.
Примеры :
минуты
года
аккаунта,
Слово при 5
Слово, если число равно 5.
Примеры :
минут
лет
аккаунтов
* ]
@returns слово, сответствующее указанному числу.
Примеры :
минута - при 21
лет - при 10
аккаунта - при 22
*/
const BAS_declination = async (num, words) => await f("BAS_declination", { num, words })

	/**
* Извлечь все почты
* Извлечь все адреса электронной почты из строки.
* Это действие вернет список, содержащий адреса электронной почты, полученные из строки.
* Например, если указана строка "Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.", то действие вернет ["test@gmail.com", "example@gmail.com"].
* Список можно обработать с помощью действий из модуля "Список".
*
* @param str Строка
Строка, из которой нужно извлечь адреса электронной почты.
Примеры :
Предложения по сотрудничеству вы можете присылать на почту: cooperation@marketplace.com
Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.
Предложения по рекламе, вы можете отправлять на почту: ad@site.com
Предложения по улучшению сайта вы можете отправлять на почту: feedback@site.com
Чтобы получить помощь в решении проблем с сайтом, вы можете написать на почту: support@site.com
@returns список адресов электронной почты.
Примеры :
["cooperation@marketplace.com"]
["test@gmail.com", "example@gmail.com"]
["ad@site.com", "feedback@site.com", "support@site.com"]
*/
const BAS_extract_emails = async (str) => await f("BAS_extract_emails", { str })

	/**
* Извлечь все ссылки
* Извлечь все ссылки из строки.
* Это действие вернет список, содержащий ссылки, полученные из строки.
* Например, если указана строка "Тестовый текст http://test.com, строка тест example.org", то действие вернет ["http://test.com", "example.org"].
* Список можно обработать с помощью действий из модуля "Список".
* Распарсить ссылку на элементы можно с помощью действия "Парсить URL" из модуля "URL".
*
* @param str Строка
Строка, из которой нужно извлечь ссылки.
Примеры :
Купить товар вы можете по ссылке - https://marketplace.biz/section_3/product_213234.php
Тестовый текст http://test.com, строка тест example.org
Реклама -> http://www.ad.by/info, обратная связь -> www.feedback.io, поддержка -> https://support.co/new/ticket.php
@returns список ссылок.
Примеры :
["https://marketplace.biz/section_3/product_213234.php"]
["http://test.com", "example.org"]
["http://www.ad.by", "www.feedback.io", "https://support.co/new/ticket.php"]
*/
const BAS_extract_urls = async (str) => await f("BAS_extract_urls", { str })

	/**
* Извлечь все телефонные номера
* Извлечь все телефонные номера из строки.
* Это действие вернет список, содержащий телефонные номера, полученные из строки.
* Например, если указана строка "Тестовый текст - 89001112233. Просто пример текста - +7 900 999 4455.", то действие вернет ["89001112233", "+7 900 999 4455"].
* Список можно обработать с помощью действий из модуля "Список".
*
* @param str Строка
Строка, из которой нужно извлечь телефонные номера.
Примеры :
Здравствуйте, мой номер +1 323 123-4567
Деловые вопросы/пресса: Александра +7 900 000-00-00
PR: Мария +7(900)000-00-01 | Агент 1: Валерия +7(900)000-00-02 | Агент 2: Екатерина +7(900)00-00-03
@returns список телефонных номеров.
Примеры :
["+1 323 123-4567"]
["+7 900 000-00-00"]
["+7(900)000-00-01", "+7(900)000-00-02", "+7(900)00-00-03"]
*/
const BAS_extract_phone_numbers = async (str) => await f("BAS_extract_phone_numbers", { str })

	/**
* Специальные HTML символы кодировать
* Кодирует строку содержащую специальные HTML символы.
*
* @param str Строка
* @returns закодированная строка
*/
const BAS_escape_html = async (str) => await f("BAS_escape_html", { str })

	/**
* Специальные HTML символы декодировать
* Декодирует строку содержащую специальные HTML символы.
*
* @param str Строка
* @returns результат декодирования
*/
const BAS_unescape_html = async (str) => await f("BAS_unescape_html", { str })

	/**
* Base64 кодировать/декодировать
* Кодирует или декодирует строку в base64.
* Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
* В большинстве случаев вам не нужно декодировать base64 строки, некоторые действия принимают входные данные прямо в формате base64, это такие действия как: "Запись В Файл", "Начать работу с изображением". Более того, если вы попытаетесь декодировать бинарные данные, закодированные как base64, результат может быть поврежден, поэтому лучше использовать строку в формате base64 без декодирования.
* Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
*
* @param {string} str Данные
В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
Примеры :
any text - Любая строка. Работает в режиме encode
YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
VAR_FILE_CONTENT - Переменная, которая содержит результат чтения файла. Работает в режиме decode
* @param {boolean} encode Шифровать или расшифровывать
* @returns строка в формате base64 в случае использования режима encode и результат декодирования при использовании режима decode.
*/
const BAS_base64 = async (str, encode) => await f("BAS_base64", { str, encode })

	/**
* Шаблон (BAS-функция)
* Создать новую переменную или изменить существующую на многострочный текст. Может заменять спинтакс, ресурсы, переменные на их значения. Действие может использоваться для загрузки шаблона из файла или его динамической генерации. Оно лучше всего подходит, если нужно генерировать текст для постинга.
* Это действие получает текст из многострочного текстового поля "Шаблон" и сохраняет его в переменную, определенной в параметре "Переменная, в которую сохранять результат". И это все, что делает это действие, если только текст не содержит специальных значений. Вот их список:
* Переменные VAR_VARIABLE будут заменены на их значения.
* Ресурсы \{\{resource\}\} также будут заменены на их значения.
* Спинтакс {value1|value2} будет заменен на одно из значений value1 или value2.
* <AnyLetter> - будет заменено на любую букву.
* <AnyDigit> - будет заменено на любую цифру.
* <ELowVow> - тоже самое, что {a|e|i|o|u}
* <EUpVow> - тоже самое, что {a|e|i|o|u}
* <ELowCons> - тоже самое, что {b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z}
* <EUpCons> - тоже самое, что {B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z}
* <EUp> - тоже самое, что {<EUpVow>|<EUpCons>}
* <ELow> - тоже самое, что {<ELowVow>|<ELowCons>}
* <EFemName> - английские женские имена начинающиеся с заглавной буквы.
* <EFemNameLow> - английские женские имена.
* <EMaleName> - английские мужские имена начинающиеся с заглавной буквы.
* <EMaleNameLow> - английские мужские имена.
* <ESurname> - английские фамилии имена начинающиеся с заглавной буквы.
* <ESurnameLow> - английские фамилии.
* Если выбрана установка "Дополнительная обработка", то это действие будет работать с динамическим шаблоном, т. е. шаблон будет взят из переменной. Рассмотрим следующий пример: у вас есть файл с содержанием "{Hello|Hi}, <EMaleName> {!|}" и вам нужно его обработать с помощью BAS. Сначала нужно загрузить файл в переменную VAR_FILE_CONTENT. Если вы поместите VAR_FILE_CONTENT в действие "шаблон" и не устанавливаете флаг "Дополнительная обработка", то результат будет таким же, как и исходное содержимое файла. Но если вы установите этот флаг, BAS сначала заменит переменную VAR_FILE_CONTENT на содержание файла, а затем проведет замену переменых, спинтакса и ресурсов уже в содержании файла. Наконец, результат будет похож на "Hi, John!".
*
* @param {string} template Шаблон
Значение переменной
Примеры :
any string - Любая строка
VAR_LOGIN:VAR_PASSWORD - Соеденить 2 строки
{Hi|Hello}, John! - Спинтакс
<EMaleName> - Будет заменено мужским именем
{a{1|2|3}|} - a1, a2, a3 или пустая строка
@returns string
*/
const BAS_template = async (params) => await f("BAS_template", params || {})

	/**
* Объединить строки
* Объединить несколько строк в одну.
* Это действие вернет строку, составленную из всех указанных строк.
* Например, если указаны параметры "Строка 1" и "Строка 2" значения которых сответственно равны "Просто пример" и " строки", то действие вернет "Просто пример строки".
* Строки из отдельных полей и списка складываются в общий список строк которые будут объединены.
* Например, если в поле "Строка 1" указана строка и в поле "Список строк" указан список из 4 строк, то объединено будет 5 строк.
* Если какие-то из параметров ("Строка 1", "Строка 2", "Строка 3", "Список строк") не указаны, будут использованы все параметры кроме них.
* Например, если "Список строк" не указан, то список будет сформирован из параметров "Строка 1" и "Строка 2" и "Строка 3". Если параметры "Строка 1", "Строка 2", "Строка 3" пусты, то будет использован "Список строк". Если указаны все параметры, то все они будут использованы.
* Порядок объединения полей следующий: "Строка 1", "Строка 2", "Строка 3", "Список строк".
* Список можно создать с помощью действий из модуля "Список".
* По умолчанию строки соединяются без разделителя, но это можно изменить, указав параметр "Разделитель", находящийся в дополнительных настройках.
*
* @param {string} str1 Строка 1. Может быть пустым
Строка, которую нужно объединить с другими строками.
Примеры :
Просто пример текста
Test text
string
Пустая строка - Будут использованы параметры "Строка 2", "Строка 3", "Список строк"
* @param {string} str2 Строка 2. Может быть пустым
Строка, которую нужно объединить с другими строками.
Примеры :
Просто пример текста
Test text
string
Пустая строка - Будут использованы параметры "Строка 1", "Строка 3", "Список строк"
* @param {string} str3 Строка 3. Может быть пустым
Строка, которую нужно объединить с другими строками.
Примеры :
Просто пример текста
Test text
string
Пустая строка - Будут использованы параметры "Строка 1", "Строка 2", "Список строк"
* @param {Array<string>} listStr Список строк. Может быть пустым
Список строк которые нужно объединить. В качестве списка можно использовать строку, состоящую из строк, разделенных запятыми.
Примеры :
Just sample text,Test text,string
Just sample text, Test text, string
["Just sample text", "Test text", "string"]
Пустая строка - Будут использованы параметры "Строка 1", "Строка 2", "Строка 3"
* @param {string} sep Разделитель
Необязательный параметр. Разделитель, вставляемый между объединенными строками.
Примеры :
"," - Просто пример текста,Test text,string
" " - Просто пример текста Test text string
", " - Просто пример текста, Test text, string
Пустая строка - Объединить строки без разделителя
* @returns итоговая строка.
Примеры :
String1String2String3
Text test string
TestTest
*/
const BAS_join_strings = async (str1, str2, str3, listStr, sep) => await f("BAS_join_strings", { str1, str2, str3, listStr, sep })

	/**
* Парсить CSV строку
* Распарсить CSV строку на элементы.
* Это действие распарсит строку по указанным разделителям и сохранит распарсенные данные по указанным переменным.
* Например, если указана строка "email@gmail.com:mypass1" и переменные USERNAME,PASSWORD, то действие сохранит "email@gmail.com" в переменную VAR_USERNAME и "mypass1" в переменную VAR_PASSWORD.
* По умолчанию действие возвращает строки, но это можно изменить, включив параметр "Преобразовывать типы", находящийся в дополнительных настройках, тогда страки автоматически будут конвертироватся в числа, true или false, обекты, null и undefined.
* Например, если указана строка "test:123:true", то в первую переменную будет сохранена строка "test", во вторую переменную число 123 и в третью переменную логическое значение true.
* Если количество переменных больше, чем количество элементов в строке, то в лишние переменные будет записана пустая строка.
* Используйте действие "Парсить строку" из модуля Список если хотите получить результат в виде списка.
*
* @param {string} str Строка
CSV строка, которую нужно распарсить на элементы.
Примеры :
login:password
id,name,login
Просто пример текста;Test text;string
* @param {string} seps Список разделителей
Список разделителей, по которым можно разбить строку. В качестве списка можно использовать строку, состоящую только из разделителей.
Примеры :
:;,
[":", ";", ","]
Пустая строка - [":", ";", ","]
* @param {boolean} convert Преобразовывать типы
* @returns Список переменных, разделенных запятыми
*/
const BAS_csv_parse = async (str, seps, convert) => await f("BAS_csv_parse", { str, seps, convert })

	/**
* Создать CSV строку
* Создать CSV строку из нескольких элементов.
* Это действие вернет CSV строку, составленную из всех указанных элементов, разделенных указанным символом.
* Например, если указаны параметры "Элемент 1" и "Элемент 2" значения которых сответственно равны "тест" и "текст", а разделитель ":", то действие вернет "тест:текст".
* Элементы из отдельных полей и списка складываются в общий список элементов которые будут объединены.
* Например, если в поле "Элемент 1" указан элемент и в поле "Список элементов" указан список из 4 элементов, то объединено будет 5 элементов.
* Если какие-то из параметров ("Элемент 1", "Элемент 2", "Элемент 3", "Список элементов") не указаны, будут использованы все параметры кроме них.
* Например, если "Список элементов" не указан, то список будет сформирован из параметров "Элемент 1" и "Элемент 2" и "Элемент 3". Если параметры "Элемент 1", "Элемент 2", "Элемент 3" пусты, то будет использован "Список элементов". Если указаны все параметры, то все они будут использованы.
* Значения всех элементов перед объединением преобразуются в строку.
* Если элемент содержит разделитель, то он будет заключен в кавычки.
* Порядок объединения полей следующий: "Элемент 1", "Элемент 2", "Элемент 3", "Список элементов".
* Список можно создать с помощью действий из модуля "Список".
*
* @param {string} elem1 Элемент 1. Может быть пустым
Элемент, который нужно добавить в CSV строку.
Примеры :
Просто пример текста
5
true
Пустая строка - Будут использованы параметры "Элемент 2", "Элемент 3", "Список элементов"
* @param {string} elem2 Элемент 2. Может быть пустым
Элемент, который нужно добавить в CSV строку.
Примеры :
Просто пример текста
5
true
Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 3", "Список элементов"
* @param {string} elem3 Элемент 3. Может быть пустым
Элемент, который нужно добавить в CSV строку.
Примеры :
Просто пример текста
5
true
Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 2", "Список элементов"
* @param {Array<string>} listElem Список элементов. Может быть пустым
Список элементов, которые нужно добавить в CSV строку. В качестве списка можно использовать строку, состоящую из строк, разделенных запятыми.
Примеры :
Просто пример текста,Test text,string
Просто пример текста, Test text, string
["Просто пример текста", "Test text", "string"]
Пустая строка - Будут использованы параметры "Элемент 1", "Элемент 2", "Элемент 3"
* @param {string} seps Разделитель
Разделитель, вставляемый между элементами CSV строки.
Примеры :
"," - Просто пример текста,Test text,string
" " - Просто пример текста Test text string
", " - Просто пример текста, Test text, string
Пустая строка - ":"
* @returns CSV строка.
Примеры :
login:password
id,name,login
Просто пример текста;Test text;string
*/
const BAS_csv_generate = async (elem1, elem2, elem3, listElem, seps) => await f("BAS_csv_generate", { elem1, elem2, elem3, listElem, seps })

	/**
* Подровнять
* Подровнять строку по краям.
* Это действие вернет строку, с начала и конца которой будут обрезаны ненужные символы, такие как пробелы, переносы строк, табуляция.
* Например, если указана строка "Тестовый текст", то действие вернет "Тестовый текст", а если указана строка "Просто пример строки", то действие вернет "Просто пример строки".
* Символы, которые будут обрезаны, определяются параметрами "Обрезать пробелы", "Обрезать переносы строк", "Обрезать табуляцию", но также можно указать свои символы в параметр "Обрезать символы", находящийся в дополнительных настройках.
* По умолчанию действие обрезает строку с обеих сторон, но это можно изменить с помощью переключателей, находящихся в дополнительных настройках.
*
* @param {string} str Строка
Строка, которую нужно подровнять.
Примеры :
"Просто пример текста"
"Test text"
"string"
* @param {string} chars Обрезать символы
Символы, обрезаемые с краев строки.
Примеры :
_-|,
_-
%&
* @param {boolean} trimSpaces Обрезать пробелы
* @param {boolean} trimLineBrakes Обрезать переносы строк
* @param {boolean} trimTabs Обрезать табуляцию
* @param {boolean} left Обрезать слева
* @param {boolean} right Обрезать справа
* @returns итоговая строка.
Примеры :
Просто пример текста
Test text
string
*/
const BAS_trim = async (str, chars, trimSpaces, trimLineBrakes, trimTabs, left, right) => await f("BAS_trim", { str, chars, trimSpaces, trimLineBrakes, trimTabs, left, right })

	/**
* Очистить
* Очистить строку от ненужных символов.
* Это действие вернет строку, из которой будут удалены все ненужные символы, такие как множественные пробелы, переносы строк, табуляция.
* Например, если указана строка "Тестовыйтекст", то действие вернет "Тестовый текст", а если указана строка "Простопримерстроки", то действие вернет "Просто пример строки".
* Кроме удаления табуляции, активируемой соответствующим параметром, можно указать свои символы, которые будут удалены, в параметр "Удалять символы", находящийся в дополнительных настройках.
* Символы, которые будут заменены пробелом, определяются параметрами "Заменять многочисленные пробелы на одиночные", "Заменить переносы строк пробелами", но также можно указать свои символы в параметр "Заменять символы на пробел", находящийся в дополнительных настройках.
*
* @param {string} str Строка
Строка, которую нужно очистить.
Примеры :
"Простопримертекста"
"Testtext"
"string"
* @param {string} charsRemoved Удалять символы
Символы, которые нужно удалять.
Примеры :
_-|
_-
%&
* @param {boolean} removeTabs Удалять табуляцию
* @param {string} replaceCharsWithSpace Заменять символы на пробел
Символы, которые нужно заменить на пробел.
Примеры :
_-|
_-
%&
* @param {boolean} replaceLineBreaksWithSpace Заменить переносы строк пробелом
* @param {boolean} replaceMultipleSpacesWithOnes Заменять многочисленные пробелы на одиночные
* @returns итоговая строка.
Примеры :
Просто пример текста
Test text
string
*/
const BAS_clean = async (str, charsRemoved, removeTabs, replaceCharsWithSpace, replaceLineBreaksWithSpace, replaceMultipleSpacesWithOnes) => await f("BAS_clean", { str, charsRemoved, removeTabs, replaceCharsWithSpace, replaceLineBreaksWithSpace, replaceMultipleSpacesWithOnes })

	/**
* Специальные HTML символы кодировать/декодировать
* Кодирует или декодирует строку содержащую специальные HTML символы.
* Это действие может работать в двух режимах: кодирование и декодирование. Режимы могут переключаться параметром "Шифровать или расшифровывать". В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая специальные HTML символы, которая должна быть закодирована.
* Например, если указана строка "<div>Blah blah blah</div>" и активирован режим encode, то действие вернет "&lt;div&gt;Blah blah blah&lt;/div&gt;". А если указана строка "&lt;h1&gt;Text title&lt;/h1&gt;" и активирован режим decode, то действие вернет "<h1>Text title</h1>".
*
* @param {string} str Строка
В зависимости от режима, входным параметром будет либо закодированая строка, которая должна быть декодирована, либо обычная строка содержащая специальные HTML символы, которые должны быть закодированы.
Примеры :
<div>Blah blah blah</div> - Любая строка. Работает в режиме encode
&lt;div&gt;Blah blah blah&lt;/div&gt; - Закодированная строка. Работает в режиме decode
* @param {boolean} escape Шифровать или расшифровывать
* @returns закодированная строка в случае использования режима encode и результат декодирования при использовании режима decode.
*/
const BAS_html = async (str, escape) => await f("BAS_html", { str, escape })

return {	BAS_is_string,
	BAS_is_not_empty_string,
	BAS_to_string,
	BAS_to_number,
	BAS_number_format,
	BAS_count_substrings,
	BAS_get_substring,
	BAS_get_substring_between,
	BAS_splice_string,
	BAS_to_lower_case,
	BAS_to_upper_case,
	BAS_string_contains,
	BAS_string_length,
	BAS_capitalize,
	BAS_count_words,
	BAS_words,
	BAS_sentences,
	BAS_find_substring,
	BAS_starts_with,
	BAS_ends_with,
	BAS_insert_substring,
	BAS_base64_encode,
	BAS_base64_decode,
	BAS_spintax,
	BAS_replace_string,
	BAS_random_string,
	BAS_latinize,
	BAS_declination,
	BAS_extract_emails,
	BAS_extract_urls,
	BAS_extract_phone_numbers,
	BAS_escape_html,
	BAS_unescape_html,
	BAS_base64,
	BAS_template,
	BAS_join_strings,
	BAS_csv_parse,
	BAS_csv_generate,
	BAS_trim,
	BAS_clean,
	BAS_html,
}
}

module.exports = get_string_functions