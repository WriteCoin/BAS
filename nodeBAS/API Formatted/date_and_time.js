;function BAS_parse_milliseconds(value) {; return _parse_date(value, "auto");};;;function BAS_milliseconds_from_date(value) {; return _parse_date(value, "auto").getTime();};;;function BAS_create_date(; year,; month,; day,; hour,; minutes,; seconds,; milliseconds,; timezone;) {; const date = new Date(; Date.UTC(year, month - 1, day, hour, minutes, seconds, milliseconds); ); date.getTimezoneOffset = function () {; return parseInt(timezone); }; return date;};;;function BAS_change_date(; value,; year,; month,; day,; hour,; minutes,; seconds,; milliseconds;) {; const date = _parse_date(value, "auto"); const offset = date.getTimezoneOffset(); const newDate = new Date(date.getTime()); newDate.getTimezoneOffset = function () {; return offset; }; if (year !== -1) newDate.setFullYear(year); if (month !== -1) newDate.setMonth(month - 1); if (day !== -1) newDate.setDate(day); if (hour !== -1) newDate.setHours(hour); if (minutes !== -1) newDate.setMinutes(minutes); if (seconds !== -1) newDate.setSeconds(seconds); if (milliseconds !== -1) newDate.setMilliseconds(milliseconds); return newDate;};;;function BAS_add_time(value, seconds, minutes, hours, days) {; const date = _parse_date(value, "auto"); const offset = date.getTimezoneOffset(); const newDate = new Date(; date.getTime() +; seconds * 1000 +; minutes * 1000 * 60 +; hours * 1000 * 60 * 60 +; days * 1000 * 60 * 60 * 24; ); newDate.getTimezoneOffset = function () {; return offset; }; return newDate;};;;function BAS_difference_between_dates(value1, value2) {; return Math.floor(; (_parse_date(value1, "auto").getTime() -; _parse_date(value2, "auto").getTime()) /; 1000; );};;;function BAS_current_date() {; const date = _parse_date(Date.now(), "auto"); date.getTimezoneOffset = function () {; return parseInt(netive("datetime", "systemtimezone", "")); }; return date;};;;function BAS_date_change_timezone(value, timezone) {; const date = _parse_date(value, "auto"); const newDate = new Date(date.getTime()); newDate.getTimezoneOffset = function () {; return parseInt(timezone); }; return newDate;};;;function BAS_date_get_timezone(value) {; return _parse_date(value, "auto").getTimezoneOffset();};;;function BAS_get_day_of_month(value) {; return parseInt(_format_date(value, "d"));};;;function BAS_get_day_of_week(value) {; return parseInt(_format_date(value, "N"));};;;function BAS_get_day_of_year(value) {; return parseInt(_format_date(value, "Z"));};;;function BAS_get_year_from_date(value) {; return parseInt(_format_date(value, "yyyy"));};;;function BAS_get_month_from_date(value) {; return parseInt(_format_date(value, "M"));};;;function BAS_get_hours_from_date(value) {; return parseInt(_format_date(value, "h"));};;;function BAS_get_minutes_from_date(value) {; return parseInt(_format_date(value, "m"));};;;function BAS_get_seconds_from_date(value) {; return parseInt(_format_date(value, "s"));};;;function BAS_get_milliseconds_from_date(value) {; return parseInt(_format_date(value, "z"));};