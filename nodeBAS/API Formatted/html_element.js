;function BAS_mouse_move_and_click_element() {; const args = _arguments(); const selector = args.selector || ""; const disableMouseEmulation = args.disableMouseEmulation || false; const isCtrlClick = args.isCtrlClick || false; const typeClick = args.typeClick || "<MOUSELEFT>"; const mouseSettings = args.mouse; const noWait = args.noWait || false; const stopThread = args.stopThread || true;; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {};; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout;; _SELECTOR = selector; if (noWait); waiter_timeout_next(1000); if (!stopThread); waiter_nofail_next(); wait_element_visible(_SELECTOR)!; if (disableMouseEmulation) {; get_element_selector(_SELECTOR, false).script("self.click()")!; } else {; _call(_random_point, {})!; _if(_result().length > 0, function(){; move( mouseSettingsObj )!; if !(!noWait && stopThread) ; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; else; get_element_selector(_SELECTOR, false).clarify(X,Y)!; _call(_clarify, mouseSettingsObj )!; if (typeClick === "<MOUSELEFT>" && !isCtrlClick); mouse(X,Y)!; else {; const typeStr = (isCtrlClick ? "<CONTROL>" : "") + ((isCtrlClick && typeClick === "<MOUSEDOUBLE>") ? "<CONTROL><MOUSELEFT>" : typeClick); _type(typeStr, 100)!; }; })!; }; if (wait_full_load) {; if (timeout) waiter_timeout_next(timeout); wait_async_load()!; };};;;function BAS_click_element() {; const args = _arguments(); const selector = args.selector || ""; const disableMouseEmulation = args.disableMouseEmulation || false; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout;; _SELECTOR = selector; if (noWait) {; waiter_timeout_next(1000); }; if (!stopThread) {; waiter_nofail_next(); }; wait_element_visible(_SELECTOR)!;; if (disableMouseEmulation) {; get_element_selector(_SELECTOR, false).script("self.click()")!; } else {; _call(_random_point, {})!; _if(_result().length > 0, function(){; X = parseInt(_result().split(",")[0]); Y = parseInt(_result().split(",")[1]); mouse(X,Y)!; })!; } ; if (wait_full_load) {; if (timeout) {; waiter_timeout_next(timeout); }; wait_async_load()!; };};;;function BAS_mouse_move_over_element() {; const args = _arguments(); const selector = args.selector || ""; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {}; const timeout = args.timeout;; _SELECTOR = selector; if (noWait || timeout) {; waiter_timeout_next(noWait ? 1000 : timeout); }; if (!stopThread) {; waiter_nofail_next(); }; wait_element_visible(_SELECTOR)!; _call(_random_point, {})!; _if(_result().length > 0, function(){; move( mouseSettingsObj )!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } ; _call(_clarify, mouseSettingsObj )!; })!;};;;function BAS_mouse_move_and_click() {; const args = _arguments(); const x = args.x; const y = args.y; const isCtrlClick = args.isCtrlClick || false; const typeClick = args.typeClick || "<MOUSELEFT>"; const mouseSettings = args.mouse; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout ;; if (mouseSettings) {; move(x, y, {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; })!; } else {; move(x, y)!; }; if (!isCtrlClick && typeClick === "<MOUSELEFT>") {; mouse(x, y)!; } else {; const key = isCtrlClick ? "<CONTROL><MOUSELEFT>" : typeClick; _type(key, 100)!; }; if (wait_full_load) {; if (timeout) {; waiter_timeout_next(timeout); }; wait_async_load()!; };};;;function BAS_click() {; const args = _arguments(); const x = args.x; const y = args.y; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout; ; mouse(x, y)!; if (wait_full_load) {; if (timeout) {; waiter_timeout_next(timeout); }; wait_async_load()!; };};;;function BAS_mouse_move() {; const args = _arguments(); const x = args.x; const y = args.y; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {}; move(x, y, mouseSettingsObj)!;};;;function BAS_input_text() {; const args = _arguments(); const selector = args.selector || ""; const text = args.text; const interval = args.interval || 100; const disableEmulation = args.disableEmulation || false; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {}; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout;; _SELECTOR = selector; if (noWait); waiter_timeout_next(1000); if (!stopThread); waiter_nofail_next(); wait_element_visible(_SELECTOR)!; if (disableEmulation) {; get_element_selector(_SELECTOR, false).script("self.click()")!; } else {; _call(_random_point, {})!; _if(_result().length > 0, function(){; move( mouseSettingsObj )!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; }; _call(_clarify, mouseSettingsObj )!; mouse(X, Y)!; if (timeout) {; general_timeout_next(timeout); }; _type(text, interval)!; })!; }; if (wait_full_load) {; if (timeout) waiter_timeout_next(timeout); wait_async_load()!; };};;;function BAS_clear_field() {; const args = _arguments(); _call_function(BAS_input_text, {; selector: args.selector,; text: "<CONTROL>a<BACK>",; interval: 30,; mouse: args.mouse,; noWait: args.noWait,; stopThread: args.stopThread,; wait_full_load: args.wait_full_load,; timeout: args.timeout; })!;};;;function BAS_get_xml() {; const args = _arguments(); const selector = args.selector || ""; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).xml()!; } else {; get_element_selector(_SELECTOR, false).nowait().xml()!; }; _function_return(_result());};;;function BAS_add_tab() {; const args = _arguments(); const referrer = args.referrer || "";; if (args.timeout) {; general_timeout_next(args.timeout); }; _popupcreate2(args.is_silent, args.url, referrer, args.is_instant, args.callback)!;};;;function BAS_popupinfo() {; _popupinfo()!; var json = JSON.parse(_result()); VAR_TAB_INDEX = json["index"]; VAR_URL_LIST = json["urls"]; VAR_TOTAL_TABS = json["urls"].length; return {; url_list: VAR_URL_LIST,; current_tab_index: VAR_TAB_INDEX,; total_tabs: VAR_TOTAL_TABS; };};;;function BAS_element_is_exists() {; const args = _arguments(); const selector = args.selector || ""; const checkVisibility = args.checkVisibility || false;; _SELECTOR = selector; get_element_selector(_SELECTOR, false).nowait().exist()!; VAR_IS_EXISTS = _result() == 1; if (checkVisibility) {; _if(VAR_IS_EXISTS, function(){; get_element_selector(_SELECTOR, false).nowait().script("document.readyState!="loading" && Math.round(self.getBoundingClientRect().height) > 0 && Math.round(self.getBoundingClientRect().width) > 0&& window.getComputedStyle(self)["display"]!="none"&&window.getComputedStyle(self)["visibility"] != "hidden"")!; VAR_IS_EXISTS = _result().indexOf("true")>=0; })!; }; _function_return(VAR_IS_EXISTS);};;;function BAS_element_get_text() {; const args = _arguments(); const selector = args.selector || ""; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).text()!; } else {; get_element_selector(_SELECTOR, false).nowait().text()!; }; _function_return(_result());};;;function BAS_element_screenshot() {; const args = _arguments(); const selector = args.selector || ""; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(5000); }; wait_element(_SELECTOR)!; const cond = !(!noWait && stopThread); if (cond) {; get_element_selector(_SELECTOR, false).exist()!; } else {; get_element_selector(_SELECTOR, false).nowait().exist()!; }; _if(_result() == "1", function(){; if (cond) {; get_element_selector(_SELECTOR, false).render_base64()!; } else {; get_element_selector(_SELECTOR, false).nowait().render_base64()!; }; VAR_SCREENSHOT_BASE64 = _result(); _function_return(VAR_SCREENSHOT_BASE64); })!;};;;function BAS_element_solve_captcha() {; const args = _arguments(); const selector = args.selector || ""; const method = args.method || "manual"; const key = args.key; const serverUrl = args.serverUrl; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout; solver_properties_clear(method); BAS_SolveRecaptcha_Serverurl = serverUrl; if(BAS_SolveRecaptcha_Serverurl.length > 0 && BAS_SolveRecaptcha_Serverurl.substr(BAS_SolveRecaptcha_Serverurl.length - 1) != "/"); BAS_SolveRecaptcha_Serverurl += "/"; if(method === "rucaptcha"); {; if(BAS_SolveRecaptcha_Serverurl); solver_property("rucaptcha","serverurl",BAS_SolveRecaptcha_Serverurl); rucaptcha(key); }; if(method === "antigate"); {; if(BAS_SolveRecaptcha_Serverurl); solver_property("antigate","serverurl",BAS_SolveRecaptcha_Serverurl); antigate(key); }; if(method == "dbc"); {; if(BAS_SolveRecaptcha_Serverurl); solver_property("dbc","serverurl",BAS_SolveRecaptcha_Serverurl); dbc(key); }; if(method == "2captcha"); {; if(BAS_SolveRecaptcha_Serverurl); solver_property("2captcha","serverurl",BAS_SolveRecaptcha_Serverurl); twocaptcha(key); }; if(method == "capmonster" || method == "capmonsterimage" || method == "capmonsteraudio"); {; solver_property("capmonster","serverurl",BAS_SolveRecaptcha_Serverurl); capmonster(key); }; if(method == "xevil"); {; solver_property("xevil","serverurl",((BAS_SolveRecaptcha_Serverurl).length == 0) ? "http://rucaptcha.com/" : (BAS_SolveRecaptcha_Serverurl)); xevil(key); };; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; get_element_selector(_SELECTOR, false).nowait().exist()!; _if(_result() == "1", function(){; const cond = !(!noWait && stopThread); _if_else("antigate" == "xevil" || "antigate" == "capmonster" || "antigate" == "capmonsterimage" || "antigate" == "capmonsteraudio" || "antigate" == "captchasniper", function(){; get_element_selector(_SELECTOR, false).nowait().attr("src")!; VAR_CAPTCHA_RESULT = _result(); _if(VAR_CAPTCHA_RESULT.length == 0, function(){; if (cond) {; get_element_selector(_SELECTOR, false).css("img").attr("src")!; } else {; get_element_selector(_SELECTOR, false).nowait().css("img").attr("src")!; }; VAR_CAPTCHA_RESULT = _result(); })!; if(VAR_CAPTCHA_RESULT.length == 0) {; fail(tr("Image tag not found. Is this element captcha?")); }; wait_load(VAR_CAPTCHA_RESULT)!; cache_get_base64(VAR_CAPTCHA_RESULT)!; if(_result().length == 0) {; fail(tr("Url ") + VAR_CAPTCHA_RESULT + tr(" is not present in cache. Please enable cache before page load with Cache Mask Allow action")); }; _if_else("antigate" == "captchasniper", function(){; _switch_http_client_internal(); http_client_post(BAS_SolveRecaptcha_Serverurl, ["file","base64://" + _result()], {"content-type":("multipart"), "encoding":("UTF-8"), "method":("POST")})!; {var split = http_client_content().split("|");VAR_CAPTCHA_RESULT = split[split.length-1]}; _switch_http_client_main(); }, function(){; if (timeout) {; solver_timeout_next(timeout); }; solve_base64(("antigate" == "xevil") ? "xevil" : "capmonster", _result())!; VAR_CAPTCHA_RESULT = _result(); _function_return(VAR_CAPTCHA_RESULT); })!; },function(){; if (cond) {; get_element_selector(_SELECTOR, false).render_base64()!; } else {; get_element_selector(_SELECTOR, false).nowait().render_base64()!; }; if (timeout) {; solver_timeout_next(timeout); }; solve_base64("antigate", _result())!; VAR_CAPTCHA_RESULT = _result(); _function_return(VAR_CAPTCHA_RESULT); })!; })!;};;;function BAS_element_solve_captcha_clicks() {; const args = _arguments(); const textInstructions = args.textInstructions || ""; const taskWaitTimeout = args.taskWaitTimeout || 5000; const taskWaitDelay = args.taskWaitDelay || 5000; const emulateMouse = args.emulateMouse || true; const serviceName = args.serviceName || "rucaptcha"; const serviceUrl = args.serviceUrl; const serviceKey = args.serviceKey; const query = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; _call_function(BASCaptchaSolver.solveCoordinatesCaptcha, {; textInstructions: textInstructions,; taskWaitTimeout: taskWaitTimeout,; taskWaitDelay: taskWaitDelay,; emulateMouse: emulateMouse,; serviceName: serviceName,; serviceUrl: serviceUrl,; serviceKey: serviceKey,; query: query,; waiter: function() {; _SELECTOR = query; if (noWait) {; waiter_timeout_next(1000); }; if (!stopThread) {; waiter_nofail_next(); }; wait_element(_SELECTOR)!; },; path: function() {; if !(!noWait && stopThread) {; return get_element_selector(_SELECTOR, false).nowait(); } else {; return get_element_selector(_SELECTOR, false); }; }; })!;};;;function BAS_wait_element() {; const args = _arguments(); const selector = args.selector; const checkVisibility = args.checkVisibility || false; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; if (checkVisibility) {; wait_element_visible(_SELECTOR)!; } else {; wait_element(_SELECTOR)!; };};;;function BAS_element_focus() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).focus()!; } else {; get_element_selector(_SELECTOR, false).nowait().focus()!; };};;;function BAS_element_get_coordinates() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout; ; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; const script = "(function(){var rect = self.getBoundingClientRect();return (rect.left + positionx).toString() + "|" + (rect.top + positiony).toString() + "|" + (rect.right - rect.left).toString() + "|" + (rect.bottom - rect.top).toString()})();"; if !(!nowait && stopThread) {; get_element_selector(_SELECTOR, false).script(script)!; } else {; get_element_selector(_SELECTOR, false).nowait().script(script)!; }; if(_result().length > 0); {; const split = _result().split("|"); VAR_X = parseInt(split[0]); VAR_Y = parseInt(split[1]); VAR_WIDTH = parseInt(split[2]); VAR_HEIGHT = parseInt(split[3]); _function_return({; x: VAR_X,; y: VAR_Y,; width: VAR_WIDTH,; height: VAR_HEIGHT; }); };};;;function BAS_elements_count() {; const args = _arguments(); const selector = args.selector;; ;_SELECTOR = selector; get_element_selector(_SELECTOR, true).length()!; VAR_ELEMENT_LENGTH = _result(); _function_return(VAR_ELEMENT_LENGTH);};;;function BAS_get_element_style() {; const args = _arguments(); const selector = args.selector; const style = args.style; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; const script = "window.getComputedStyle(self)[" + JSON.stringify("color") + "]"; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).script(script)!; } else {; get_element_selector(_SELECTOR, false).nowait().script(script)!; }; VAR_SAVED_STYLE = _result(); _function_return(VAR_SAVED_STYLE);};;;function BAS_element_drag_start() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {}; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element_visible(_SELECTOR)!; _call(_random_point, {})!; _if(_result().length > 0, function(){; move( mouseSettingsObj )!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; }; _call(_clarify, mouseSettingsObj )!; mouse_down(X,Y)!; })!;};;;function BAS_element_drag_finish() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {}; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element_visible(_SELECTOR)!; _call(_random_point, {})!; _if(_result().length > 0, function(){; move( mouseSettingsObj )!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; }; _call(_clarify, mouseSettingsObj )!; mouse_up(X,Y)!; })!;};;;function BAS_coords_drag_start() {; const args = _arguments(); const x = args.x; const y = args.y; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {};; move(x, y, mouseSettingsObj)!; mouse_down(x, y)!;};;;function BAS_coords_drag_finish() {; const args = _arguments(); const x = args.x; const y = args.y; const mouseSettings = args.mouse; const mouseSettingsObj = mouseSettings ? {; speed: mouseSettings.speed || 100,; gravity: mouseSettings.gravity || 6,; deviation: mouseSettings.deviation || 2.5; } : {};; const move_settings = mouseSettingsObj; move_seetings["do_mouse_up"] = "true"; move(x, y, move_settings)!;};;;function BAS_element_get_url() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; const script = "(function(){var link = self;while(link && link.tagName.toLowerCase() != "a"){link = link.parentNode};if(link && link.hasAttribute("href")){return link.getAttribute("href")} else {return ""};}());"; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).script(script)!; } else {; get_element_selector(_SELECTOR, false).nowait().script(script)!; }; VAR_LINK_URL = _result(); _function_return(VAR_LINK_URL);};;;function BAS_element_get_attribute() {; const args = _arguments(); const selector = args.selector; const attributeName = args.attributeName; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).attr(attributeName)!; } else {; get_element_selector(_SELECTOR, false).nowait().attr(attributeName)!; }; VAR_SAVED_ATTRIBUTE = _result(); _function_return(VAR_SAVED_ATTRIBUTE);};;;function BAS_element_set_attribute() {; const args = _arguments(); const selector = args.selector; const attributeName = args.attributeName; const attributeValue = args.attributeValue; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element(_SELECTOR)!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).set_attr(attributeName, attributeValue)!; } else {; get_element_selector(_SELECTOR, false).nowait().set_attr(attributeName, attributeValue)!; };};;;function BAS_combobox_set_value() {; const args = _arguments(); const selector = args.selector; const value = args.value; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element_visible(_SELECTOR)!; get_element_selector(_SELECTOR, false).script2("[[RESULT]]="";if(self.tagName.toLowerCase() != "select")throw "wrong type";var option_list = self.querySelectorAll("option");[[RESULT]] = -1;for(var i = 0;i<option_list.length;i++){var option = option_list.item(i);if(option.innerHTML == " + JSON.stringify(value) + "){[[RESULT]] = i;break;}}",JSON.stringify({}))!; _SELECT_INDEX = JSON.parse(JSON.parse(_result()).variables)["RESULT"]; _call(_random_point, {})!; _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){; move({})!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; };; _call(_clarify,{})!; mouse(X,Y)!; if (timeout) {; general_timeout_next(timeout); }; sleep(rand(2000,3000))!; _set_combobox_index(_SELECT_INDEX)!; sleep(rand(1000,1200))!; })!;};;;function BAS_combobox_set_index() {; const args = _arguments(); const selector = args.selector; const index = args.index; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element_visible(_SELECTOR)!; _call(_random_point, {})!; _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){; move({})!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; };; _call(_clarify,{})!; mouse(X,Y)!; if (timeout) {; general_timeout_next(timeout); }; sleep(rand(2000,3000))!; _set_combobox_index(index)!; sleep(rand(1000,1200))!; })!;};;;function BAS_combobox_get_random_element() {; const args = _arguments(); const selector = args.selector; const noWait = args.noWait || false; const stopThread = args.stopThread || true; const timeout = args.timeout;; _SELECTOR = selector; if (timeout) {; waiter_timeout_next(timeout); }; wait_element_visible(_SELECTOR)!; get_element_selector(_SELECTOR, false).script2("[[RESULT]]=-1;if(self.tagName.toLowerCase() != "select")throw "wrong type";var option_list = self.querySelectorAll("option");[[RESULT]] = -1;[[RESULT]] = Math.floor((Math.random() * (option_list.length + 1)));",JSON.stringify({}))!; _SELECT_INDEX = JSON.parse(JSON.parse(_result()).variables)["RESULT"]; _call(_random_point, {})!; _if(_result().length > 0 && _SELECT_INDEX >= 0, function(){; move({})!; if !(!noWait && stopThread) {; get_element_selector(_SELECTOR, false).clarify(X,Y)!; } else {; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; };; _call(_clarify,{})!; mouse(X,Y)!; if (timeout) {; general_timeout_next(timeout); }; sleep(rand(2000,3000))!; _set_combobox_index(_SELECT_INDEX)!; sleep(rand(1000,1200))!; })!;};