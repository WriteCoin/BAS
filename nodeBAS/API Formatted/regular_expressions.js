;function BAS_regexp_first(text, regexp) {; const regexp_result = native(; "regexp",; "first",; JSON.stringify({ text: text, regexp: regexp }); ); if (regexp_result.length == 0) regexp_result = []; else regexp_result = JSON.parse(regexp_result); VAR_ALL_MATCH = regexp_result.pop(); if (typeof VAR_ALL_MATCH == "undefined" || !VAR_ALL_MATCH) VAR_ALL_MATCH = ""; VAR_GROUP1 = regexp_result[0]; if (typeof VAR_GROUP1 == "undefined" || !VAR_GROUP1) VAR_GROUP1 = ""; VAR_GROUP2 = regexp_result[1]; if (typeof VAR_GROUP2 == "undefined" || !VAR_GROUP2) VAR_GROUP2 = ""; VAR_GROUP3 = regexp_result[2]; if (typeof VAR_GROUP3 == "undefined" || !VAR_GROUP3) VAR_GROUP3 = ""; if (regexp_result.length == 0) {; VAR_GROUP1 = VAR_ALL_MATCH; }; return {; all_match: VAR_ALL_MATCH,; group1: VAR_GROUP1,; group2: VAR_GROUP2,; group3: VAR_GROUP3,; };};;;function BAS_regexp_scan(text, regexp) {; VAR_SCAN_RESULT_LIST = native(; "regexp",; "scan",; JSON.stringify({ text: "str", regexp: "regexp" }); ); if (VAR_SCAN_RESULT_LIST.length == 0) VAR_SCAN_RESULT_LIST = []; else VAR_SCAN_RESULT_LIST = JSON.parse(VAR_SCAN_RESULT_LIST); return VAR_SCAN_RESULT_LIST;};;;function BAS_regexp_is_match(text, regexp) {; return Boolean(; native(; "regexp",; "ismatch",; JSON.stringify({; text: text,; regexp: regexp,; }); ) === "true"; );};;;function BAS_regexp_split(text, regexp) {; VAR_LIST_FROM_STRING = native("regexp", "split", JSON.stringify({text: text,regexp: regexp})); if(VAR_LIST_FROM_STRING.length == 0); VAR_LIST_FROM_STRING = []; else; VAR_LIST_FROM_STRING = JSON.parse(VAR_LIST_FROM_STRING); return VAR_LIST_FROM_STRING;};;;function BAS_regexp_replace(text, regexp, replace) {; return native("regexp", "replace", JSON.stringify({; text: text,; regexp: regexp,; replace: replace; }));};