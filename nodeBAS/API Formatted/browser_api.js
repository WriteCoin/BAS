; function get_html_script() {; const element = _function_argument("element"); page().script(element)!; _function_return(_result());};;; function get_browser_screen_settings() {; _get_browser_screen_settings()!; const result = JSON.parse(_result()); _function_return({; scrollX: result["ScrollX"],; scrollY: result["ScrollY"],; cursorX: result["CursorX"],; cursorY: result["CursorY"],; width: result["Width"],; height: result["Height"]; }); _result_function();};;;function BAS_proxy() {; const proxy = _function_argument("proxy"); const proxy_type = _function_argument("proxy_type"); const login = _function_argument("login"); const password = _function_argument("password"); const settings = _function_argument("settings"); const info = _function_argument("info");; const hash = proxy_set_hash(proxy, proxy_type, login, password);; if (_get_profile().length > 0) {; if (hash.server.length === 0) {; native("filesystem", "removefile", _get_profile() + "/proxy.txt"); } else {; const portNumber = hash.Port; hash.Port = hash.Port.toString(); native("filesystem", "writefile", JSON.stringify({path: _get_profile() + "/proxy.txt",value: JSON.stringify(hash),base64:false,append:false})); hash["Port"] = portNumber; }; }; set_proxy(hash.server, hash.Port, hash.IsHttp, hash.name, hash.password)!; sleep(1000)!; set_proxy_extended(settings.changeTimeZone === "true", settings.changeLocation === "true", settings.changeIPWebRTC === "true", settings.changeBrowserLanguage === "true", settings.changeExternalIP === "true", info.methodIP, info.key, info.func)!; sleep(1000)!;};;;function BAS_javascript() {; const script = _function_argument("script"); page().script2(script,JSON.stringify(_read_variables([])))!; const _parse_result = JSON.parse(_result()); _write_variables(JSON.parse(_parse_result.variables)); if(!_parse_result.is_success); fail(_parse_result.error);};;;function BAS_onLoadJavascript() {; const script = _function_argument("script"); const url = _function_argument("url"); const tab = _function_argument("tab"); _set_target({; url: url,; tab: tab; }); onloadjavascript(script)!;};;;function BAS_render(x, y, width, height) {; const x = _function_argument("x"); const y = _function_argument("y"); const width = _function_argument("width"); const height = _function_argument("height"); render(x, y, width, height)!; _function_return(_result());};;;function BAS_solveCaptcha() {; const dataBase64 = _function_argument("dataBase64"); const method = _function_argument("method"); const key = _function_argument("key"); const serverUrl = _function_argument("serverUrl"); solver_properties_clear(method); BAS_SolveRecaptcha_Serverurl = serverUrl;; if (BAS_SolveRecaptcha_Serverurl.length > 0 && BAS_SolveRecaptcha_Serverurl.substr(BAS_SolveRecaptcha_Serverurl.length - 1) != "/") BAS_SolveRecaptcha_Serverurl += "/"; if(method === "rucaptcha") {; if(BAS_SolveRecaptcha_Serverurl) solver_property("rucaptcha","serverurl",BAS_SolveRecaptcha_Serverurl); rucaptcha(key); }; if(method === "antigate") {; if(BAS_SolveRecaptcha_Serverurl) solver_property("antigate","serverurl",BAS_SolveRecaptcha_Serverurl); antigate(key); }; if(method === "dbc") {; if(BAS_SolveRecaptcha_Serverurl) solver_property("dbc","serverurl",BAS_SolveRecaptcha_Serverurl); dbc(key); }; if(method === "2captcha") {; if(BAS_SolveRecaptcha_Serverurl) solver_property("2captcha","serverurl",BAS_SolveRecaptcha_Serverurl); twocaptcha(key); }; if(method === "capmonster" || method === "capmonsterimage" || method === "capmonsteraudio") {; solver_property("capmonster","serverurl",BAS_SolveRecaptcha_Serverurl); capmonster(key); }; _if_else(method == "captchasniper", function(){; _switch_http_client_internal(); http_client_post(BAS_SolveRecaptcha_Serverurl, ["file","base64://" + dataBase64], {"content-type":("multipart"), "encoding":("UTF-8"), "method":("POST")})!; {const split = http_client_content().split("|");VAR_CAPTCHA_RESULT = split[split.length-1]}; _switch_http_client_main(); }, function(){; solve_base64("manual",dataBase64)!; VAR_CAPTCHA_RESULT = _result(); })!; _function_return(VAR_CAPTCHA_RESULT);};;;function BAS_solve_coordinates_captcha() {; const args = _arguments(); _call_function(BASCaptchaSolver.solveCoordinatesCaptcha, {; textInstructions: args.textInstructions || "",; taskWaitTimeout: args.taskWaitTimeout || 0,; taskWaitDelay: args.taskWaitDelay || 0,; serviceName: args.serviceName || "rucaptcha",; serviceUrl: args.serviceUrl || "",; serviceKey: args.serviceKey || "",; imageData: args.imageData || ""; })!;};;;function BAS_settings() {; const args = _arguments(); const Params = {}; const flash = args.flash || ""; const widevine = args.widevine || ""; const param_extensions = args.extensions || ""; _require_extensions(param_extensions)!; const extensions = (_result()); const commandLines = args.commandLines || ""; const webRTC = args.webRTC || ""; const webRTCIps = (args.webRTCIps || "").split(/\r?\n/).filter(function(x) {; return x && x.length > 0; }).map(function(x) {; return x.replace(/\s/g, ""); }).join(";"); const canvas = args.canvas || ""; const canvasNoise = args.canvasNoise || ""; const audio = args.audio || ""; const audioNoise = args.audioNoise || ""; const QUIC = args.QUIC || ""; const maxFPS = args.maxFPS || 0; const webGL = args.webGL || ""; const webGLNoise = args.webGLNoise || ""; const webGLVendor = args.webGLVendor || ""; const webGLRenderer = args.webGLRenderer || ""; if (flash.length > 0) Params.UseFlash = flash === "enable"; if (widevine.length > 0) Params.UseWidevine = widevine === "enable"; if (webRTC.length > 0) Params.Webrtc = webRTC; if (canvas.length > 0) Params.Canvas = canvas; if (canvasNoise.length > 0) Params.CanvasNoise = canvasNoise; if (audio.length > 0) Params.Audio = audio; if (audioNoise.length > 0) Params.AudioNoise = audioNoise; if (QUIC.length > 0) Params.QUIC = QUIC; if (maxFPS > 0) Params.MaxFPS = maxFPS; if (webGL.length > 0) Params.Webgl = webGL; if (webGLNoise.length > 0) Params.WebglNoise = webGLNoise; if (webGLVendor.length > 0) Params.Webgl.unmaskedVendor = webGLVendor; if (webGLRenderer.length > 0) Params.Webgl.unmaskedRenderer = webGLRenderer;; if (extensions.length > 0) Params.Extensions = extensions; if (extensions === "Clear") Params.Extensions = "";; if (commandLines.length > 0) Params.CommandLine = commandLines; if (commandLines === "Clear") Params.CommandLine = "";; if (webRTCIps.length > 0) Params.WebrtcIps = webRTCIps; if (webRTCIps === "Clear") Params.WebrtcIps = ""; _settings(Params)!;};