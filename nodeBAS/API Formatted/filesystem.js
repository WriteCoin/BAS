; function BAS_read_file(filepath, from, to, isBase64) {; return native("filesystem", "readfile", JSON.stringify({; value: filepath,; base64: isBase64,; from: from,; to: to; }));};;;function BAS_write_file(filepath, data, isLn, isAppend, isBase64) {; native("filesystem", "writefile", JSON.stringify({; path: filepath,; value: data.toString() + "\r" + (isLn ? "\n" : ""),; base64: isBase64,; append: isAppend; }));};;;function BAS_file_info(filename) {; const json = JSON.parse(native("filesystem", "fileinfo", filename)); return {; exists: json.exists,; size: json.size,; baseDirectory: json.directory,; isDirectory: json.is_directory,; lastModified: new Date(json.last_modified * 1000); };};;;function BAS_create_dir(dirname) {; native("filesystem", "createdir", firname);};;;function BAS_remove_file(path) {; native("filesystem", "removefile", path);};;;function BAS_move_file(path, dest) {; native("filesystem", "movefile", {; path: path,; dest: dest; });};;;function BAS_copy_file(path, dest) {; native("filesystem", "copyfile", {; path: path,; dest: dest; });};;;function BAS_search_files(folder, mask, contains, include_folders, include_files, recursive) {; const args = _arguments(); native_async("filesystem", "search", JSON.stringify({; folder: args.folder,; mask: args.mask,; contains: args.contains,; include_folders: args.include_folders,; include_files: args.include_files,; recursive: args.recursive; }))!; _function_return(JSON.parse(_result()).d);};;;function BAS_read_file_to_array(filepath) {; const d = BAS_read_file(filepath, 0, 0, false); return d.length === 0 ? [] : d.split(/\r?\n/);};;;function BAS_write_file_array(filepath, arr, isLn, isBase64, isAppend) {; native("filesystem", "writefile", JSON.stringify({; path: filepath,; value: arr.join("\r\n") + (isLn ? "\r\n" : ""),; base64: false,; append: isAppend; }));};;