function BAS_mouse_move_and_click_element() { const args = _arguments(); const selector = args.selector || ""; const disableMouseEmulation = args.disableMouseEmulation || false; const isCtrlClick = args.isCtrlClick || false; const typeClick = args.typeClick || "<MOUSELEFT>"; const mouseSettings = args.mouse; const noWait = args.noWait || false; const stopThread = args.stopThread || true;; const mouseSettingsObj = mouseSettings ? { speed: mouseSettings.speed || 100, gravity: mouseSettings.gravity || 6, deviation: mouseSettings.deviation || 2.5; } : {};; const wait_full_load = args.wait_full_load || false; const timeout = args.timeout;; _SELECTOR = selector; if (noWait); waiter_timeout_next(1000); if (!stopThread); waiter_nofail_next(); wait_element_visible(_SELECTOR)!; if (disableMouseEmulation) { get_element_selector(_SELECTOR, false).script("self.click()")!; } else { _call(_random_point, {})!; _if(_result().length > 0, function(){ move( mouseSettingsObj )!; if !(!noWait && stopThread) ; get_element_selector(_SELECTOR, false).nowait().clarify(X,Y)!; else; get_element_selector(_SELECTOR, false).clarify(X,Y)!; _call(_clarify, mouseSettingsObj )!; if (typeClick === "<MOUSELEFT>" && !isCtrlClick); mouse(X,Y)!; else { const typeStr = (isCtrlClick ? "<CONTROL>" : "") + ((isCtrlClick && typeClick === "<MOUSEDOUBLE>") ? "<CONTROL><MOUSELEFT>" : typeClick); _type(typeStr, 100)!; }; })!; }; if (wait_full_load) { if (timeout) waiter_timeout_next(timeout); wait_async_load()!; };};