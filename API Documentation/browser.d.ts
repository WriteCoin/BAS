/**
 * Загрузить (async)
 * Загружает указанный URL в браузере. Примеры: загрузить google.com, загрузить instagram.com.
 *  Если вы столкнулись с ошибками во время выполнения этого действия, попробуйте снять флажок "Ждать полной загрузки страницы" (waiter_timeout_next) или обернуть действие загрузки в блок игнорирования ошибок.
 * @param text Url сайта
 * @param referrer Referrer. Может быть пустым
 * @param is_instant Ждать полной загрузки страницы после этого действия
 * @param callback
 */
declare function _load(
  text: string,
  referrer: string,
  is_instant: boolean,
  callback: Function
): void

/**
 * Максимальное время выполнения задания (следующего действия). Используйте действие 'Таймаут' (функция general_timeout) чтобы установить максимальное время ожидания по умолчанию.
 * @param timeout максимальное время выполнения задания, в миллисекундах (следующего действия)
 */
declare function general_timeout_next(timeout: number): void

/**
 * BAS ограничивает время выполнения каждого действия. Никакое действие не может длиться вечно, кроме сна и ручного решения капчи, но вы можете настроить лимиты.
 * По умолчанию максимальное время решения капчи в неручном режиме составляет 120 секунд и 60 секунд для каждого другого действия.
 * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
 * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
 * BAS позволяет установить таймаут для каждого действия индивидуально, для этого щелкните на значок песочных часов возле кнопки отмены внутри интерфейса конкретного действия.
 * @param timeout Таймаут в миллисекундах
 */
declare function general_timeout(timeout: number): void

/**
 * @param timeout Таймаут в миллисекундах
 */
declare function async_load_timeout(timeout: number): void

/**
 * Изменить максимальное время решения капчи
 * @param timeout Таймаут в миллисекундах
 */
declare function solver_timeout(timeout: number): void

/**
 * Текущий Url (async)
 * Получить текущий url из адресной строки браузера.
 * Получать из функции _result()
 */
declare function url(): void

/**
 * Предыдущая Страница (async)
 * Открыть предыдущий url.
 * Это действие работает так же, как нажатие на кнопку "Назад" в браузере.
 * Если текущая страница загружена первой, это действие загрузит пустую страницу.
 * @param is_instant Ждать полной загрузки страницы (добавлять wait_async_load и waiter_timeout_next соответственно)
 * @param callback Функция
 */
declare function navigate_back(is_instant: boolean, callback: Function): void

/**
 * Ввод текста в элемент с фокусом (async)
 * Если вы хотите ввести текст в определенный элемент, кликните по нему и выберите "Ввод Текста".
 * Это действие может вводить любые символы включая специальные клавиши, такие как enter, backspace, insert, delete и т. д.
 * Если вы хотите ввести большой текст, используйте 0 интервал или действие "Запись В Буфер Обмена" и ввод <CONTROL>V
 * Ctrl = <CONTROL>, Alt = <MENU>, Shift = <SHIFT>, Backspace = <BACK>, tab = <TAB>, Enter = <RETURN>, Escape = <ESCAPE>, Page up = <PRIOR>, Page down = <NEXT>, End = <END>, home = <HOME>, Left = <LEFT>, Up = <UP>, Right = <RIGHT>, Down = <DOWN>, Insert = <INSERT>, Delete = <DELETE>, Mouse wheel up = <MOUSESCROLLUP>, Mouse wheel down = <MOUSESCROLLDOWN>
 * Добавлять wait_async_load()! для полной загрузки страницы после этого действия
 * Добавлять waiter_timeout_next(timeout) для задания максимального времени выполнения этого действия
 * @param text Текст для ввода
 * @param interval Интервал в миллисекундах
 */
declare function _type(text: string, interval: number): void

/**
 * Разрешение (async)
 * Изменяет разрешение браузера. Стандартное значение 1024x600. Если вы хотите получить стандартные разрешения для разных платформ, используйте сервис fingerprint switcher.
 * @param x Ширина
 * @param y Высота
 * @param callback Функция
 */
declare function resize(x: number, y: number, callback: Function): void

/**
 * Получить разрешение и положение курсора (async)
 * Возвращает: Положение курсора X, Положение курсора Y, Положение прокрутки X, Положение прокрутки Y, Ширина бразуера, Высота браузера
 * Получить текущий размер браузера, положение курсора и прокрутки.
 * Чтобы изменить размеры браузера, используйте действие "Разрешение".
 * Чтобы изменить текущее положение прокрутки, используйте действие "Прокрутка".
 * Чтобы изменить текущее положение курсора, используйте действие "Двигать Мышь".
 */
declare function _get_browser_screen_settings(): void

/**
 * Сброс (proxy)
 * Очистите все данные браузера: прокси, user-agent, заголовки, фильтры БАС, данные кэша БАС, cookie.
 * Не вызывайте это действие при запуске потока, BAS автоматически очистит данные самостоятельно.
 */
declare function new_browser(callback: Function): void

/**
 * Диалог Открыть Файл (async)
 * Загрузка файла выполняется в два этапа: установка следующего результата диалога открытия файла с помощью этого действия и нажатия на элемент, который запускает загрузку, например кнопку "Загрузить".
 * Вы всегда должны вызывать это действие перед началом загрузки, иначе BAS не будет знать, какой файл ему нужно отправить в браузер.
 * Используйте ресурс с типом "Файлы из папки" для загрузки всех файлов из папки и распределения их по потокам.
 * @param text Путь к файлу, который будет результатом вызова диалога открытия файла. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Это также может быть json массив с несколькими файлами, смотрите примеры. В этом случае BAS действует, как если бы пользователь выбрал несколько файлов.
 * Примеры: C:\file\path.txt; C:/file/path.txt; ["C:/file/path1.txt", "C:/file/path2.txt"]
 * @param callback функция
 */
declare function open_file_dialog(text: string, callback: Function): void

/**
 * Начать Перетягивать Файл (async)
 * Это действие является альтернативой "Диалог Открыть Файл" с одной разницей - оно перетаскивает файл в браузер вместо открытия диалога.
 * Вызов этого действия аналогичен началу перетаскивания файла в обычном браузере.
 * Не забудьте закончить перетягивание с помощью действия Закончить Перетаскивание или Закончить Перетаскивание На Элементе.
 * @param text Путь к файлу для начала перетягивания. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Примеры: C:\file\path.txt; C:/file/path.txt
 * @param callback функция
 */
declare function drag_file(text: string, callback: Function): void

/**
 * Окно "prompt" (async)
 * Prompt отображает диалоговое окно с необязательным запросом на ввод текста. Это устаревшая функциональность, и большинство сайтов больше не используют ее. BAS позволяет автоматически вводить текст в это окно, для этого вы должны вызвать действие до появления диалога.
 * Принцип такой же, как в "Диалог Открыть Файл", сначала вы вызываете действие, которое задает результат, а потом запускаете диалог, BAS распознает его и вводит ранее установленное значение.
 * @param text Результат ввода
 * @param callback функция
 */
declare function prompt_result(text: string, callback: Function): void

/**
 * HTTP Аутентификация (async)
 * HTTP аутентификация предоставляет метод для ввода логина и пароля от сайта. В настоящее время он редко используется, но некоторые сайты все еще полагаются на него. Во время аутентификации браузер показывает окно, и пользователь должен ввести данные. Этот процесс может быть автоматизирован, все, что вам нужно сделать, - это вызвать данное действие до отображения окна.
 * Хорошей идеей было бы поставить действие в начало сценария.
 * В случае, если оно будет вызвано после отображения окна, аутентификация работать не будет.
 * @param login HTTP Аутентификация логин
 * @param pass HTTP Аутентификация пароль
 * @param callback функция
 */
declare function http_auth_result(login: string, pass: string, callback: Function): void

/**
 * Прокрутка (async)
 * Прокрутка браузера. Цель этого действия - сделать указанные координаты видимыми на экране.
 * Оно не перемещает левый верхний угол в заданное положение, просто гарантирует, что определенная позиция видна на экране. Если координаты уже видны, то это действие ничего не сделает, иначе оно будет прокручивать окно таким образом, чтобы координаты располагались как можно ближе к центру.
 * Если вы хотите, чтобы определенный элемент, а не координаты, был видимым, вместо этого действия используйте "Прокрутка К Элементу".
 * Если выбрана настройка "Использовать колесо мыши или касания", прокрутка будет выполнена так, как если бы ее делал реальный человек. Колесо мыши будет использоваться для настольного ПК и касания для сенсорного экрана в мобильном телефоне. Если флажок не установлен, прокрутка будет выполняться мгновенно.
 * Если вы хотите прокрутить страницу в самый низ, используйте следующие настройки: "X координата" = 0, "Y координата" = 999999.
 * Установка полного времени ожидания: вызовы waiter_timeout_next(timeout) и wait_async_load()! после вызова этой функции
 * @param target смещение Y координаты
 * @param callback функция
 */
declare function _scroll_to(target: number, callback: Function): void

/**
 * Скриншот (async)
 * Это действие делает скриншот выбранной части экрана и сохраняет его в изображении в формате png, закодированном как строка base64.
 * Если выбранная область не видна, страница будет прокручена.
 * Координаты X и Y задаются в абсолютном смещении от краев страницы.
 * Если вы хотите сделать скриншот определенного элемента, нажмите на него и выберите действие "Скриншот".
 * Если вы хотите сделать снимок всей страницы, нажмите на любой элемент в браузере и используйте действие "Скриншот" с селектором >CSS> body.
 * Результат после выполнения этого действия хранится в функции _result
 * @param x X
 * @param y Y
 * @param width Ширина
 * @param height Высота
 * @param callback функция
 */
declare function render(x: number, y: number, width: number, height: number, callback: Function): void