/**
 * Загрузить (async)
 * Загружает указанный URL в браузере. Примеры: загрузить google.com, загрузить instagram.com.
 *  Если вы столкнулись с ошибками во время выполнения этого действия, попробуйте снять флажок "Ждать полной загрузки страницы" (waiter_timeout_next) или обернуть действие загрузки в блок игнорирования ошибок.
 * @param text Url сайта
 * @param referrer Referrer. Может быть пустым
 * @param is_instant Ждать полной загрузки страницы после этого действия
 * @param callback
 */
declare function _load(
  text: string,
  referrer: string,
  is_instant: boolean,
  callback: Function
): void

/**
 * Максимальное время выполнения задания (следующего действия). Используйте действие 'Таймаут' (функция general_timeout) чтобы установить максимальное время ожидания по умолчанию.
 * @param timeout максимальное время выполнения задания, в миллисекундах (следующего действия)
 */
declare function general_timeout_next(timeout: number): void

/**
 * BAS ограничивает время выполнения каждого действия. Никакое действие не может длиться вечно, кроме сна и ручного решения капчи, но вы можете настроить лимиты.
 * По умолчанию максимальное время решения капчи в неручном режиме составляет 120 секунд и 60 секунд для каждого другого действия.
 * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
 * Чтобы изменить максимальное время решения капчи, выполните это действие с типом таймаута "Solver".
 * BAS позволяет установить таймаут для каждого действия индивидуально, для этого щелкните на значок песочных часов возле кнопки отмены внутри интерфейса конкретного действия.
 * @param timeout Таймаут в миллисекундах
 */
declare function general_timeout(timeout: number): void

/**
 * @param timeout Таймаут в миллисекундах
 */
declare function async_load_timeout(timeout: number): void

/**
 * Изменить максимальное время решения капчи
 * @param timeout Таймаут в миллисекундах
 */
declare function solver_timeout(timeout: number): void

/**
 * Текущий Url (async)
 * Получить текущий url из адресной строки браузера.
 * Получать из функции _result()
 */
declare function url(): void

/**
 * Предыдущая Страница (async)
 * Открыть предыдущий url.
 * Это действие работает так же, как нажатие на кнопку "Назад" в браузере.
 * Если текущая страница загружена первой, это действие загрузит пустую страницу.
 * @param is_instant Ждать полной загрузки страницы (добавлять wait_async_load и waiter_timeout_next соответственно)
 * @param callback Функция
 */
declare function navigate_back(is_instant: boolean, callback: Function): void

/**
 * Ввод текста в элемент с фокусом (async)
 * Если вы хотите ввести текст в определенный элемент, кликните по нему и выберите "Ввод Текста".
 * Это действие может вводить любые символы включая специальные клавиши, такие как enter, backspace, insert, delete и т. д.
 * Если вы хотите ввести большой текст, используйте 0 интервал или действие "Запись В Буфер Обмена" и ввод <CONTROL>V
 * Ctrl = <CONTROL>, Alt = <MENU>, Shift = <SHIFT>, Backspace = <BACK>, tab = <TAB>, Enter = <RETURN>, Escape = <ESCAPE>, Page up = <PRIOR>, Page down = <NEXT>, End = <END>, home = <HOME>, Left = <LEFT>, Up = <UP>, Right = <RIGHT>, Down = <DOWN>, Insert = <INSERT>, Delete = <DELETE>, Mouse wheel up = <MOUSESCROLLUP>, Mouse wheel down = <MOUSESCROLLDOWN>
 * Добавлять wait_async_load()! для полной загрузки страницы после этого действия
 * Добавлять waiter_timeout_next(timeout) для задания максимального времени выполнения этого действия
 * @param text Текст для ввода
 * @param interval Интервал в миллисекундах
 */
declare function _type(text: string, interval: number): void

/**
 * Разрешение (async)
 * Изменяет разрешение браузера. Стандартное значение 1024x600. Если вы хотите получить стандартные разрешения для разных платформ, используйте сервис fingerprint switcher.
 * @param x Ширина
 * @param y Высота
 * @param callback Функция
 */
declare function resize(x: number, y: number, callback: Function): void

/**
 * Получить разрешение и положение курсора (async)
 * Возвращает: Положение курсора X, Положение курсора Y, Положение прокрутки X, Положение прокрутки Y, Ширина бразуера, Высота браузера
 * Получить текущий размер браузера, положение курсора и прокрутки.
 * Чтобы изменить размеры браузера, используйте действие "Разрешение".
 * Чтобы изменить текущее положение прокрутки, используйте действие "Прокрутка".
 * Чтобы изменить текущее положение курсора, используйте действие "Двигать Мышь".
 */
declare function _get_browser_screen_settings(): void

/**
 * Сброс (proxy)
 * Очистите все данные браузера: прокси, user-agent, заголовки, фильтры БАС, данные кэша БАС, cookie.
 * Не вызывайте это действие при запуске потока, BAS автоматически очистит данные самостоятельно.
 */
declare function new_browser(callback: Function): void

/**
 * Диалог Открыть Файл (async)
 * Загрузка файла выполняется в два этапа: установка следующего результата диалога открытия файла с помощью этого действия и нажатия на элемент, который запускает загрузку, например кнопку "Загрузить".
 * Вы всегда должны вызывать это действие перед началом загрузки, иначе BAS не будет знать, какой файл ему нужно отправить в браузер.
 * Используйте ресурс с типом "Файлы из папки" для загрузки всех файлов из папки и распределения их по потокам.
 * @param text Путь к файлу, который будет результатом вызова диалога открытия файла. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Это также может быть json массив с несколькими файлами, смотрите примеры. В этом случае BAS действует, как если бы пользователь выбрал несколько файлов.
 * Примеры: C:\file\path.txt; C:/file/path.txt; ["C:/file/path1.txt", "C:/file/path2.txt"]
 * @param callback функция
 */
declare function open_file_dialog(text: string, callback: Function): void

/**
 * Начать Перетягивать Файл (async)
 * Это действие является альтернативой "Диалог Открыть Файл" с одной разницей - оно перетаскивает файл в браузер вместо открытия диалога.
 * Вызов этого действия аналогичен началу перетаскивания файла в обычном браузере.
 * Не забудьте закончить перетягивание с помощью действия Закончить Перетаскивание или Закончить Перетаскивание На Элементе.
 * @param text Путь к файлу для начала перетягивания. Этот параметр - строка с путем к файлу. Тип разделителя значения не имеет. Примеры: C:\file\path.txt; C:/file/path.txt
 * @param callback функция
 */
declare function drag_file(text: string, callback: Function): void

/**
 * Окно "prompt" (async)
 * Prompt отображает диалоговое окно с необязательным запросом на ввод текста. Это устаревшая функциональность, и большинство сайтов больше не используют ее. BAS позволяет автоматически вводить текст в это окно, для этого вы должны вызвать действие до появления диалога.
 * Принцип такой же, как в "Диалог Открыть Файл", сначала вы вызываете действие, которое задает результат, а потом запускаете диалог, BAS распознает его и вводит ранее установленное значение.
 * @param text Результат ввода
 * @param callback функция
 */
declare function prompt_result(text: string, callback: Function): void

/**
 * HTTP Аутентификация (async)
 * HTTP аутентификация предоставляет метод для ввода логина и пароля от сайта. В настоящее время он редко используется, но некоторые сайты все еще полагаются на него. Во время аутентификации браузер показывает окно, и пользователь должен ввести данные. Этот процесс может быть автоматизирован, все, что вам нужно сделать, - это вызвать данное действие до отображения окна.
 * Хорошей идеей было бы поставить действие в начало сценария.
 * В случае, если оно будет вызвано после отображения окна, аутентификация работать не будет.
 * @param login HTTP Аутентификация логин
 * @param pass HTTP Аутентификация пароль
 * @param callback функция
 */
declare function http_auth_result(
  login: string,
  pass: string,
  callback: Function
): void

/**
 * Прокрутка (async)
 * Прокрутка браузера. Цель этого действия - сделать указанные координаты видимыми на экране.
 * Оно не перемещает левый верхний угол в заданное положение, просто гарантирует, что определенная позиция видна на экране. Если координаты уже видны, то это действие ничего не сделает, иначе оно будет прокручивать окно таким образом, чтобы координаты располагались как можно ближе к центру.
 * Если вы хотите, чтобы определенный элемент, а не координаты, был видимым, вместо этого действия используйте "Прокрутка К Элементу".
 * Если выбрана настройка "Использовать колесо мыши или касания", прокрутка будет выполнена так, как если бы ее делал реальный человек. Колесо мыши будет использоваться для настольного ПК и касания для сенсорного экрана в мобильном телефоне. Если флажок не установлен, прокрутка будет выполняться мгновенно.
 * Если вы хотите прокрутить страницу в самый низ, используйте следующие настройки: "X координата" = 0, "Y координата" = 999999.
 * Установка полного времени ожидания: вызовы waiter_timeout_next(timeout) и wait_async_load()! после вызова этой функции
 * @param target смещение Y координаты
 * @param callback функция
 */
declare function _scroll_to(target: number, callback: Function): void

/**
 * Скриншот (async)
 * Это действие делает скриншот выбранной части экрана и сохраняет его в изображении в формате png, закодированном как строка base64.
 * Если выбранная область не видна, страница будет прокручена.
 * Координаты X и Y задаются в абсолютном смещении от краев страницы.
 * Если вы хотите сделать скриншот определенного элемента, нажмите на него и выберите действие "Скриншот".
 * Если вы хотите сделать снимок всей страницы, нажмите на любой элемент в браузере и используйте действие "Скриншот" с селектором >CSS> body.
 * Результат после выполнения этого действия хранится в функции _result
 * @param x X
 * @param y Y
 * @param width Ширина
 * @param height Высота
 * @param callback функция
 */
declare function render(
  x: number,
  y: number,
  width: number,
  height: number,
  callback: Function
): void

/**
 * Recaptcha V3
 * Это действие решает google recaptcha 3.0.
 * Recaptcha v3, в отличие от других капч, не показывает изображения и не требует от пользователя какого-либо взаимодействия. Она работает абсолютно незаметно. Поэтому ее можно разместить в нескольких местах на сайте или даже на каждой странице. При переходе на страницу или при вызове события, к которым прикреплена Recaptcha v3, сайт получает рейтинг браузера. Рейтинг отражает вероятность того, что посетитель сайта является ботом.
 * Сайт может использовать результат по своему усмотрению. Например, один сайт может показывать капчу, если рейтинг пользователя ниже 0.4, на другом сайте может потребоваться проверка телефона, если оценка ниже 0.6, и пользователь будет заблокирован, если она ниже 0.3.
 * Это действие перехватывает запрос верификации пользователя сайтом и отправляет его в указанный сервис. Когда сервис вернет результат, он заменит реальный рейтинг браузера на то, что был получен от одного из работников выбранного сервиса.
 * ВАЖНО: Это действие само по себе не решает капчи, вместо этого оно устанавливает параметры решения Recaptcha v3 для последующих вызовов. Следовательно, оно должно быть вызвано до того, как появится Recaptcha v3.
 * Каждый сайт имеет свои требования к минимальному рейтингу, вы можете настроить ожидаемое значение, изменив параметр 'Минимальный рейтинг'.
 * Recaptcha v3 может быть размещена на всех страницах сайта. В таком случае, каждая страница будет иметь свое собственное действие. Например, могут быть действия для посещения страницы с ценами, посещения страницы c часто задаваемыми вопроcами и создание нового пользователя. Вы можете отключить перехват для второстепенных действий и включить его для важных, изменив параметр 'Название действия'.
 * Чтобы найти точное название действия на конкретном сайте, вам необходимо зайти на страницу с требуемым действием, после чего появится сообщение с его названием.(screen). Все уже вызванные дейстия будут отображены в выпающем списке для параметра 'Название действия'.
 * Использование сервиса требует ключа, который должен быть куплен на сайте сервиса и введен в поле "Ключ Rucaptcha/2captcha".
 * В качестве альтернативы этому действию вы можете попытаться обойти Recapthca V3. Вот что влияет на итоговый рейтинг: профиль с авторизацией Gmail и историей поиска Google созданный некоторе время назад, хороший прокси, продолжительная история действий на сайте, с которым вы работаете. Остановимся подробнее на последнем пункте. Recaptcha v3 отслеживает ваши действия на каждом сайте, регистрируя каждое действие, которое вы выполняете. Например, если вы посещаете страницу покупок, ищете какой-то товар, посещаете страницу с часто задаваемыми вопросами и только после этого пытаетесь зарегистрировать учетную запись, это будет гораздо менее подозрительно, чем попытка зарегистрировать учетную запись немедленно, и с высокой вероятностью получит лучший результат.
 * Существует еще один тип рекапчи, который называется невидимая рекапча. Он работает почти так же, как Recaptcha v3, но вместо того, чтобы возвращать рейтинг пользователя, он показывает изображение, если пользователь кажется подозрительным, это эквивалентно низкому рейтингу. BAS также может решать невидимую рекапчу, для этого используйте действие 'Решить Recaptcha 2.0'.(видео https://www.youtube.com/watch?v=ltWy6O9jsTo).
 * @param action Название действия. Содержит одно или несколько действий recaptcha v3. Это поле может содержать несколько действий разделенный запятыми. Когда браузер выполнит одно из этих действий, запрос оценки рейтинга будет перехвачен и отправлен службе, выбранной в поле "Метод решения". По умолчанию абсолютно все запросы будут перехвачены, но вы можете настроить это поле для отправки только нужных действий.
 * Примеры:
 * * - Перехватывать все действия
 * Action 1 - Перехватывать только 'Action 1', все остальные действия будут возвращать реальный рейтинг браузера.
 * Action 1, Action 2 - Перехватывать только 'Action 1' и 'Action 2', все остальные действия будут возвращать реальный рейтинг браузера.
 * ВНИМАНИЕ: между дейтвиями не должно быть пробелов.
 * @param method Метод решения. Это строка, вы можете установить значение напрямую или использовать переменную или ресурс.
 * Примеры:
 * antigate - Решить с помощью сервиса http://anti-captcha.com/
 * rucaptcha - Решить с помощью сервиса http://rucaptcha.com/
 * 2captcha - Решить с помощью сервиса http://2captcha.com/
 * disable - Перестать перехватывать запросы.
 * Сайт получит ваш реальный рейтинг. Вы можете снова включить перехват позже.
 * @param rucaptcha Ключ Антигейт/Рукапча. Может быть пустым. Это ключ от сервиса, выбранного в поле "Метод решения".
 * @param serverurl Url сервера. Может быть пустым.
 * Примеры:
 * http://127.0.0.3:8083/
 * Пустая строка - Использовать url по умолчанию, например, http://rucaptcha.com для rucaptcha.
 * @param score Минимальный рейтинг, с которым должен приходить ответ от сервиса. 0.1 - самый низкий рейтинг, 0.9 - самый высокий. Это зависит от сайта, хочет ли он пропускать браузеры с данным рейтингом или нет. 0.6 - это значение по умолчанию, оно должно быть приемлемым для большинства сайтов.
 * Примеры:
 * 0.3
 * 0.7
 * @param use_proxy Отправлять текущий прокси на сервис. Заставляет работника, который решает капчу, использовать прокси, который вы настроили с помощью действия "Прокси".
 * Примеры:
 * true - Отправлять текущий прокси на сервис. Значение прокси получается из действия "Прокси".
 * false - Не отправлять прокси. Стандартное значение.
 * @param callback функция
 */
declare function _recaptchav3(
  action: string,
  method: string,
  rucaptcha: string,
  serverurl: string,
  score: number,
  use_proxy: boolean,
  callback: Function
): void

declare interface BASCaptchaSolver {
  /**
   * Решить капчу кликами (BAS-функция, вызов через _call_function)
   * Решить любой тип капчи, который требует кликать по изображениям.
   * Для решения ReCaptcha и HCaptcha рекомендуется использовать действия Решить Recaptcha 2.0 и Решить HCaptcha из контекстного меню браузера, если это возможно. С ними проще работать, и капча может решиться быстрее. Также эти действия позволяют выполнять автоматическую валидацию решения. Используйте это действие, если другие варианты не подходят вам по каким-либо причинам.
   * Это действие позволяет вам решить любую капчу, которая требует, чтобы вы нажимали на изображения в соответствии с определенными инструкциями. Это может быть ReCaptcha, HCaptcha и другие типы. Для решения таких капч необходимо отправить на сервис изображение, содержащее элементы, по которым нужно выполнить клики. Если на капче или рядом с ней присутствует описание, рекомендуется отправлять его вместе с изображением, чтобы избежать неверных решений.
   * Данное действие не выполняет автоматических кликов по координатам, в отличие от действия Решить капчу кликами из контекстного меню браузера, которое делает всё без вашего участия. Использовать его будет намного проще.
   * После того, как сервис решит капчу, вы получите список координат, по которым необходимо будет выполнить клики. Для того, чтобы выполнить клики, данный список необходимо пройти любым циклом, например for или foreach, и на каждой итерации вызвать действие Кликнуть для каждой пары координат X и Y. После выполнения кликов вам необходимо вручную продолжить работу. То есть, вы должны сами выполнить подтверждение решения или перейти к следующему изображению.
   * Для всех сервисов требуется сервисный ключ, который должен быть получен на сайте сервиса и введён в поле Ключ сервиса.
   * Для выполнения кликов по полученным координатам вам нужно учитывать позицию элемента, скриншот которого вы отправляете, относительно страницы, а также скролл по вертикали и горизонтали. Поэтому самым простым вариантом будет использование аналогичного действия для конкретного элемента из контекстного меню браузера, где клики будут выполняться автоматически.
   * Важный момент - данное действие не выполняет автоматического подтверждения решения капчи. Вы должны сделать это сами. Например, если вы решаете ReCaptcha2 используя данный метод, то вам нужно самостоятельно выполнить клик по чекбоксу, а после выполнения кликов по координатам - нажать на кнопку Далее или Готово.
   * Параметр Интервал проверки решения задачи отвечает за частоту отправки запросов на сервис для проверки решения капчи. Чем больше вы выставите значение, тем дольше BAS будет ожидать перед тем, как отправить очередной запрос. Рекомендуется использовать задержку не менее 5 секунд.
   * Параметр Задержка проверки решения задачи отвечает за длительность ожидания перед тем, как BAS начнет проверку капчи. Сначала капча отправляется на сервис, после этого BAS будет ожидать указанное время, по прошествии которого начнется непосредственно проверка состояния задачи. Большинство сервисов рекомендуют подождать не менее 5 секунд.
   * Если нужного сервиса нет в списке доступных, но он работает через API аналогичный выбранному сервису, вы можете указать необходимый URL сервера в поле URL сервиса, находящееся в дополнительных настройках.
   * Если вы используете такие программы, как CapMonster, XEvil или аналоги, вы должны заполнить поле URL сервиса в соответствии с документацией к данному ПО.
   * Подробную документацию по решению подобных капч можно посмотреть здесь. https://rucaptcha.com/api-rucaptcha#solving_clickcaptcha
   * Второй аргумент - объект с параметрами:
   *
   * textInstructions - Описание капчи. Может быть пустым. Если у captcha есть какое-либо описание, его можно добавить в это поле.
   * Примеры:
   * Выберите все изображения, на которых есть самолёт
   * Выберите все изображения, на которых есть лодка
   *
   * dataBase64 - Данные изображения в base64. Данные в формате base64, их можно получить из действия скриншот или из действия читать файл.
   *
   * taskWaitTimeout - Интервал проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между каждой новой проверкой решения капчи.
   * Примеры:
   * 600 - Ждать в течение 600 миллисекунд
   * 10000 - Ждать в течение 10 секунд
   * 5000 - Ждать в течение 5 секунд
   *
   * taskWaitDelay - Задержка проверки решения задачи в миллисекундах. С помощью этого параметра вы можете контролировать длительность паузы между отправкой капчи на сервис и началом ожидания решения. Чаще всего, сервисы решения капчи указывают необходимое время ожидания, в остальных случаях вы можете указать любое удобное для вас значение.
   * Примеры:
   * 600 - Ждать в течение 600 миллисекунд
   * 10000 - Ждать в течение 10 секунд
   * 5000 - Ждать в течение 5 секунд
   *
   * serviceName - Название сервиса для решения капчи
   * Примеры:
   * rucaptcha - Решить капчу используя сервис https://rucaptcha.com/
   * 2captcha - Решить капчу используя сервис https://2captcha.com/
   *
   * serviceUrl - URL сервиса. Может быть пустым. ВЫ можете использовать этот параметр, если нужного вам сервиса нет в списке доступных. В таком случае укажите название сервиса, котрый работает по аналогичному API, и используйте нужный вам адрес.
   * Примеры:
   * Пустая строка - Использовать стандартный URL сервиса, http://rucaptcha.com для RuCaptcha и так далее
   * http://127.0.0.1:8083 - Использовать кастомный URL сервиса с портом 8083
   * http://127.0.0.3:8080 - Использовать кастомный URL сервиса с портом 8080
   *
   * serviceKey - Ключ сервиса. Ключ от сервиса решения капчи. Вы можете получить его в личном кабинете выбранного сервиса решения капчи
   *
   * imageData - Данные изображения в base64. Их можно получить из действия скриншот или из действия читать файл.
   */
  solveCoordinatesCaptcha(): void
}

/**
 * Решено Неверно
 * Используйте это действие, если прошлая капча была решена неправильно.
 * На сервис отправляется запрос о неверном решении и деньги за решения не будут сняты со счета.
 * Если последняя капча была решена без использования сервиса(с помощью софта или в ручном режиме), это действие не сделает ничего.
 */
declare function solver_failed(): void

/**
 * Нажать кнопку расширения (async)
 * Для ожидания полной загрузки страницы после этого действия - использовать wait_async_load()! после этого действия
 * Для задания максимального времени выполнения задания - использовать waiter_timeout_next(timeout) после вызова этой функции
 * Выполнение этого действия аналогично клику по данной кнопке https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=chrome_2021-05-15_12-50-15.png
 * Перед использованием этого действия необходимо сначала установить расширение. Для этого используйте действие "Настройки браузера".
 * Более подробную информацию об использовании расширений можно найти на этой странице https://wiki.bablosoft.com/doku.php?id=ru:using_extensions
 * @param id Id или имя расширения
 * Идентификатор или имя расширения. Нет необходимости вводить id целиком или полное имя, допускается использование только его части.
 * Примеры:
 * padekgcemlokbadohgkifijomclgjgif - Открыть интерфейс расширения padekgcemlokbadohgkifijomclgjgif.
 * padekgcem - Открыть интерфейс расширения id которого содержит padekgcem.
 * Proxy SwitchyOmega - Открыть интерфейс расширения найденного по имени.
 * Proxy - Открыть интерфейс расширения найденного по части имени.
 * @param callback Функция
 */
declare function _click_extension_button(id: string, callback: Function): void

/**
 * Режим сенсорного экрана (async)
 * Включить эмуляцию сенсорного экрана.
 * Сенсорный экран будет включен автоматически после изменения отпечатка, поэтому это действие не требуется вызывать явно.
 * В режиме cенсорного экрана браузер будет вести себя точно так же, как мобильный браузер: события движения мыши не будут отправляться, клики мыши будут заменены событиями касания, многие внутренние методы браузера также будут модифицированы, и т. д.
 * Специальные клавиши, такие как TAB, CTRL или стрелки на клавиатуре, останутся функциональными, но браузер не будет получать никаких уведомлений об этих событиях.
 * События колеса мыши будет заменено свайпами.
 * @param mode mobile | desktop
 * Использовать сенсорный экран. Включить эмуляцию сенсорного экрана для текущей сессии браузера.
 * Примеры:
 * mobile - Включить эмуляцию сенсорного экрана
 * desktop - Десктопный режим
 * @param callback Функция
 */
declare function _browser_mode(mode: boolean, callback: Function): void

/**
 * Настройки Мыши
 * Это настройки перемещения мыши. Вы можете установить его либо глобально(посредством этого действия), либо для каждого действия индивидуально, нажав на значок настроек возле кнопки отмены внутри любого действия, которое использует мышь.
 * @param params Объект с параметрами:
 * speed - Скорость движения мыши как число с плавающей запятой, если вы меняете этот параметр, не забудьте изменить притяжение и отклонение пропорционально.
 * gravity - Притяжение. Значение с плавающей запятой, которое устанавливает силу притяжения курсора к линии между начальной и конечной точками. Если вы установите слишком большое значение, курсор будет перемещаться по прямой, если слишком маленькое, курсор будет перемещаться хаотично на экране.
 * deviation - Отклонение. Значение плавающей точки, которое устанавливает силу отклонения курсора от линии между начальной и конечной точками. Это можно представить как ветер, который отклоняет курсор от этой линии.
 */
declare function _default_move_params(params: {
  speed: number
  gravity: number
  deviation: number
}): void

/**
 * Уведомления (async)
 * Разрешать или запрещать уведомления.
 * В обычном браузере уведомления отображаются на рабочем столе пользователя. Перед тем как начать их получать пользователь должен разрешить уведомления. Вызов этого действия идентичен запрету или разрешению уведомлений в зависимости от значения параметра. скрин1 (https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=allownotifications.png), скрин2 (https://wiki.bablosoft.com/lib/exe/fetch.php?cache=&media=notificationexample.png).
 * По умолчанию уведомления отключены.
 * Если вы хотите включать уведомления только для определенных сайтов, используйте это действие несколько раз перед загрузкой каждого сайта.
 * Это действие необходимо вызвать до того, как будет загружена любая страница, на которой отображаются уведомления.
 * ВАЖНО: уведомления часто используются вместе с сервисами, а они работают только с включенными профилями. Таким образом, вместе с этим действием лучше использовать локальные профили.
 * @param enbale Разрешать (true) или запрещать (false) уведомления.
 * Примеры:
 * true - Всегда разрешать уведомления для всех следующих запросов.
 * false - Всегда запрещать уведомления для всех следующих запросов.
 * @param callback Функция
 */
declare function _enable_notifications(enbale: boolean, callback: Function): void