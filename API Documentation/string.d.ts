/**
 * Является ли строкой
 * Проверить, являются ли указанные данные строкой.
 * Это действие вернет true или false в зависимости от того, являются ли указанные данные строкой. Результат может быть использован вместе с действием "If".
 * Например, если указано "Тестовый текст", то действие вернет true, а если укзано 123 или true, то действие вернет false.
 * 
 * @param data Данные
  Данные, которые нужно проверить на то являются ли они строкой.
  Примеры :
  Просто пример текста - Строка
  Пустая строка - Строка
  123 - Не строка
  null - Не строка
 * @returns true или false в зависимости от того, являются ли указанные данные строкой.
  Примеры :
  true - Данные являются строкой.
  false - Данные не являются строкой.

 */
declare function _is_string(data: any): boolean

/**
 * Не пустая строка
 * Проверить, являются ли указанные данные не пустой строкой.
 * Это действие вернет true или false в зависимости от того, являются ли указанные данные не пустой строкой. Результат может быть использован вместе с действием "If".
 * Например, если указано "Тестовый текст", то действие вернет true, а если укзано "" или 123, то действие вернет false.
 * 
 * @param data Данные
  Данные, которые нужно проверить на то являются ли они не пустой строкой.
  Примеры :
  Просто пример текста - Не пустая строка
  "" - Пустая строка
  @returns true или false в зависимости от того, являются ли указанные данные не пустой строкой.
  Примеры :
  true - Не пустая строка.
  false - Пустая строка или не строка.
 */
declare function _is_not_empty_string(data: string): boolean

/**
 * В строку
 * Преобразовать указанные данные в строку.
 * Это действие вернет строковое представление указанных данных.
 * Это действие работает с любым типом данных.
 * Например, если указано 123, то действие вернет "123", а если укзано true, то действие вернет "true".
 * @param data Данные
  Данные, которые нужно преобразовать в строку.
  Примеры :
  123 - Число
  true - Булевый тип
  {"text":"Test text","num":123} - Объект
  Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time) - Дата
  @returns строковое представление указанных данных.
  Примеры :
  123
  true
  {"text":"Test text","num":123}
  Sun Mar 13 2022 16:20:49 GMT+0300 (Moscow Standard Time)
 */
declare function _to_string(data: any): string

/**
 * В число
 * Преобразовать указанную строку в число.
 * Это действие вернет числовое представление указанной строки.
 * Например, если указано "123", то действие вернет 123, а если укзано "123.45", то действие вернет 123.45.
 * Итоговое число можно округлить, указав параметр "Количество знаков в дробной части", находящийся в дополнительных настройках.
 * Это действие может преобразовывать числа в нестандартном формате для этого нужно указать параметры "Разделитель целой и дробной части" и "Разделитель тысячных" находящиеся в дополнительных настройках.
 * Например, строка "1 967 567,3245" будет преобразована в число 1967567.3245, если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
 * 
 * @param str Строка
  Строка, которую нужно преобразовать в число.
  Примеры :
  123
  100,000
  1,456.578

 * @param dec Количество знаков в дробной части
  Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
  Примеры :
  4 - 156.6439
  2 - 21.78
  0 - Округлить до целого числа
  -1 - Не округлять число
  Пустая строка - Не округлять число

 * @param dsep Разделитель целой и дробной части
  Необязательный параметр. Разделитель между целой и дробной частями числа.
  Примеры :
  "." - 156.6439
  "," - 156,6439
  Пустая строка - "." - 156.6439

 * @param tsep Разделитель тысячных
  Необязательный параметр. Разделитель между тысячными.
  Примеры :
  " " - 1 000 000.01
  "," - 1,000,000.01
  Пустая строка - "," - 1,000,000.01

 * @returns числовое представление указанной строки.
  Примеры :
  123
  100000
  1456.578
 */
declare function _to_number(
  str: string,
  dec: number,
  dsep: string,
  tsep: string
): number

/**
 * Форматировать число
 * Форматировать и преобразовать в строку указанное число.
 * Данным действием можно привести число в более читабельный вид, например, для дальнейшего вывода в лог.
 * Перед форматирование число можно округлить, указав параметр "Количество знаков в дробной части".
 * Это действие вернет форматированное строковое представление указанного числа.
 * Например, число 1967567.3245 будет преобразована в строку "1 967 567,3245", если в параметре "Разделитель целой и дробной части" указана запятая, а в параметре "Разделитель тысячных" указан пробел.
 * 
 * @param num Число
  Число, которое нужно форматировать и преобразовать в строку.
  Примеры :
  123
  100000
  1456.578

 * @param dec Количество знаков в дробной части. Может быть пустым
  Необязательный параметр. Количество знаков в дробной части, до которого будет округлено число.
  Примеры :
  4 - 156.6439
  2 - 21.78
  0 - Округлить до целого числа
  -1 - Не округлять число
  Пустая строка - Не округлять число

 * @param digits Минимальное количество символов в числе. Может быть пустым
  Необязательный параметр. Минимальное количество символов в числе. Если количество символов меньше указанного числа, то в место недостающих символов перед числом будут добавлены нули.
  Примеры :
  4 - 0321
  2 - 01
  0 - Не изменять количество символов
  Пустая строка - Не изменять количество символов

 * @param dsep Разделитель целой и дробной части. Может быть пустым
  Необязательный параметр. Разделитель между целой и дробной частями числа.
  Примеры :
  "." - 156.6439
  "," - 156,6439
  Пустая строка - "." - 156.6439

 * @param tsep Разделитель тысячных. Может быть пустым
  Необязательный параметр. Разделитель между тысячными.
  Примеры :
  " " - 1 000 000.01
  "," - 1,000,000.01
  Пустая строка - "," - 1,000,000.01

 * @returns форматированное строковое представление указанного числа.
  Примеры :
  123
  100,000
  1,456.578
 */
declare function _number_format(
  num: number,
  dec: number,
  digits: number,
  dsep: string,
  tsep: string
): number

/**
 * Количество подстрок
 * Получить количество подстрок в строке.
 * Это действие вернет число, равное количеству подстрок в строке.
 * Например, если указана строка "Тестовый текст" и подстрока "те", то действие вернет 2, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет 1.
 * 
 * @param str Строка
  Строка, из которой нужно получить количество подстрок.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param sub Подстрока
  Непустая связная часть строки.
  Примеры :
  пример
  text
  str

  @returns количество подстрок в строке.
  Примеры :
  5
  2
  0 - Подстрока отсутствует в строке.

 */
declare function _count_substrings(str: string, sub: string): number

/**
 * Получить подстроку
 * Получить подстроку из строки.
 * Это действие вернет полученную подстроку.
 * Например, чтобы получить из строки "Просто пример строки" подстроку "пример", нужно в параметр "С индекса" указать 7, а в парамет "До индекса" указть 13.
 * Если параметры "С индекса" и "До индекса" не указаны, будут получена вся строка.
 * Если параметр "С индекса" указан, а параметр "До индекса" не указан, будут получены все символы с указанного до конца строки.
 * Если параметр "С индекса" не указан, а параметр "До индекса" указан, будут получены все символы с первого до указанного.
 * Если оба параметра "С индекса" и "До индекса" указаны, будут получены все символы с указанного до указанного.
 * Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
 * 
 * @param str Строка
  Строка, из которой нужно получить подстроку.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param from С индекса. Может быть пустым
  Индекс символа, с которого начинается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
  Примеры :
  1 - С второго символа
  0 - С первого символа
  -1 - С последнего символа
  Пустая строка - С начала строки

 * @param to До индекса. Может быть пустым
  Индекс символа, которым заканчивается получение подстроки. Если отрицателен, то указывает смещение от конца строки.
  Примеры :
  1 - До второго символа
  0 - До первого символа
  -1 - До последнего символа
  Пустая строка - До конца строки

  @returns подстрока.
  Примеры :
  пример
  text
  str
 * 
 */
declare function _get_substring(str: string, from: number, to: number): string

/**
 * Получить подстроку между
 * Получить подстроку между двумя подстроками.
 * Это действие вернет полученную подстроку.
 * Например, чтобы получить из строки "<h1>Заголовок текста</h1>" подстроку "Заголовок текста", нужно в параметр "Левая подстрока" указать "<h1>", а в парамет "Правая подстрока" указть "</h1>".
 * Если параметры "Левая подстрока" и "Правая подстрока" не указаны, будут получена вся строка.
 * Если параметр "Левая подстрока" указан, а параметр "Правая подстрока" не указан, будут получены все символы от указанной подстроки до конца строки.
 * Если параметр "Левая подстрока" не указан, а параметр "Правая подстрока" указан, будут получены все символы с первого до указанной подстрки.
 * Если оба параметра "Левая подстрока" и "Правая подстрока" указаны, будут получены все символы от указанной подстроки до указанной подстрки.
 * 
 * @param str Строка
  Строка, из которой нужно получить подстроку.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param left Левая подстрока. Может быть пустым
  Подстрока находящаяся слева от подстроки которую нужно получить.
  Примеры :
  (
  <a>
  <p>
  <span>
  Пустая строка - С начала строки

 * @param right Правая подстрока. Может быть пустым
  Подстрока находящаяся справа от подстроки которую нужно получить.
  Примеры :
  )
  </a>
  </p>
  </span>
  Пустая строка - До конца строки

  @returns подстрока.
  Примеры :
  пример
  text
  str
 */
declare function _get_substring_between(
  str: string,
  left: string,
  right: string
): string

/**
 * Удалить часть строки
 * Удалите часть строки и/или вставьте новую.
 * Это действие может либо удалить часть строки, либо вставить новую часть, либо все одновременно.
 * Это действие вернет строку, полученную в итоге выполнения всех манипуляций.
 * Чтобы только удалить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, а параметр "Вставляемая подстрока" не указывать.
 * Например, если указана строка "Тест текст", индекс 0 и количество символов 5, то действие вернет "текст".
 * Чтобы только вставить, нужно указать параметр "Вставляемая подстрока", а в параметр "Количество удаляемых символов" указать ноль.
 * Например, если указана строка "Просто строки", индекс 7, количество символов 0 и подстрока "пример ", то действие вернет "Просто пример строки".
 * Чтобы удалить и вставить, нужно указать в параметр "Количество удаляемых символов" значение больше нуля, и указать параметр "Вставляемая подстрока".
 * Например, если указана строка "Тест не текст", индекс 5, количество символов 2 и подстрока "новый", то действие вернет "Тест новый текст".
 * Если вам нужно только вставить подстроку, то вы можете использовать действие "Вставить в".
 * 
 * @param str Строка
  Строка, из которой нужно удалить часть и/или добавить новую.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param from С индекса. Может быть пустым
  Индекс символа, с которого начинается изменение строки. Если отрицателен, то указывает смещение от конца строки.
  Примеры :
  1 - С второго символа
  0 - С первого символа
  -1 - С последнего символа
  Пустая строка - С начала строки

 * @param count Количество удаляемых символов
  Количество символов, которые будут удалены.
  Примеры :
  4
  2
  0 - Не удалять символы

 * @param add Вставляемая подстрока. Может быть пустым
  Необязательный параметр. Подстрока, которая будет вставлена вместо удаленной части.
  Примеры :
  пример
  text
  str
  Пустая строка - Не вставить подстроку

  @returns итоговая строка.
  Примеры :
  пример текста
  New text
  Test string
 */
declare function _splice_string(
  str: string,
  from: number,
  count: number,
  add: string
): string

/**
 * В нижний регистр
 * Преобразовать все буквы строки в нижний регистр.
 * Это действие вернет строку, в которой все буквы будут иметь нижний регистр, а остальные символы останутся без изменений.
 * Например строка "ТЕСТ" будет преобразована в строку "тест", а строка "Пример Строки" будет преобразована в строку "пример строки".
 * Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
 * 
 * @param str Строка
  Строка, которую нужно преобразовать в нижний регистр.
  Примеры :
  Просто пример текста
  Test Text
  STRING

  @returns преобразованная строка.
  Примеры :
  просто пример текста
  test text
  string
 */
declare function _to_lower_case(str: string): string

/**
 * В верхний регистр
 * Преобразовать все буквы строки в верхний регистр.
 * Это действие вернет строку, в которой все буквы будут иметь верхний регистр, а остальные символы останутся без изменений.
 * Например строка "тест" будет преобразована в строку "ТЕСТ", а строка "пример строки" будет преобразована в строку "ПРИМЕР СТРОКИ".
 * Если вам нужно преобразовать первую букву в верхний регистр, а остальные в нижний регистр, то используйте действие "Слово с большой буквы".
 * 
 * @param str Строка
  Строка, которую нужно преобразовать в верхний регистр.
  Примеры :
  Просто пример текста
  Test text
  string

  @returns преобразованная строка.
  Примеры :
  ПРОСТО ПРИМЕР ТЕКСТА
  TEST TEXT
  STRING
 */
declare function _to_upper_case(str: string): string

/**
 * Содержит
 * Проверить, содержит ли строка подстроку.
 * Это действие вернет true или false в зависимости от того, содержит ли строка подстроку. Результат может быть использован вместе с действием "If".
 * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет false.
 * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
 * 
 * @param str Строка
  Строка, в которой нужно проверить содержание подстроки.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param sub Подстрока
  Подстрока, содержание которой нужно проверить.
  Примеры :
  пример
  text
  str
 
 * @param from С индекса
  Необязательный параметр. Индекс символа, с которого следует начать поиск.
  Примеры :
  1 - С второго символа
  0 - С первого символа
  Пустая строка - С начала строки

  @returns true или false в зависимости от того, содержит ли строка подстроку.
  Примеры :
  true - Строка содержит подстроку.
  false - Строка не содержит подстроку.
 */
declare function _string_contains(
  str: string,
  sub: string,
  from: number
): boolean

/**
 * Получить длину
 * Получить количество символов из строки.
 * Это действие вернет число, равное количеству символов в строке.
 * Например, если указана строка "Тестовый текст", то действие вернет 14, а если указана строка "Просто пример строки", то действие вернет 20.
 * 
 * @param str Строка
  Строка, из которой нужно получить количество символов.
  Примеры :
  Просто пример текста
  Test text
  string

  @returns количество символов, содержащихся в строке.
  Примеры :
  5
  2
  0 - Пустая строка
 */
declare function _string_length(str: string): number

/**
 * Слово с большой буквы
 * Преобразовать первую букву слова в верхний регистр.
 * Это действие вернет строку, в которой первая буква будут иметь верхний регистр, а остальные останутся без изменений.
 * Например, если указана строка "тестовый текст", то действие вернет "Тестовый текст", а если указана строка "просто пример строки", то действие вернет "Просто пример строки".
 * Если активирован параметр "Сделать все слова заглавными", то первые буквы во всех словах будут иметь верхний регистр.
 * Например, если указана строка "тестовый текст", то действие вернет "Тестовый Текст", а если указана строка "просто пример строки", то действие вернет "Просто Пример Строки".
 * Если активирован параметр "Все остальные буквы в нижний регистр", то все буквы, которые не были преобразованы в верхний регистр, будут преобразованы в нижний регистр.
 * Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто пример строки".
 * Если активированы оба параметра "Сделать все слова заглавными" и "Все остальные буквы в нижний регистр", то первые буквы во всех словах будут иметь верхний регистр, а все остальные нижний регистр.
 * Например, если указана строка "ТЕСТОВЫЙ ТЕКСТ", то действие вернет "Тестовый Текст", а если указана строка "ПРОСТО ПРИМЕР СТРОКИ", то действие вернет "Просто Пример Строки".
 * 
 * @param str Строка
  Строка, в которой нужно преобразовать слова.
  Примеры :
  просто пример текста
  test text
  string

 * @param all Сделать все слова заглавными
 * @param lower Все остальные буквы в нижний регистр
 * @returns преобразованная строка.
  Примеры :
  Просто пример текста
  Test Text
  String
 */
declare function _capitalize(str: string, all: boolean, lower: boolean): string

/**
 * Количество слов
 * Получить количество слов из строки.
 * Это действие вернет число, равное количеству слов в строке.
 * Например, если указана строка "Тестовый текст", то действие вернет 2, а если указана строка "Просто пример строки", то действие вернет 3.
 * 
 * @param str Строка
  Строка, из которой нужно получить количество слов.
  Примеры :
  Просто пример текста
  Test text
  string

  @returns количество слов, содержащихся в строке.
  Примеры :
  5
  2
  0 - Строка не содержит слов

 */
declare function _count_words(str: string): number

/**
 * Разделить предложение на слова
 * Разделить строку на слова.
 * Это действие вернет список, содержащий слова, полученные из строки.
 * Например, если указана строка "Тестовый текст", то действие вернет ["Тестовый","текст"], а если указана строка "Просто пример строки.", то действие вернет ["Просто","пример","строки"].
 * Это действие игнорирует любые символы, кроме букв и цифр.
 * Например, если указана строка "Вкусный 100% сок.", то действие вернет ["Вкусный", "100", "сок"].
 * Список можно обработать с помощью действий из модуля "Список".
 * 
 * @param str Строка
  Строка, содержащая предложение, которое нужно разделить на слова.
  Примеры :
  Просто пример текста
  Test text
  string

  @returns список слов.
  Примеры :
  ["Просто", "пример", "текста"]
  ["Test", "text"]
  ["string"]
 */
declare function _words(str: string): Array<string>

/**
 * Разделить текст на предложения
 * Разделить строку на предложения.
 * Это действие вернет список, содержащий предложения, полученные из строки.
 * Например, если указана строка "Просто пример текста. Тестовый текст, строка", то действие вернет ["Просто пример текста.","Тестовый текст, строка"], а если указана строка "Тестовый текст! Тестовый текст! Тестовый текст!", то действие вернет ["Тестовый текст!","Тестовый текст!","Тестовый текст!"].
 * Список можно обработать с помощью действий из модуля "Список".
 * 
 * @param str Строка
  Строка, содержащая текст, который нужно разделить на предложения.
  Примеры :
  Просто пример текста. Тестовый текст, строка
  Test text! Test text! Test text!
  string

  @returns список предложений.
  Примеры :
  ["Просто пример текста.", "Тестовый текст, строка"]
  ["Test text!", "Test text!", "Test text!"]
  ["string"]
 */
declare function _sentences(str: string): Array<string>

/**
 * Найти подстроку
 * Найти подстроку в строке.
 * Это действие вернет число, равное индексу начала первой найденной подстроки, или -1, если подстрока не найдена.
 * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет 9, а если указана строка "Просто пример строки" и подстрока "тест", то действие вернет -1.
 * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
 * 
 * @param str Строка
  Строка, в которой нужно найти подстроку.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param sub Подстрока
  Подстрока, которую нужно найти в строке.
  Примеры :
  пример
  text
  str
 
 * @param from С индекса
  Необязательный параметр. Индекс символа, с которого следует начать поиск.
  Примеры :
  1 - С второго символа
  0 - С первого символа
  Пустая строка - С начала строки

  @returns индекс начала подстроки.
  Примеры :
  0
  3
  5
  -1 - Строка не содержит указанную подстроку
 */
declare function _find_substring(str: string, sub: string, from: number): number

/**
 * Начинается с
 * Проверить, начинается ли строка с указанной подстроки.
 * Это действие вернет true или false в зависимости от того, начинается ли строка с указанной подстроки. Результат может быть использован вместе с действием "If".
 * Например, если указана строка "Тестовый текст" и подстрока "Тестовый", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
 * По умолчанию поиск производится с начала строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "С индекса", находящийся в дополнительных настройках.
 * 
 * @param str Строка
  Строка, которую нужно проверить.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param sub Подстрока
  Подстрока, с которой должна начинатся строка.
  Примеры :
  пример
  text
  str
 
 * @param from С индекса
  Необязательный параметр. Индекс символа, с которого следует начать поиск.
  Примеры :
  1 - С второго символа
  0 - С первого символа
  Пустая строка - С начала строки

  @returns true или false в зависимости от того, начинается ли строка с указанной подстроки.
  Примеры :
  true - Строка начинается с подстроки.
  false - Строка не начинается с подстроки.
 */
declare function _starts_with(str: string, sub: string, from: number): boolean

/**
 * Заканчивается на
 * Проверить, заканчивается ли строка указанной подстрокой.
 * Это действие вернет true или false в зависимости от того, заканчиваться ли строка указанной подстрокой. Результат может быть использован вместе с действием "If".
 * Например, если указана строка "Тестовый текст" и подстрока "текст", то действие вернет true, а если указана строка "Просто пример строки" и подстрока "пример", то действие вернет false.
 * По умолчанию поиск производится с конца строки, но это можно изменить, указав индекс, с которого следует начинать поиск, в параметр "Длина", находящийся в дополнительных настройках.
 * 
 * @param str Строка
  Строка, которую нужно проверить.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param sub Подстрока
  Подстрока, которой должна заканчиваться строка.
  Примеры :
  пример
  text
  str
 
 * @param length Длина
  Необязательный параметр. Длина, до которой будет обрезана строка при поиске подстроки, позволяет искать внутри строки.
  Примеры :
  10
  5
  Пустая строка - Длина строки

  @returns true или false в зависимости от того, заканчиваться ли строка указанной подстрокой.
  Примеры :
  true - Строка заканчивается подстрокой.
  false - Строка не заканчивается подстрокой.
 */
declare function _ends_with(str: string, sub: string, length: number): boolean

/**
 * Вставить в
 * Вставить подстроку в строку.
 * Это действие вернет строку, полученную в итоге вставки подстроки.
 * Например, если указана строка "Просто строки", подстрока "пример " и индекс 7, то действие вернет "Просто пример строки".
 * Если индекс отрицательное число, то он интерпретируется как количество символов с конца строки.
 * Если вам нужно не только вставить подстроку, но и удалить часть исходной строки, то используйте действие "Удалить часть строки".
 * 
 * @param str Строка
  Строка, в которую нужно вставить подстроку.
  Примеры :
  Просто пример текста
  Test text
  string

 * @param index Индекс. Может быть пустым
  Индекс символа, после которого будет вставлена подстрока. Если отрицателен, то указывает смещение от конца строки.
  Примеры :
  1 - После второго символа
  0 - После первого символа
  -1 - После последнего символа
  Пустая строка - В начало строки

 * @param sub Вставляемая подстрока
  Подстрока, которую нужно вставить.
  Примеры :
  не
  good
  New
  Пустая строка - Не вставить подстроку

  @returns итоговая строка.
  Примеры :
  Просто не пример текста
  Test good text
  New string
 */
declare function _insert_substring(
  str: string,
  index: number,
  sub: string
): string

/**
 * Base64 кодировать
 * Кодирует строку в base64.
 * Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
 * 
 * @param string Данные
  В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
  Примеры :
  any text - Любая строка. Работает в режиме encode
  YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
  [[FILE_CONTENT]] - Переменная, которая содержит результат чтения файла. Работает в режиме decode

  @returns строка в формате base64
 */
declare function base64_encode(string: string): string

/**
 * Base64 декодировать
 * Декодирует строку в base64.
 * Кодировка base64 представляет двоичные данные в виде ascii строки. BAS хранит двоичные данные как строки в формате base64. Это могут быть файлы, изображения, видео и т. д.
 * В большинстве случаев вам не нужно декодировать base64 строки, некоторые действия принимают входные данные прямо в формате base64, это такие действия как: "Запись В Файл", "Начать работу с изображением". Более того, если вы попытаетесь декодировать бинарные данные, закодированные как base64, результат может быть поврежден, поэтому лучше использовать строку в формате base64 без декодирования.
 * 
 * @param string Данные
  В зависимости от режима, входным параметром будет либо строка с кодировкой base64, которая должна быть декодирована, либо обычная строка, которая должна быть закодирована.
  Примеры :
  any text - Любая строка. Работает в режиме encode
  YW55IHN0cmluZw== - Строка в формате base64. Работает в режиме decode
  [[FILE_CONTENT]] - Переменная, которая содержит результат чтения файла. Работает в режиме decode

  @returns результат декодирования
 */
declare function base64_decode(string: string): string

/**
 * Шаблон
 * Создать новую переменную или изменить существующую на многострочный текст. Может заменять спинтакс, ресурсы, переменные на их значения. Действие может использоваться для загрузки шаблона из файла или его динамической генерации. Оно лучше всего подходит, если нужно генерировать текст для постинга.
 * Это действие получает текст из многострочного текстового поля "Шаблон" и сохраняет его в переменную, определенной в параметре "Переменная, в которую сохранять результат". И это все, что делает это действие, если только текст не содержит специальных значений. Вот их список:
 * Переменные [[VARIABLE]] будут заменены на их значения.
 * Ресурсы {{resource}} также будут заменены на их значения.
 * Спинтакс {value1|value2} будет заменен на одно из значений value1 или value2.
 * <AnyLetter> - будет заменено на любую букву.
 * <AnyDigit> - будет заменено на любую цифру.
 * <ELowVow> - тоже самое, что {a|e|i|o|u}
 * <EUpVow> - тоже самое, что {a|e|i|o|u}
 * <ELowCons> - тоже самое, что {b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z}
 * <EUpCons> - тоже самое, что {B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z}
 * <EUp> - тоже самое, что {<EUpVow>|<EUpCons>}
 * <ELow> - тоже самое, что {<ELowVow>|<ELowCons>}
 * <EFemName> - английские женские имена начинающиеся с заглавной буквы.
 * <EFemNameLow> - английские женские имена.
 * <EMaleName> - английские мужские имена начинающиеся с заглавной буквы.
 * <EMaleNameLow> - английские мужские имена.
 * <ESurname> - английские фамилии имена начинающиеся с заглавной буквы.
 * <ESurnameLow> - английские фамилии.
 * Если выбрана установка "Дополнительная обработка", то это действие будет работать с динамическим шаблоном, т. е. шаблон будет взят из переменной. Рассмотрим следующий пример: у вас есть файл с содержанием "{Hello|Hi}, <EMaleName> {!|}" и вам нужно его обработать с помощью BAS. Сначала нужно загрузить файл в переменную [[FILE_CONTENT]]. Если вы поместите [[FILE_CONTENT]] в действие "шаблон" и не устанавливаете флаг "Дополнительная обработка", то результат будет таким же, как и исходное содержимое файла. Но если вы установите этот флаг, BAS сначала заменит переменную [[FILE_CONTENT]] на содержание файла, а затем проведет замену переменых, спинтакса и ресурсов уже в содержании файла. Наконец, результат будет похож на "Hi, John!".
 * 
 * @param text Шаблон
  Значение переменной
  Примеры :
  any string - Любая строка
  [[LOGIN]]:[[PASSWORD]] - Соеденить 2 строки
  {Hi|Hello}, John! - Спинтакс
  <EMaleName> - Будет заменено мужским именем
  {a{1|2|3}|} - a1, a2, a3 или пустая строка
 */
declare function _spintax(text: string): string

/**
 * Заменить строку
 * Это действие ищет в строке, определенной с помощью параметра "Оригинальная Строка", значения, определенные с помощью параметра "Заменить Из", и заменяет их на значение определенное с помощью параметра "Заменить На".
 * Это действие заменяет все вхождения, а не только самое первое.
 * Используйте действие "Заменить строку" из модуля "Регулярные выражения" для замены с помощью регулярного выражения.
 * 
 * @param str Оригинальная Строка
  Строка, в которой будет выполнена замена

 * @param from Заменить Из
  Строка для поиска

 * @param to Заменить На
  Новое значение

  @returns копия оригинальной строки с проведенной заменой
 */
declare function _replace_string(str: string, from: string, to: string): string

/**
 * Случайная строка
 * Сгенерировать случайную строку с заданной длиной и разрешенными символами.
 * @param length Длина Генерируемой Строки
 * @param chars Разрешенные Символы
 */
declare function _random_string(length: number, chars: string): string

/**
 * Латинизировать
 * Преобразуйте все буквы в латиницу.
 * Это действие вернет строку, в которой все буквы будут латинизированы, а остальные символы останутся без изменений.
 * Например строка "ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů" будет преобразована в строку "ExAmPlE aeiouycdenrstzu", а строка "Привет мир!" будет преобразована в строку "Privet mir!".
 * По умолчанию кириллица тоже латинизируется, но это можно изменить, отключив параметр "Латинизировать кириллицу".
 * 
 * @param str Строка
  Строка, которую нужно латинизировать.
  Примеры :
  ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů
  Привет мир!
  Просто пример текста

 * @param ciryllic Латинизировать кириллицу

  @returns преобразованная строка.
  Примеры :
  ExAmPlE aeiouycdenrstzu
  Privet mir!
  Prosto primer teksta
 */
declare function _latinize(str: string, ciryllic: boolean): string

/**
 * Склонять
 * Склонять слово в зависимости от указанного числа.
 * Это действие вернет одно из трех слов, подходящее по склонению к указанному числу.
 * Например, если указаны слова "аккаунт", "аккаунта", "аккаунтов" и число равно 5, то действие вернет "аккаунтов", а если число равно 22, то действие вернет "аккаунта".
 * 
 * @param num Число
  Число, по которому будет определяется склонение возвращаемого слова.
  Примеры :
  123
  100000
  1456.578

 * @param words [
    Слово при 1
    Слово, если число равно 1.
    Примеры :
    минута
    год
    аккаунт,

    Слово при 2
    Слово, если число равно 2.
    Примеры :
    минуты
    года
    аккаунта,

    Слово при 5
    Слово, если число равно 5.
    Примеры :
    минут
    лет
    аккаунтов
 * ]
  
  @returns слово, сответствующее указанному числу.
  Примеры :
  минута - при 21
  лет - при 10
  аккаунта - при 22
 */
declare function _declination(
  num: string,
  words: [string, string, string]
): string

/**
 * Извлечь все почты
 * Извлечь все адреса электронной почты из строки.
 * Это действие вернет список, содержащий адреса электронной почты, полученные из строки.
 * Например, если указана строка "Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.", то действие вернет ["test@gmail.com", "example@gmail.com"].
 * Список можно обработать с помощью действий из модуля "Список".
 * 
 * @param str Строка
  Строка, из которой нужно извлечь адреса электронной почты.
  Примеры :
  Предложения по сотрудничеству вы можете присылать на почту: cooperation@marketplace.com

  Тестовый текст - test@gmail.com. Просто пример текста - example@gmail.com.

  Предложения по рекламе, вы можете отправлять на почту: ad@site.com
  Предложения по улучшению сайта вы можете отправлять на почту: feedback@site.com
  Чтобы получить помощь в решении проблем с сайтом, вы можете написать на почту: support@site.com

  @returns список адресов электронной почты.
  Примеры :
  ["cooperation@marketplace.com"]
  ["test@gmail.com", "example@gmail.com"]
  ["ad@site.com", "feedback@site.com", "support@site.com"]
 */
declare function _extract_emails(str: string): Array<string>

/**
 * Извлечь все ссылки
 * Извлечь все ссылки из строки.
 * Это действие вернет список, содержащий ссылки, полученные из строки.
 * Например, если указана строка "Тестовый текст http://test.com, строка тест example.org", то действие вернет ["http://test.com", "example.org"].
 * Список можно обработать с помощью действий из модуля "Список".
 * Распарсить ссылку на элементы можно с помощью действия "Парсить URL" из модуля "URL".
 * 
 * @param str Строка
  Строка, из которой нужно извлечь ссылки.
  Примеры :
  Купить товар вы можете по ссылке - https://marketplace.biz/section_3/product_213234.php

  Тестовый текст http://test.com, строка тест example.org

  Реклама -> http://www.ad.by/info, обратная связь -> www.feedback.io, поддержка -> https://support.co/new/ticket.php

  @returns список ссылок.
  Примеры :
  ["https://marketplace.biz/section_3/product_213234.php"]
  ["http://test.com", "example.org"]
  ["http://www.ad.by", "www.feedback.io", "https://support.co/new/ticket.php"]
 */
declare function _extract_urls(str: string): Array<string>

/**
 * Извлечь все телефонные номера
 * Извлечь все телефонные номера из строки.
 * Это действие вернет список, содержащий телефонные номера, полученные из строки.
 * Например, если указана строка "Тестовый текст - 89001112233. Просто пример текста - +7 900 999 4455.", то действие вернет ["89001112233", "+7 900 999 4455"].
 * Список можно обработать с помощью действий из модуля "Список".
 * 
 * @param str Строка
  Строка, из которой нужно извлечь телефонные номера.
  Примеры :
  Здравствуйте, мой номер +1 323 123-4567

  Деловые вопросы/пресса: Александра +7 900 000-00-00

  PR: Мария +7(900)000-00-01 | Агент 1: Валерия +7(900)000-00-02 | Агент 2: Екатерина +7(900)00-00-03

  @returns список телефонных номеров.
  Примеры :
  ["+1 323 123-4567"]
  ["+7 900 000-00-00"]
  ["+7(900)000-00-01", "+7(900)000-00-02", "+7(900)00-00-03"]
 */
declare function _extract_phone_numbers(str: string): Array<string>

/**
 * Специальные HTML символы кодировать
 * Кодирует строку содержащую специальные HTML символы.
 * 
 * @param str Строка
 * @returns закодированная строка
 */
declare function _escape_html(str: string): string

/**
 * Специальные HTML символы декодировать
 * Декодирует строку содержащую специальные HTML символы.
 * 
 * @param str Строка
 * @returns результат декодирования
 */
declare function _unescape_html(str: string): string